
Current_Measurement_Stop_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c84  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e48  08000e50  00001e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e48  08000e48  00001e50  2**0
                  CONTENTS
  4 .ARM          00000000  08000e48  08000e48  00001e50  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e48  08000e50  00001e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e48  08000e48  00001e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e4c  08000e4c  00001e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000e50  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000024  08000e50  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004be2  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001313  00000000  00000000  00006a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00007d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000569  00000000  00000000  000084e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c19  00000000  00000000  00008a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008726  00000000  00000000  0001c662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073e66  00000000  00000000  00024d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e38  00000000  00000000  00098c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0009aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e30 	.word	0x08000e30

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000e30 	.word	0x08000e30

08000204 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]
 8000214:	230f      	movs	r3, #15
 8000216:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	78db      	ldrb	r3, [r3, #3]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d039      	beq.n	8000294 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000220:	4b27      	ldr	r3, [pc, #156]	@ (80002c0 <NVIC_Init+0xbc>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	43db      	mvns	r3, r3
 8000226:	0a1b      	lsrs	r3, r3, #8
 8000228:	b2db      	uxtb	r3, r3
 800022a:	f003 0307 	and.w	r3, r3, #7
 800022e:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	f1c3 0304 	rsb	r3, r3, #4
 8000236:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000238:	7b7a      	ldrb	r2, [r7, #13]
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	fa42 f303 	asr.w	r3, r2, r3
 8000240:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	461a      	mov	r2, r3
 8000248:	7bbb      	ldrb	r3, [r7, #14]
 800024a:	fa02 f303 	lsl.w	r3, r2, r3
 800024e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	789a      	ldrb	r2, [r3, #2]
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	4013      	ands	r3, r2
 8000258:	b2da      	uxtb	r2, r3
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	4313      	orrs	r3, r2
 800025e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000260:	7bfb      	ldrb	r3, [r7, #15]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000266:	4a17      	ldr	r2, [pc, #92]	@ (80002c4 <NVIC_Init+0xc0>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	4413      	add	r3, r2
 800026e:	7bfa      	ldrb	r2, [r7, #15]
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	4911      	ldr	r1, [pc, #68]	@ (80002c4 <NVIC_Init+0xc0>)
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	0952      	lsrs	r2, r2, #5
 8000284:	b2d2      	uxtb	r2, r2
 8000286:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	2201      	movs	r2, #1
 800028a:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800028e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000292:	e00f      	b.n	80002b4 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800029c:	4909      	ldr	r1, [pc, #36]	@ (80002c4 <NVIC_Init+0xc0>)
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	0952      	lsrs	r2, r2, #5
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002a8:	2201      	movs	r2, #1
 80002aa:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002ac:	f100 0320 	add.w	r3, r0, #32
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80002de:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002e6:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <EXTI_DeInit+0x30>)
 80002e8:	615a      	str	r2, [r3, #20]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40013c00 	.word	0x40013c00
 80002f8:	007fffff 	.word	0x007fffff

080002fc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000308:	4b34      	ldr	r3, [pc, #208]	@ (80003dc <EXTI_Init+0xe0>)
 800030a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	799b      	ldrb	r3, [r3, #6]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d04f      	beq.n	80003b4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <EXTI_Init+0xe0>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	43db      	mvns	r3, r3
 800031e:	492f      	ldr	r1, [pc, #188]	@ (80003dc <EXTI_Init+0xe0>)
 8000320:	4013      	ands	r3, r2
 8000322:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000324:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <EXTI_Init+0xe0>)
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	43db      	mvns	r3, r3
 800032e:	492b      	ldr	r1, [pc, #172]	@ (80003dc <EXTI_Init+0xe0>)
 8000330:	4013      	ands	r3, r2
 8000332:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	461a      	mov	r2, r3
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	4413      	add	r3, r2
 800033e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	6819      	ldr	r1, [r3, #0]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	430a      	orrs	r2, r1
 800034c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <EXTI_Init+0xe0>)
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	43db      	mvns	r3, r3
 8000358:	4920      	ldr	r1, [pc, #128]	@ (80003dc <EXTI_Init+0xe0>)
 800035a:	4013      	ands	r3, r2
 800035c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800035e:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <EXTI_Init+0xe0>)
 8000360:	68da      	ldr	r2, [r3, #12]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	43db      	mvns	r3, r3
 8000368:	491c      	ldr	r1, [pc, #112]	@ (80003dc <EXTI_Init+0xe0>)
 800036a:	4013      	ands	r3, r2
 800036c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	795b      	ldrb	r3, [r3, #5]
 8000372:	2b10      	cmp	r3, #16
 8000374:	d10e      	bne.n	8000394 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000376:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <EXTI_Init+0xe0>)
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4917      	ldr	r1, [pc, #92]	@ (80003dc <EXTI_Init+0xe0>)
 8000380:	4313      	orrs	r3, r2
 8000382:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <EXTI_Init+0xe0>)
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4913      	ldr	r1, [pc, #76]	@ (80003dc <EXTI_Init+0xe0>)
 800038e:	4313      	orrs	r3, r2
 8000390:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000392:	e01d      	b.n	80003d0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <EXTI_Init+0xe0>)
 8000396:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	461a      	mov	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	4413      	add	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	6819      	ldr	r1, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
}
 80003b2:	e00d      	b.n	80003d0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	4413      	add	r3, r2
 80003be:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	43da      	mvns	r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	400a      	ands	r2, r1
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40013c00 	.word	0x40013c00

080003e0 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <EXTI_GetITStatus+0x30>)
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4013      	ands	r3, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e001      	b.n	8000402 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40013c00 	.word	0x40013c00

08000414 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800041c:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <EXTI_ClearITPendingBit+0x1c>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6153      	str	r3, [r2, #20]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40013c00 	.word	0x40013c00

08000434 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b087      	sub	sp, #28
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	e076      	b.n	800053e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000450:	2201      	movs	r2, #1
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	4013      	ands	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	429a      	cmp	r2, r3
 800046a:	d165      	bne.n	8000538 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	2103      	movs	r1, #3
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	43db      	mvns	r3, r3
 800047c:	401a      	ands	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	4619      	mov	r1, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d003      	beq.n	80004aa <GPIO_Init+0x76>
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d12e      	bne.n	8000508 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	401a      	ands	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689a      	ldr	r2, [r3, #8]
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	4619      	mov	r1, r3
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	431a      	orrs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	4619      	mov	r1, r3
 80004e2:	2301      	movs	r3, #1
 80004e4:	408b      	lsls	r3, r1
 80004e6:	43db      	mvns	r3, r3
 80004e8:	401a      	ands	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	683a      	ldr	r2, [r7, #0]
 80004f4:	7992      	ldrb	r2, [r2, #6]
 80004f6:	4611      	mov	r1, r2
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	b292      	uxth	r2, r2
 8000502:	431a      	orrs	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68da      	ldr	r2, [r3, #12]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	b29b      	uxth	r3, r3
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	401a      	ands	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68da      	ldr	r2, [r3, #12]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	79db      	ldrb	r3, [r3, #7]
 8000528:	4619      	mov	r1, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	3301      	adds	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b0f      	cmp	r3, #15
 8000542:	d985      	bls.n	8000450 <GPIO_Init+0x1c>
    }
  }
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	371c      	adds	r7, #28
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	460b      	mov	r3, r1
 800055c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	887a      	ldrh	r2, [r7, #2]
 8000562:	831a      	strh	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	887a      	ldrh	r2, [r7, #2]
 8000580:	835a      	strh	r2, [r3, #26]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800059a:	4a04      	ldr	r2, [pc, #16]	@ (80005ac <PWR_FlashPowerDownCmd+0x1c>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	420e0024 	.word	0x420e0024

080005b0 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <PWR_EnterSTOPMode+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <PWR_EnterSTOPMode+0x64>)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <PWR_EnterSTOPMode+0x68>)
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <PWR_EnterSTOPMode+0x68>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d101      	bne.n	80005f6 <PWR_EnterSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80005f2:	bf30      	wfi
}
 80005f4:	e001      	b.n	80005fa <PWR_EnterSTOPMode+0x4a>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 80005f6:	bf20      	wfe
}
 80005f8:	bf00      	nop
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <PWR_EnterSTOPMode+0x68>)
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	4a06      	ldr	r2, [pc, #24]	@ (8000618 <PWR_EnterSTOPMode+0x68>)
 8000600:	f023 0304 	bic.w	r3, r3, #4
 8000604:	6113      	str	r3, [r2, #16]
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40007000 	.word	0x40007000
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <PWR_ClearFlag>:
  *            @arg PWR_FLAG_SB: StandBy flag
  *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
#endif /* STM32F427_437xx ||  STM32F429_439xx */

#if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F410xx) || defined (STM32F411xE) || defined(STM32F412xG) || defined(STM32F413_423xx)
  PWR->CR |=  PWR_FLAG << 2;
#endif /* STM32F40_41xxx  || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <RCC_DeInit+0x60>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <RCC_DeInit+0x60>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <RCC_DeInit+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <RCC_DeInit+0x60>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a11      	ldr	r2, [pc, #68]	@ (8000690 <RCC_DeInit+0x60>)
 800064c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000650:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000654:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <RCC_DeInit+0x60>)
 8000658:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <RCC_DeInit+0x64>)
 800065a:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <RCC_DeInit+0x60>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <RCC_DeInit+0x68>)
 8000660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <RCC_DeInit+0x60>)
 8000666:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <RCC_DeInit+0x6c>)
 8000668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <RCC_DeInit+0x60>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <RCC_DeInit+0x60>)
 8000672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000676:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <RCC_DeInit+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800067e:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <RCC_DeInit+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40023800 	.word	0x40023800
 8000694:	24003010 	.word	0x24003010
 8000698:	20003000 	.word	0x20003000
 800069c:	24003000 	.word	0x24003000

080006a0 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <RCC_HSEConfig+0x24>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <RCC_HSEConfig+0x24>)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	7013      	strb	r3, [r2, #0]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023802 	.word	0x40023802

080006c8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80006d2:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <RCC_HSICmd+0x1c>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	42470000 	.word	0x42470000

080006e8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <RCC_SYSCLKConfig+0x34>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f023 0303 	bic.w	r3, r3, #3
 8000700:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4313      	orrs	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <RCC_SYSCLKConfig+0x34>)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6093      	str	r3, [r2, #8]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40023800 	.word	0x40023800

08000720 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <RCC_GetSYSCLKSource+0x1c>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 030c 	and.w	r3, r3, #12
 800072e:	b2db      	uxtb	r3, r3
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000756:	4909      	ldr	r1, [pc, #36]	@ (800077c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4313      	orrs	r3, r2
 800075c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800075e:	e006      	b.n	800076e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	43db      	mvns	r3, r3
 8000768:	4904      	ldr	r1, [pc, #16]	@ (800077c <RCC_AHB1PeriphClockCmd+0x3c>)
 800076a:	4013      	ands	r3, r2
 800076c:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d006      	beq.n	80007a0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <RCC_APB1PeriphClockCmd+0x3c>)
 8000794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000796:	4909      	ldr	r1, [pc, #36]	@ (80007bc <RCC_APB1PeriphClockCmd+0x3c>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	640b      	str	r3, [r1, #64]	@ 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800079e:	e006      	b.n	80007ae <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <RCC_APB1PeriphClockCmd+0x3c>)
 80007a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4904      	ldr	r1, [pc, #16]	@ (80007bc <RCC_APB1PeriphClockCmd+0x3c>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d006      	beq.n	80007e0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <RCC_APB2PeriphClockCmd+0x3c>)
 80007d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007d6:	4909      	ldr	r1, [pc, #36]	@ (80007fc <RCC_APB2PeriphClockCmd+0x3c>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4313      	orrs	r3, r2
 80007dc:	644b      	str	r3, [r1, #68]	@ 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007de:	e006      	b.n	80007ee <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <RCC_APB2PeriphClockCmd+0x3c>)
 80007e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4904      	ldr	r1, [pc, #16]	@ (80007fc <RCC_APB2PeriphClockCmd+0x3c>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	644b      	str	r3, [r1, #68]	@ 0x44
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	095b      	lsrs	r3, r3, #5
 800081a:	b2db      	uxtb	r3, r3
 800081c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d103      	bne.n	800082c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <RCC_GetFlagStatus+0x70>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e009      	b.n	8000840 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d103      	bne.n	800083a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <RCC_GetFlagStatus+0x70>)
 8000834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e002      	b.n	8000840 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <RCC_GetFlagStatus+0x70>)
 800083c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800083e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	fa22 f303 	lsr.w	r3, r2, r3
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000858:	2301      	movs	r3, #1
 800085a:	74fb      	strb	r3, [r7, #19]
 800085c:	e001      	b.n	8000862 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000862:	7cfb      	ldrb	r3, [r7, #19]
}
 8000864:	4618      	mov	r0, r3
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40023800 	.word	0x40023800

08000874 <RTC_GetITStatus>:
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
  *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8000888:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <RTC_GetITStatus+0x70>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 16)));
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <RTC_GetITStatus+0x70>)
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	401a      	ands	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	0bd9      	lsrs	r1, r3, #15
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	400b      	ands	r3, r1
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0c19      	lsrs	r1, r3, #16
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	400b      	ands	r3, r1
 80008ac:	4313      	orrs	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <RTC_GetITStatus+0x70>)
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <RTC_GetITStatus+0x5c>
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <RTC_GetITStatus+0x5c>
  {
    bitstatus = SET;
 80008ca:	2301      	movs	r3, #1
 80008cc:	75fb      	strb	r3, [r7, #23]
 80008ce:	e001      	b.n	80008d4 <RTC_GetITStatus+0x60>
  }
  else
  {
    bitstatus = RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40002800 	.word	0x40002800

080008e8 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
  *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000902:	43da      	mvns	r2, r3
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <RTC_ClearITPendingBit+0x38>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090c:	4904      	ldr	r1, [pc, #16]	@ (8000920 <RTC_ClearITPendingBit+0x38>)
 800090e:	4313      	orrs	r3, r2
 8000910:	60cb      	str	r3, [r1, #12]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40002800 	.word	0x40002800

08000924 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	220f      	movs	r2, #15
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000948:	4a16      	ldr	r2, [pc, #88]	@ (80009a4 <SYSCFG_EXTILineConfig+0x80>)
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	b2db      	uxtb	r3, r3
 8000950:	3302      	adds	r3, #2
 8000952:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	43db      	mvns	r3, r3
 800095a:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <SYSCFG_EXTILineConfig+0x80>)
 800095c:	79b9      	ldrb	r1, [r7, #6]
 800095e:	0889      	lsrs	r1, r1, #2
 8000960:	b2c9      	uxtb	r1, r1
 8000962:	401a      	ands	r2, r3
 8000964:	1c8b      	adds	r3, r1, #2
 8000966:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800096a:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <SYSCFG_EXTILineConfig+0x80>)
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	3302      	adds	r3, #2
 8000974:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000978:	79f9      	ldrb	r1, [r7, #7]
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <SYSCFG_EXTILineConfig+0x80>)
 8000988:	79b9      	ldrb	r1, [r7, #6]
 800098a:	0889      	lsrs	r1, r1, #2
 800098c:	b2c9      	uxtb	r1, r1
 800098e:	431a      	orrs	r2, r3
 8000990:	1c8b      	adds	r3, r1, #2
 8000992:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40013800 	.word	0x40013800

080009a8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	/* Enable PWR APB1 Clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80009ac:	2101      	movs	r1, #1
 80009ae:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80009b2:	f7ff fee5 	bl	8000780 <RCC_APB1PeriphClockCmd>

	/* Configure GPIOs as analog inputs */
	//GPIO_AnalogConfig ();

	/*Configure Leds GPIOs */
	LedsConfig();
 80009b6:	f000 f817 	bl	80009e8 <LedsConfig>

	/* Configure Wakeup pin  */
	ButtonPinInt_configuration();
 80009ba:	f000 f831 	bl	8000a20 <ButtonPinInt_configuration>

	/* Execute defined Stop modes */
	Measure_Stop ();
 80009be:	f000 f803 	bl	80009c8 <Measure_Stop>

	/* Infinite loop */
	while (1)
 80009c2:	bf00      	nop
 80009c4:	e7fd      	b.n	80009c2 <main+0x1a>
	...

080009c8 <Measure_Stop>:
* @brief  Configure the Stop modes exection routines.
* @param  None
* @retval None
*/
void Measure_Stop (void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
#endif /* StopLowPwrRegFlashStop */

#if defined StopLowPwrRegFlashPwrDown

  /* Wait User push button to enter Stop mode */
  WaitUser_PushBotton ();
 80009cc:	f000 f86c 	bl	8000aa8 <WaitUser_PushBotton>

  /* Configure CPIOs as analog inputs */
 // GPIO_AnalogConfig ();

  PWR_StopLowPwrRegFlashPwrDown ();
 80009d0:	f000 f8a9 	bl	8000b26 <PWR_StopLowPwrRegFlashPwrDown>

  /* Exit from sleep mode  */
  Mode_Exit ();
 80009d4:	f000 f882 	bl	8000adc <Mode_Exit>

  UserButtonStatus = RESET;
 80009d8:	4b02      	ldr	r3, [pc, #8]	@ (80009e4 <Measure_Stop+0x1c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
  Mode_Exit ();
  UserButtonStatus = RESET;

#endif /* StopLowPwrRegUnderDriveFlashPwrDown */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000020 	.word	0x20000020

080009e8 <LedsConfig>:
* @brief  Configure LED gpio of NUCLEO-F446RE GPIOA.5
* @param  None
* @retval None
*/
static void LedsConfig (void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
/* Modification of code required if your board is not NUCLEO-F446RE*/
	GPIO_InitTypeDef  GPIO_InitStructure;

	/*Configure GPIO structure */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80009ee:	2301      	movs	r3, #1
 80009f0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80009f2:	2300      	movs	r3, #0
 80009f4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80009fa:	2302      	movs	r3, #2
 80009fc:	717b      	strb	r3, [r7, #5]
	/* Enable the GPIO_LED Port A Clock */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA , ENABLE);
 80009fe:	2101      	movs	r1, #1
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fe9d 	bl	8000740 <RCC_AHB1PeriphClockCmd>

	/* Configure 5th pin which drivers the LED*/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000a06:	2320      	movs	r3, #32
 8000a08:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <LedsConfig+0x34>)
 8000a10:	f7ff fd10 	bl	8000434 <GPIO_Init>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40020000 	.word	0x40020000

08000a20 <ButtonPinInt_configuration>:
* @param  None
* @retval None
* @Note :  Modification of code required if your board is not NUCLEO-F446RE
*/
void ButtonPinInt_configuration(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStructure;
	  EXTI_InitTypeDef EXTI_InitStructure;


	  /* Enable GPIOA clock */
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000a26:	2101      	movs	r1, #1
 8000a28:	2004      	movs	r0, #4
 8000a2a:	f7ff fe89 	bl	8000740 <RCC_AHB1PeriphClockCmd>

	  /* Enable SYSCFG clock */
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a34:	f7ff fec4 	bl	80007c0 <RCC_APB2PeriphClockCmd>

	  /* Configure PA0 pin as input floating */
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	743b      	strb	r3, [r7, #16]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a42:	2300      	movs	r3, #0
 8000a44:	74bb      	strb	r3, [r7, #18]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	74fb      	strb	r3, [r7, #19]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	747b      	strb	r3, [r7, #17]
	  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <ButtonPinInt_configuration+0x84>)
 8000a56:	f7ff fced 	bl	8000434 <GPIO_Init>

	  /* Connect EXTI Line0 to PA0 pin */
      SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 8000a5a:	210d      	movs	r1, #13
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f7ff ff61 	bl	8000924 <SYSCFG_EXTILineConfig>


	  /* Configure EXTI Line0 */
	  EXTI_DeInit();
 8000a62:	f7ff fc31 	bl	80002c8 <EXTI_DeInit>
	  EXTI_InitStructure.EXTI_Line = EXTI_Line13;
 8000a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6a:	607b      	str	r3, [r7, #4]
	  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	723b      	strb	r3, [r7, #8]
	  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000a70:	2308      	movs	r3, #8
 8000a72:	727b      	strb	r3, [r7, #9]
	  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	72bb      	strb	r3, [r7, #10]
	  EXTI_Init(&EXTI_InitStructure);
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fc3e 	bl	80002fc <EXTI_Init>



	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 8000a80:	2328      	movs	r3, #40	@ 0x28
 8000a82:	753b      	strb	r3, [r7, #20]
	  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	757b      	strb	r3, [r7, #21]
	  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	75bb      	strb	r3, [r7, #22]
	  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	75fb      	strb	r3, [r7, #23]
	  NVIC_Init(&NVIC_InitStructure);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbb5 	bl	8000204 <NVIC_Init>
	SYSCFG->EXTICR[3] &= ~(0xf  << 4 );
	SYSCFG->EXTICR[3] |= (0x2  << 4 );
	EXTI->RTSR |= ( 1 << 13);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020800 	.word	0x40020800

08000aa8 <WaitUser_PushBotton>:

//Just waits until user presses on board push button
void WaitUser_PushBotton (void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOA, GPIO_Pin_5);
 8000aac:	2120      	movs	r1, #32
 8000aae:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <WaitUser_PushBotton+0x2c>)
 8000ab0:	f7ff fd4f 	bl	8000552 <GPIO_SetBits>
	while(UserButtonStatus != SET); //wait here
 8000ab4:	bf00      	nop
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <WaitUser_PushBotton+0x30>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d1fa      	bne.n	8000ab6 <WaitUser_PushBotton+0xe>
	GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <WaitUser_PushBotton+0x2c>)
 8000ac4:	f7ff fd54 	bl	8000570 <GPIO_ResetBits>
	UserButtonStatus = RESET;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <WaitUser_PushBotton+0x30>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	20000020 	.word	0x20000020

08000adc <Mode_Exit>:
* @brief  Configure the exit routine from power mode.
* @param  None
* @retval None
*/
static void Mode_Exit (void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	/* Clock init configuration */
	  RCC_DeInit();
 8000ae0:	f7ff fda6 	bl	8000630 <RCC_DeInit>

	  /* Disable HSE */
	  RCC_HSEConfig(RCC_HSE_OFF);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fddb 	bl	80006a0 <RCC_HSEConfig>

	  /* Enable HSI */
	  RCC_HSICmd(ENABLE);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fdec 	bl	80006c8 <RCC_HSICmd>

	  /* Wait till HSI is ready */
	  while (RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET)
 8000af0:	bf00      	nop
 8000af2:	2021      	movs	r0, #33	@ 0x21
 8000af4:	f7ff fe84 	bl	8000800 <RCC_GetFlagStatus>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f9      	beq.n	8000af2 <Mode_Exit+0x16>
	  {}

	  /* Select HSI as system clock source */
	  RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff fdf2 	bl	80006e8 <RCC_SYSCLKConfig>

	  /* Wait till HSI is used as system clock source */
	  while (RCC_GetSYSCLKSource() != 0x00)
 8000b04:	bf00      	nop
 8000b06:	f7ff fe0b 	bl	8000720 <RCC_GetSYSCLKSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1fa      	bne.n	8000b06 <Mode_Exit+0x2a>
	  {}

	  /* Enable PWR APB1 Clock */
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8000b10:	2101      	movs	r1, #1
 8000b12:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000b16:	f7ff fe33 	bl	8000780 <RCC_APB1PeriphClockCmd>

	  /*Configure Leds GPIOs */
	  LedsConfig();
 8000b1a:	f7ff ff65 	bl	80009e8 <LedsConfig>

	  /* Configure Wakeup pin  */
	  ButtonPinInt_configuration();
 8000b1e:	f7ff ff7f 	bl	8000a20 <ButtonPinInt_configuration>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <PWR_StopLowPwrRegFlashPwrDown>:
  *           - Wakeup using WakeUp Pin (PA.00)
  * @param  None
  * @retval None
  */
void PWR_StopLowPwrRegFlashPwrDown (void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
	  /* Clear Wakeup flag*/
	  PWR_ClearFlag(PWR_FLAG_WU);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fd76 	bl	800061c <PWR_ClearFlag>

	  /* Enable button interrupt pin */
	  ButtonPinInt_configuration();
 8000b30:	f7ff ff76 	bl	8000a20 <ButtonPinInt_configuration>

	  /* FLASH Deep Power Down Mode enabled */
	  PWR_FlashPowerDownCmd(ENABLE);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fd2b 	bl	8000590 <PWR_FlashPowerDownCmd>

	  /* Enter Stop Mode Reg LP*/
	  PWR_EnterSTOPMode(PWR_Regulator_LowPower, PWR_STOPEntry_WFI);
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff fd37 	bl	80005b0 <PWR_EnterSTOPMode>

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{}
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{}
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{}
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{}
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI Line 0 interrupts requests.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(EXTI_Line13) != RESET)
 8000bb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bb4:	f7ff fc14 	bl	80003e0 <EXTI_GetITStatus>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <EXTI15_10_IRQHandler+0x20>
  {
    /* Clear the user push-button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line13);
 8000bbe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bc2:	f7ff fc27 	bl	8000414 <EXTI_ClearITPendingBit>
    UserButtonStatus = SET;
 8000bc6:	4b02      	ldr	r3, [pc, #8]	@ (8000bd0 <EXTI15_10_IRQHandler+0x24>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]

  }
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000020 	.word	0x20000020

08000bd4 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  if (RTC_GetITStatus(RTC_IT_WUT) != RESET)
 8000bd8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bdc:	f7ff fe4a 	bl	8000874 <RTC_GetITStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <RTC_WKUP_IRQHandler+0x22>
  {
    /* Clears the RTC's interrupt pending for WakeUp Timer  */
    RTC_ClearITPendingBit(RTC_IT_WUT);
 8000be6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bea:	f7ff fe7d 	bl	80008e8 <RTC_ClearITPendingBit>

    /* Clear the user push-button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line22);
 8000bee:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000bf2:	f7ff fc0f 	bl	8000414 <EXTI_ClearITPendingBit>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
 void SystemInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <SystemInit+0x60>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <SystemInit+0x60>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <SystemInit+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <SystemInit+0x64>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <SystemInit+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <SystemInit+0x64>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <SystemInit+0x64>)
 8000c28:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <SystemInit+0x64>)
 8000c34:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <SystemInit+0x68>)
 8000c36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <SystemInit+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <SystemInit+0x64>)
 8000c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <SystemInit+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000c4a:	f000 f80d 	bl	8000c68 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c4e:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <SystemInit+0x60>)
 8000c50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c54:	609a      	str	r2, [r3, #8]
#endif
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	40023800 	.word	0x40023800
 8000c64:	24003010 	.word	0x24003010

08000c68 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000c76:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <SetSysClock+0x11c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a42      	ldr	r2, [pc, #264]	@ (8000d84 <SetSysClock+0x11c>)
 8000c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000c82:	4b40      	ldr	r3, [pc, #256]	@ (8000d84 <SetSysClock+0x11c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d103      	bne.n	8000ca0 <SetSysClock+0x38>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8000c9e:	d1f0      	bne.n	8000c82 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ca0:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <SetSysClock+0x11c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000cac:	2301      	movs	r3, #1
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	e001      	b.n	8000cb6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d15c      	bne.n	8000d76 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000cbc:	4b31      	ldr	r3, [pc, #196]	@ (8000d84 <SetSysClock+0x11c>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a30      	ldr	r2, [pc, #192]	@ (8000d84 <SetSysClock+0x11c>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d88 <SetSysClock+0x120>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d88 <SetSysClock+0x120>)
 8000cce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cd2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <SetSysClock+0x11c>)
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <SetSysClock+0x11c>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000cdc:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <SetSysClock+0x11c>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <SetSysClock+0x11c>)
 8000ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ce6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <SetSysClock+0x11c>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a25      	ldr	r2, [pc, #148]	@ (8000d84 <SetSysClock+0x11c>)
 8000cee:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000cf2:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <SetSysClock+0x11c>)
 8000cf6:	4a25      	ldr	r2, [pc, #148]	@ (8000d8c <SetSysClock+0x124>)
 8000cf8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <SetSysClock+0x11c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <SetSysClock+0x11c>)
 8000d00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d04:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d06:	bf00      	nop
 8000d08:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <SetSysClock+0x11c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f9      	beq.n	8000d08 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <SetSysClock+0x120>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <SetSysClock+0x120>)
 8000d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8000d20:	bf00      	nop
 8000d22:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <SetSysClock+0x120>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f9      	beq.n	8000d22 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <SetSysClock+0x120>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a15      	ldr	r2, [pc, #84]	@ (8000d88 <SetSysClock+0x120>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8000d3a:	bf00      	nop
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <SetSysClock+0x120>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f9      	beq.n	8000d3c <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <SetSysClock+0x128>)
 8000d4a:	f240 7205 	movw	r2, #1797	@ 0x705
 8000d4e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <SetSysClock+0x11c>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <SetSysClock+0x11c>)
 8000d56:	f023 0303 	bic.w	r3, r3, #3
 8000d5a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <SetSysClock+0x11c>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <SetSysClock+0x11c>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000d68:	bf00      	nop
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SetSysClock+0x11c>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d1f9      	bne.n	8000d6a <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000
 8000d8c:	77405a08 	.word	0x77405a08
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d9a:	e003      	b.n	8000da4 <LoopCopyDataInit>

08000d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000da2:	3104      	adds	r1, #4

08000da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dac:	d3f6      	bcc.n	8000d9c <CopyDataInit>
  ldr  r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db0:	e002      	b.n	8000db8 <LoopFillZerobss>

08000db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000db4:	f842 3b04 	str.w	r3, [r2], #4

08000db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dbc:	d3f9      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ff1d 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f000 f811 	bl	8000de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fdef 	bl	80009a8 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dd0:	08000e50 	.word	0x08000e50
  ldr  r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dd8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000ddc:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000de0:	20000024 	.word	0x20000024

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <__libc_init_array>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	4d0d      	ldr	r5, [pc, #52]	@ (8000e20 <__libc_init_array+0x38>)
 8000dec:	4c0d      	ldr	r4, [pc, #52]	@ (8000e24 <__libc_init_array+0x3c>)
 8000dee:	1b64      	subs	r4, r4, r5
 8000df0:	10a4      	asrs	r4, r4, #2
 8000df2:	2600      	movs	r6, #0
 8000df4:	42a6      	cmp	r6, r4
 8000df6:	d109      	bne.n	8000e0c <__libc_init_array+0x24>
 8000df8:	4d0b      	ldr	r5, [pc, #44]	@ (8000e28 <__libc_init_array+0x40>)
 8000dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8000e2c <__libc_init_array+0x44>)
 8000dfc:	f000 f818 	bl	8000e30 <_init>
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	10a4      	asrs	r4, r4, #2
 8000e04:	2600      	movs	r6, #0
 8000e06:	42a6      	cmp	r6, r4
 8000e08:	d105      	bne.n	8000e16 <__libc_init_array+0x2e>
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e10:	4798      	blx	r3
 8000e12:	3601      	adds	r6, #1
 8000e14:	e7ee      	b.n	8000df4 <__libc_init_array+0xc>
 8000e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1a:	4798      	blx	r3
 8000e1c:	3601      	adds	r6, #1
 8000e1e:	e7f2      	b.n	8000e06 <__libc_init_array+0x1e>
 8000e20:	08000e48 	.word	0x08000e48
 8000e24:	08000e48 	.word	0x08000e48
 8000e28:	08000e48 	.word	0x08000e48
 8000e2c:	08000e4c 	.word	0x08000e4c

08000e30 <_init>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	bf00      	nop
 8000e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e36:	bc08      	pop	{r3}
 8000e38:	469e      	mov	lr, r3
 8000e3a:	4770      	bx	lr

08000e3c <_fini>:
 8000e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3e:	bf00      	nop
 8000e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e42:	bc08      	pop	{r3}
 8000e44:	469e      	mov	lr, r3
 8000e46:	4770      	bx	lr
