
008_timer_IC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800983c  0800983c  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800983c  0800983c  0000a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009844  08009844  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009844  08009844  0000a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009848  08009848  0000a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800984c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a50  20000080  20000080  0000b080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ad0  20000ad0  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000176ab  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003745  00000000  00000000  00022757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  00025ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001001  00000000  00000000  00027350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238ac  00000000  00000000  00028351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4af  00000000  00000000  0004bbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2237  00000000  00000000  000660ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001382e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c78  00000000  00000000  00138328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0013dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009808 	.word	0x08009808

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08009808 	.word	0x08009808

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_uldivmod>:
 8000964:	b953      	cbnz	r3, 800097c <__aeabi_uldivmod+0x18>
 8000966:	b94a      	cbnz	r2, 800097c <__aeabi_uldivmod+0x18>
 8000968:	2900      	cmp	r1, #0
 800096a:	bf08      	it	eq
 800096c:	2800      	cmpeq	r0, #0
 800096e:	bf1c      	itt	ne
 8000970:	f04f 31ff 	movne.w	r1, #4294967295
 8000974:	f04f 30ff 	movne.w	r0, #4294967295
 8000978:	f000 b96a 	b.w	8000c50 <__aeabi_idiv0>
 800097c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000984:	f000 f806 	bl	8000994 <__udivmoddi4>
 8000988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr

08000994 <__udivmoddi4>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	9d08      	ldr	r5, [sp, #32]
 800099a:	460c      	mov	r4, r1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d14e      	bne.n	8000a3e <__udivmoddi4+0xaa>
 80009a0:	4694      	mov	ip, r2
 80009a2:	458c      	cmp	ip, r1
 80009a4:	4686      	mov	lr, r0
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	d962      	bls.n	8000a72 <__udivmoddi4+0xde>
 80009ac:	b14a      	cbz	r2, 80009c2 <__udivmoddi4+0x2e>
 80009ae:	f1c2 0320 	rsb	r3, r2, #32
 80009b2:	4091      	lsls	r1, r2
 80009b4:	fa20 f303 	lsr.w	r3, r0, r3
 80009b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009bc:	4319      	orrs	r1, r3
 80009be:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c6:	fa1f f68c 	uxth.w	r6, ip
 80009ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d2:	fb07 1114 	mls	r1, r7, r4, r1
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb04 f106 	mul.w	r1, r4, r6
 80009de:	4299      	cmp	r1, r3
 80009e0:	d90a      	bls.n	80009f8 <__udivmoddi4+0x64>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ea:	f080 8112 	bcs.w	8000c12 <__udivmoddi4+0x27e>
 80009ee:	4299      	cmp	r1, r3
 80009f0:	f240 810f 	bls.w	8000c12 <__udivmoddi4+0x27e>
 80009f4:	3c02      	subs	r4, #2
 80009f6:	4463      	add	r3, ip
 80009f8:	1a59      	subs	r1, r3, r1
 80009fa:	fa1f f38e 	uxth.w	r3, lr
 80009fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a02:	fb07 1110 	mls	r1, r7, r0, r1
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f606 	mul.w	r6, r0, r6
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	d90a      	bls.n	8000a28 <__udivmoddi4+0x94>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a1a:	f080 80fc 	bcs.w	8000c16 <__udivmoddi4+0x282>
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	f240 80f9 	bls.w	8000c16 <__udivmoddi4+0x282>
 8000a24:	4463      	add	r3, ip
 8000a26:	3802      	subs	r0, #2
 8000a28:	1b9b      	subs	r3, r3, r6
 8000a2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a2e:	2100      	movs	r1, #0
 8000a30:	b11d      	cbz	r5, 8000a3a <__udivmoddi4+0xa6>
 8000a32:	40d3      	lsrs	r3, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	e9c5 3200 	strd	r3, r2, [r5]
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d905      	bls.n	8000a4e <__udivmoddi4+0xba>
 8000a42:	b10d      	cbz	r5, 8000a48 <__udivmoddi4+0xb4>
 8000a44:	e9c5 0100 	strd	r0, r1, [r5]
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e7f5      	b.n	8000a3a <__udivmoddi4+0xa6>
 8000a4e:	fab3 f183 	clz	r1, r3
 8000a52:	2900      	cmp	r1, #0
 8000a54:	d146      	bne.n	8000ae4 <__udivmoddi4+0x150>
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	d302      	bcc.n	8000a60 <__udivmoddi4+0xcc>
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	f0c0 80f0 	bcc.w	8000c40 <__udivmoddi4+0x2ac>
 8000a60:	1a86      	subs	r6, r0, r2
 8000a62:	eb64 0303 	sbc.w	r3, r4, r3
 8000a66:	2001      	movs	r0, #1
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d0e6      	beq.n	8000a3a <__udivmoddi4+0xa6>
 8000a6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a70:	e7e3      	b.n	8000a3a <__udivmoddi4+0xa6>
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	f040 8090 	bne.w	8000b98 <__udivmoddi4+0x204>
 8000a78:	eba1 040c 	sub.w	r4, r1, ip
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	fa1f f78c 	uxth.w	r7, ip
 8000a84:	2101      	movs	r1, #1
 8000a86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a96:	fb07 f006 	mul.w	r0, r7, r6
 8000a9a:	4298      	cmp	r0, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x11c>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x11a>
 8000aa8:	4298      	cmp	r0, r3
 8000aaa:	f200 80cd 	bhi.w	8000c48 <__udivmoddi4+0x2b4>
 8000aae:	4626      	mov	r6, r4
 8000ab0:	1a1c      	subs	r4, r3, r0
 8000ab2:	fa1f f38e 	uxth.w	r3, lr
 8000ab6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000aba:	fb08 4410 	mls	r4, r8, r0, r4
 8000abe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ac2:	fb00 f707 	mul.w	r7, r0, r7
 8000ac6:	429f      	cmp	r7, r3
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x148>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad2:	d202      	bcs.n	8000ada <__udivmoddi4+0x146>
 8000ad4:	429f      	cmp	r7, r3
 8000ad6:	f200 80b0 	bhi.w	8000c3a <__udivmoddi4+0x2a6>
 8000ada:	4620      	mov	r0, r4
 8000adc:	1bdb      	subs	r3, r3, r7
 8000ade:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ae2:	e7a5      	b.n	8000a30 <__udivmoddi4+0x9c>
 8000ae4:	f1c1 0620 	rsb	r6, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 f706 	lsr.w	r7, r2, r6
 8000aee:	431f      	orrs	r7, r3
 8000af0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000af4:	fa04 f301 	lsl.w	r3, r4, r1
 8000af8:	ea43 030c 	orr.w	r3, r3, ip
 8000afc:	40f4      	lsrs	r4, r6
 8000afe:	fa00 f801 	lsl.w	r8, r0, r1
 8000b02:	0c38      	lsrs	r0, r7, #16
 8000b04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b08:	fbb4 fef0 	udiv	lr, r4, r0
 8000b0c:	fa1f fc87 	uxth.w	ip, r7
 8000b10:	fb00 441e 	mls	r4, r0, lr, r4
 8000b14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b18:	fb0e f90c 	mul.w	r9, lr, ip
 8000b1c:	45a1      	cmp	r9, r4
 8000b1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b22:	d90a      	bls.n	8000b3a <__udivmoddi4+0x1a6>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b2a:	f080 8084 	bcs.w	8000c36 <__udivmoddi4+0x2a2>
 8000b2e:	45a1      	cmp	r9, r4
 8000b30:	f240 8081 	bls.w	8000c36 <__udivmoddi4+0x2a2>
 8000b34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b38:	443c      	add	r4, r7
 8000b3a:	eba4 0409 	sub.w	r4, r4, r9
 8000b3e:	fa1f f983 	uxth.w	r9, r3
 8000b42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b46:	fb00 4413 	mls	r4, r0, r3, r4
 8000b4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b52:	45a4      	cmp	ip, r4
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x1d2>
 8000b56:	193c      	adds	r4, r7, r4
 8000b58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b5c:	d267      	bcs.n	8000c2e <__udivmoddi4+0x29a>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	d965      	bls.n	8000c2e <__udivmoddi4+0x29a>
 8000b62:	3b02      	subs	r3, #2
 8000b64:	443c      	add	r4, r7
 8000b66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b6e:	eba4 040c 	sub.w	r4, r4, ip
 8000b72:	429c      	cmp	r4, r3
 8000b74:	46ce      	mov	lr, r9
 8000b76:	469c      	mov	ip, r3
 8000b78:	d351      	bcc.n	8000c1e <__udivmoddi4+0x28a>
 8000b7a:	d04e      	beq.n	8000c1a <__udivmoddi4+0x286>
 8000b7c:	b155      	cbz	r5, 8000b94 <__udivmoddi4+0x200>
 8000b7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b82:	eb64 040c 	sbc.w	r4, r4, ip
 8000b86:	fa04 f606 	lsl.w	r6, r4, r6
 8000b8a:	40cb      	lsrs	r3, r1
 8000b8c:	431e      	orrs	r6, r3
 8000b8e:	40cc      	lsrs	r4, r1
 8000b90:	e9c5 6400 	strd	r6, r4, [r5]
 8000b94:	2100      	movs	r1, #0
 8000b96:	e750      	b.n	8000a3a <__udivmoddi4+0xa6>
 8000b98:	f1c2 0320 	rsb	r3, r2, #32
 8000b9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba8:	4094      	lsls	r4, r2
 8000baa:	430c      	orrs	r4, r1
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb4:	fa1f f78c 	uxth.w	r7, ip
 8000bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000bc0:	0c23      	lsrs	r3, r4, #16
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb00 f107 	mul.w	r1, r0, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x24c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bd6:	d22c      	bcs.n	8000c32 <__udivmoddi4+0x29e>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	d92a      	bls.n	8000c32 <__udivmoddi4+0x29e>
 8000bdc:	3802      	subs	r0, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb01 f307 	mul.w	r3, r1, r7
 8000bf4:	42a3      	cmp	r3, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x276>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c00:	d213      	bcs.n	8000c2a <__udivmoddi4+0x296>
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	d911      	bls.n	8000c2a <__udivmoddi4+0x296>
 8000c06:	3902      	subs	r1, #2
 8000c08:	4464      	add	r4, ip
 8000c0a:	1ae4      	subs	r4, r4, r3
 8000c0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c10:	e739      	b.n	8000a86 <__udivmoddi4+0xf2>
 8000c12:	4604      	mov	r4, r0
 8000c14:	e6f0      	b.n	80009f8 <__udivmoddi4+0x64>
 8000c16:	4608      	mov	r0, r1
 8000c18:	e706      	b.n	8000a28 <__udivmoddi4+0x94>
 8000c1a:	45c8      	cmp	r8, r9
 8000c1c:	d2ae      	bcs.n	8000b7c <__udivmoddi4+0x1e8>
 8000c1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c26:	3801      	subs	r0, #1
 8000c28:	e7a8      	b.n	8000b7c <__udivmoddi4+0x1e8>
 8000c2a:	4631      	mov	r1, r6
 8000c2c:	e7ed      	b.n	8000c0a <__udivmoddi4+0x276>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	e799      	b.n	8000b66 <__udivmoddi4+0x1d2>
 8000c32:	4630      	mov	r0, r6
 8000c34:	e7d4      	b.n	8000be0 <__udivmoddi4+0x24c>
 8000c36:	46d6      	mov	lr, sl
 8000c38:	e77f      	b.n	8000b3a <__udivmoddi4+0x1a6>
 8000c3a:	4463      	add	r3, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	e74d      	b.n	8000adc <__udivmoddi4+0x148>
 8000c40:	4606      	mov	r6, r0
 8000c42:	4623      	mov	r3, r4
 8000c44:	4608      	mov	r0, r1
 8000c46:	e70f      	b.n	8000a68 <__udivmoddi4+0xd4>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	e730      	b.n	8000ab0 <__udivmoddi4+0x11c>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_idiv0>:
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fce8 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f87e 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f000 f9c6 	bl	8000ff0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c64:	f000 f8f0 	bl	8000e48 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c68:	f000 f91c 	bl	8000ea4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000c6c:	f008 f976 	bl	8008f5c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000c70:	f000 f94e 	bl	8000f10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if( HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_1) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	4830      	ldr	r0, [pc, #192]	@ (8000d38 <main+0xe4>)
 8000c78:	f004 f872 	bl	8004d60 <HAL_TIM_OC_Start_IT>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <main+0x32>
   	{
   		Error_Handler();
 8000c82:	f000 fb11 	bl	80012a8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c86:	f008 f98f 	bl	8008fa8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(is_capture_done == 1)
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <main+0xe8>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d1f9      	bne.n	8000c86 <main+0x32>
   	  		{
   	  			if(input_captures[1] > input_captures[0])
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <main+0xec>)
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	4b2a      	ldr	r3, [pc, #168]	@ (8000d40 <main+0xec>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d907      	bls.n	8000cae <main+0x5a>
   	  			{
   	  				capture_different = input_captures[1] - input_captures[0];
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <main+0xec>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <main+0xec>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	4a26      	ldr	r2, [pc, #152]	@ (8000d44 <main+0xf0>)
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e007      	b.n	8000cbe <main+0x6a>
   	  			}
   	  			else
   	  			{
   	  				capture_different = 0xffffffff + input_captures[1] - input_captures[0];
 8000cae:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <main+0xec>)
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <main+0xec>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4a22      	ldr	r2, [pc, #136]	@ (8000d44 <main+0xf0>)
 8000cbc:	6013      	str	r3, [r2, #0]
   	  			}
   	  			tim2_cnt_freq = HAL_RCC_GetPCLK1Freq() * 2 / htim2.Init.Prescaler;
 8000cbe:	f003 ff63 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	005a      	lsls	r2, r3, #1
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <main+0xe4>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fbbc 	bl	800044c <__aeabi_ui2d>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	491b      	ldr	r1, [pc, #108]	@ (8000d48 <main+0xf4>)
 8000cda:	e9c1 2300 	strd	r2, r3, [r1]
   	  			tim2_cnt_res = 1/ tim2_cnt_freq;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <main+0xf4>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f04f 0000 	mov.w	r0, #0
 8000ce8:	4918      	ldr	r1, [pc, #96]	@ (8000d4c <main+0xf8>)
 8000cea:	f7ff fd53 	bl	8000794 <__aeabi_ddiv>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4917      	ldr	r1, [pc, #92]	@ (8000d50 <main+0xfc>)
 8000cf4:	e9c1 2300 	strd	r2, r3, [r1]
   	  			user_signal_t = tim2_cnt_res * capture_different;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <main+0xf0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fba5 	bl	800044c <__aeabi_ui2d>
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <main+0xfc>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fc1a 	bl	8000540 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4910      	ldr	r1, [pc, #64]	@ (8000d54 <main+0x100>)
 8000d12:	e9c1 2300 	strd	r2, r3, [r1]
   	  			user_signal_f = 1/user_signal_t;
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <main+0x100>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	f04f 0000 	mov.w	r0, #0
 8000d20:	490a      	ldr	r1, [pc, #40]	@ (8000d4c <main+0xf8>)
 8000d22:	f7ff fd37 	bl	8000794 <__aeabi_ddiv>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	490b      	ldr	r1, [pc, #44]	@ (8000d58 <main+0x104>)
 8000d2c:	e9c1 2300 	strd	r2, r3, [r1]
   	  			is_capture_done = 0;
 8000d30:	4b02      	ldr	r3, [pc, #8]	@ (8000d3c <main+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000d36:	e7a6      	b.n	8000c86 <main+0x32>
 8000d38:	20000148 	.word	0x20000148
 8000d3c:	200001b8 	.word	0x200001b8
 8000d40:	200001bc 	.word	0x200001bc
 8000d44:	20000190 	.word	0x20000190
 8000d48:	20000198 	.word	0x20000198
 8000d4c:	3ff00000 	.word	0x3ff00000
 8000d50:	200001a0 	.word	0x200001a0
 8000d54:	200001a8 	.word	0x200001a8
 8000d58:	200001b0 	.word	0x200001b0

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	@ 0x50
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	2230      	movs	r2, #48	@ 0x30
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f008 fcbe 	bl	80096ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <SystemClock_Config+0xe4>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	4a2d      	ldr	r2, [pc, #180]	@ (8000e40 <SystemClock_Config+0xe4>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d90:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <SystemClock_Config+0xe4>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <SystemClock_Config+0xe8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a27      	ldr	r2, [pc, #156]	@ (8000e44 <SystemClock_Config+0xe8>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <SystemClock_Config+0xe8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000db8:	2307      	movs	r3, #7
 8000dba:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ddc:	2348      	movs	r3, #72	@ 0x48
 8000dde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000de0:	2308      	movs	r3, #8
 8000de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000de4:	2303      	movs	r3, #3
 8000de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 f9f3 	bl	80041d8 <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000df8:	f000 fa56 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fc54 	bl	80046c8 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e26:	f000 fa3f 	bl	80012a8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8000e30:	2000      	movs	r0, #0
 8000e32:	f003 fd2f 	bl	8004894 <HAL_RCC_MCOConfig>
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	@ 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e4e:	4a13      	ldr	r2, [pc, #76]	@ (8000e9c <MX_I2C1_Init+0x54>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e54:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <MX_I2C1_Init+0x58>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <MX_I2C1_Init+0x50>)
 8000e86:	f003 f863 	bl	8003f50 <HAL_I2C_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e90:	f000 fa0a 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2000009c 	.word	0x2000009c
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	000186a0 	.word	0x000186a0

08000ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	@ (8000f0c <MX_SPI1_Init+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000eb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <MX_SPI1_Init+0x64>)
 8000ef6:	f003 fe5b 	bl	8004bb0 <HAL_SPI_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f00:	f000 f9d2 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200000f0 	.word	0x200000f0
 8000f0c:	40013000 	.word	0x40013000

08000f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f42:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f4e:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f62:	4822      	ldr	r0, [pc, #136]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f64:	f003 fead 	bl	8004cc2 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000f6e:	f000 f99b 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481b      	ldr	r0, [pc, #108]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f80:	f004 f9e9 	bl	8005356 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f8a:	f000 f98d 	bl	80012a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f8e:	4817      	ldr	r0, [pc, #92]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000f90:	f003 fffc 	bl	8004f8c <HAL_TIM_IC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f9a:	f000 f985 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	480f      	ldr	r0, [pc, #60]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000fae:	f004 fd57 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000fb8:	f000 f976 	bl	80012a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <MX_TIM2_Init+0xdc>)
 8000fd4:	f004 f923 	bl	800521e <HAL_TIM_IC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000fde:	f000 f963 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	@ 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000148 	.word	0x20000148

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	@ 0x30
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	4b8b      	ldr	r3, [pc, #556]	@ (8001238 <MX_GPIO_Init+0x248>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a8a      	ldr	r2, [pc, #552]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b88      	ldr	r3, [pc, #544]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b84      	ldr	r3, [pc, #528]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a83      	ldr	r2, [pc, #524]	@ (8001238 <MX_GPIO_Init+0x248>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b81      	ldr	r3, [pc, #516]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b7d      	ldr	r3, [pc, #500]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a7c      	ldr	r2, [pc, #496]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b7a      	ldr	r3, [pc, #488]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b76      	ldr	r3, [pc, #472]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a75      	ldr	r2, [pc, #468]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b73      	ldr	r3, [pc, #460]	@ (8001238 <MX_GPIO_Init+0x248>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	4b6f      	ldr	r3, [pc, #444]	@ (8001238 <MX_GPIO_Init+0x248>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a6e      	ldr	r2, [pc, #440]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b6c      	ldr	r3, [pc, #432]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b68      	ldr	r3, [pc, #416]	@ (8001238 <MX_GPIO_Init+0x248>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a67      	ldr	r2, [pc, #412]	@ (8001238 <MX_GPIO_Init+0x248>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b65      	ldr	r3, [pc, #404]	@ (8001238 <MX_GPIO_Init+0x248>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	4862      	ldr	r0, [pc, #392]	@ (800123c <MX_GPIO_Init+0x24c>)
 80010b4:	f000 fdfe 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2101      	movs	r1, #1
 80010bc:	4860      	ldr	r0, [pc, #384]	@ (8001240 <MX_GPIO_Init+0x250>)
 80010be:	f000 fdf9 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010c2:	2200      	movs	r2, #0
 80010c4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80010c8:	485e      	ldr	r0, [pc, #376]	@ (8001244 <MX_GPIO_Init+0x254>)
 80010ca:	f000 fdf3 	bl	8001cb4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010ce:	2308      	movs	r3, #8
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4855      	ldr	r0, [pc, #340]	@ (800123c <MX_GPIO_Init+0x24c>)
 80010e6:	f000 fc49 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	484f      	ldr	r0, [pc, #316]	@ (8001240 <MX_GPIO_Init+0x250>)
 8001102:	f000 fc3b 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001106:	2308      	movs	r3, #8
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001116:	2305      	movs	r3, #5
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4847      	ldr	r0, [pc, #284]	@ (8001240 <MX_GPIO_Init+0x250>)
 8001122:	f000 fc2b 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800112a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4843      	ldr	r0, [pc, #268]	@ (8001248 <MX_GPIO_Init+0x258>)
 800113c:	f000 fc1e 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001140:	2310      	movs	r3, #16
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001150:	2306      	movs	r3, #6
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	483b      	ldr	r0, [pc, #236]	@ (8001248 <MX_GPIO_Init+0x258>)
 800115c:	f000 fc0e 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001160:	2304      	movs	r3, #4
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4836      	ldr	r0, [pc, #216]	@ (800124c <MX_GPIO_Init+0x25c>)
 8001174:	f000 fc02 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118a:	2305      	movs	r3, #5
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	482d      	ldr	r0, [pc, #180]	@ (800124c <MX_GPIO_Init+0x25c>)
 8001196:	f000 fbf1 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800119a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800119e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4824      	ldr	r0, [pc, #144]	@ (8001244 <MX_GPIO_Init+0x254>)
 80011b4:	f000 fbe2 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011b8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ca:	2306      	movs	r3, #6
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	481a      	ldr	r0, [pc, #104]	@ (8001240 <MX_GPIO_Init+0x250>)
 80011d6:	f000 fbd1 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4814      	ldr	r0, [pc, #80]	@ (8001248 <MX_GPIO_Init+0x258>)
 80011f8:	f000 fbc0 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_GPIO_Init+0x254>)
 8001210:	f000 fbb4 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001218:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_GPIO_Init+0x24c>)
 800122a:	f000 fba7 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	@ 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40021000 	.word	0x40021000
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400

08001250 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	if(!is_capture_done)
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x4c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d117      	bne.n	8001290 <HAL_TIM_IC_CaptureCallback+0x40>
	{
		if(count == 1)
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			count = 2;
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 800126a:	2202      	movs	r2, #2
 800126c:	701a      	strb	r2, [r3, #0]
			input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001274:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001276:	6013      	str	r3, [r2, #0]
			count = 1;
			input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
			is_capture_done = 1;
		}
	}
}
 8001278:	e00a      	b.n	8001290 <HAL_TIM_IC_CaptureCallback+0x40>
			count = 1;
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
			input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001288:	6053      	str	r3, [r2, #4]
			is_capture_done = 1;
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x4c>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	200001b8 	.word	0x200001b8
 80012a0:	200001b9 	.word	0x200001b9
 80012a4:	200001bc 	.word	0x200001bc

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001300 <HAL_MspInit+0x4c>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_MspInit+0x4c>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_I2C_MspInit+0x84>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d12c      	bne.n	8001380 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_I2C_MspInit+0x88>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a17      	ldr	r2, [pc, #92]	@ (800138c <HAL_I2C_MspInit+0x88>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_I2C_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001342:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001348:	2312      	movs	r3, #18
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001354:	2304      	movs	r3, #4
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480c      	ldr	r0, [pc, #48]	@ (8001390 <HAL_I2C_MspInit+0x8c>)
 8001360:	f000 fb0c 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_I2C_MspInit+0x88>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <HAL_I2C_MspInit+0x88>)
 800136e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001372:	6413      	str	r3, [r2, #64]	@ 0x40
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_I2C_MspInit+0x88>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40005400 	.word	0x40005400
 800138c:	40023800 	.word	0x40023800
 8001390:	40020400 	.word	0x40020400

08001394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <HAL_SPI_MspInit+0x84>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12b      	bne.n	800140e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_SPI_MspInit+0x88>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	4a17      	ldr	r2, [pc, #92]	@ (800141c <HAL_SPI_MspInit+0x88>)
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_SPI_MspInit+0x88>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_SPI_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <HAL_SPI_MspInit+0x88>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <HAL_SPI_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013ee:	23e0      	movs	r3, #224	@ 0xe0
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fe:	2305      	movs	r3, #5
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <HAL_SPI_MspInit+0x8c>)
 800140a:	f000 fab7 	bl	800197c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	@ 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40013000 	.word	0x40013000
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001444:	d134      	bne.n	80014b0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_TIM_Base_MspInit+0x94>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <HAL_TIM_Base_MspInit+0x94>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_TIM_Base_MspInit+0x94>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_TIM_Base_MspInit+0x94>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a13      	ldr	r2, [pc, #76]	@ (80014b8 <HAL_TIM_Base_MspInit+0x94>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_TIM_Base_MspInit+0x94>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001490:	2301      	movs	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <HAL_TIM_Base_MspInit+0x98>)
 800149c:	f000 fa6e 	bl	800197c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	210f      	movs	r1, #15
 80014a4:	201c      	movs	r0, #28
 80014a6:	f000 fa32 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014aa:	201c      	movs	r0, #28
 80014ac:	f000 fa4b 	bl	8001946 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f8db 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <TIM2_IRQHandler+0x10>)
 8001526:	f003 fd8a 	bl	800503e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000148 	.word	0x20000148

08001534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <OTG_FS_IRQHandler+0x10>)
 800153a:	f000 feb5 	bl	80022a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200005a8 	.word	0x200005a8

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f008 f8d0 	bl	800971c <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20020000 	.word	0x20020000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200001c4 	.word	0x200001c4
 80015b0:	20000ad0 	.word	0x20000ad0

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001610 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015dc:	f7ff ffea 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	@ (8001618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f008 f88f 	bl	8009728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff fb23 	bl	8000c54 <main>
  bx  lr    
 800160e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800161c:	0800984c 	.word	0x0800984c
  ldr r2, =_sbss
 8001620:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001624:	20000ad0 	.word	0x20000ad0

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_Init+0x40>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_Init+0x40>)
 8001642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <HAL_Init+0x40>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f94f 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fe28 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f967 	bl	8001962 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f92f 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	200001c8 	.word	0x200001c8

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200001c8 	.word	0x200001c8

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	@ (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	@ (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	@ (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	@ 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e16b      	b.n	8001c70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 815a 	bne.w	8001c6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d005      	beq.n	80019ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d130      	bne.n	8001a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 0201 	and.w	r2, r3, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d017      	beq.n	8001a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d123      	bne.n	8001ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80b4 	beq.w	8001c6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b60      	ldr	r3, [pc, #384]	@ (8001c88 <HAL_GPIO_Init+0x30c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8001c88 <HAL_GPIO_Init+0x30c>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b12:	4b5d      	ldr	r3, [pc, #372]	@ (8001c88 <HAL_GPIO_Init+0x30c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001c8c <HAL_GPIO_Init+0x310>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a52      	ldr	r2, [pc, #328]	@ (8001c90 <HAL_GPIO_Init+0x314>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02b      	beq.n	8001ba2 <HAL_GPIO_Init+0x226>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	@ (8001c94 <HAL_GPIO_Init+0x318>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x222>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a50      	ldr	r2, [pc, #320]	@ (8001c98 <HAL_GPIO_Init+0x31c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x21e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c9c <HAL_GPIO_Init+0x320>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x21a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x216>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca4 <HAL_GPIO_Init+0x328>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x212>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x20e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8001cac <HAL_GPIO_Init+0x330>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x20a>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00e      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b86:	2308      	movs	r3, #8
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	@ (8001c8c <HAL_GPIO_Init+0x310>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a32      	ldr	r2, [pc, #200]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b30      	ldr	r3, [pc, #192]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a27      	ldr	r2, [pc, #156]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c64:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae90 	bls.w	8001998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40013c00 	.word	0x40013c00

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af02      	add	r7, sp, #8
 8001cec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e059      	b.n	8001dac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f007 f980 	bl	8009018 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d26:	d102      	bne.n	8001d2e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 ff99 	bl	8005c6a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7c1a      	ldrb	r2, [r3, #16]
 8001d40:	f88d 2000 	strb.w	r2, [sp]
 8001d44:	3304      	adds	r3, #4
 8001d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d48:	f003 ff1a 	bl	8005b80 <USB_CoreInit>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e026      	b.n	8001dac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 ff91 	bl	8005c8c <USB_SetCurrentMode>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e017      	b.n	8001dac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7c1a      	ldrb	r2, [r3, #16]
 8001d84:	f88d 2000 	strb.w	r2, [sp]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8c:	f004 f934 	bl	8005ff8 <USB_HostInit>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e004      	b.n	8001dac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b08b      	sub	sp, #44	@ 0x2c
 8001db8:	af04      	add	r7, sp, #16
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	70fb      	strb	r3, [r7, #3]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70bb      	strb	r3, [r7, #2]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001dce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001dd0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_HCD_HC_Init+0x2c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e09d      	b.n	8001f1c <HAL_HCD_HC_Init+0x168>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3319      	adds	r3, #25
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	787a      	ldrb	r2, [r7, #1]
 8001e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3315      	adds	r3, #21
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3326      	adds	r3, #38	@ 0x26
 8001e34:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001e38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	78bb      	ldrb	r3, [r7, #2]
 8001e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e42:	b2d8      	uxtb	r0, r3
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3316      	adds	r3, #22
 8001e52:	4602      	mov	r2, r0
 8001e54:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fbc8 	bl	80025f0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001e60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da0a      	bge.n	8001e7e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3317      	adds	r3, #23
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	e009      	b.n	8001e92 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3317      	adds	r3, #23
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 fa12 	bl	80062c0 <USB_GetHostSpeed>
 8001e9c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10b      	bne.n	8001ebe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001ea6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_HCD_HC_Init+0x10a>
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d104      	bne.n	8001ebe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2bbc      	cmp	r3, #188	@ 0xbc
 8001eb8:	d901      	bls.n	8001ebe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001eba:	23bc      	movs	r3, #188	@ 0xbc
 8001ebc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3318      	adds	r3, #24
 8001ece:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001ed2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	b298      	uxth	r0, r3
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3328      	adds	r3, #40	@ 0x28
 8001ee8:	4602      	mov	r2, r0
 8001eea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	787c      	ldrb	r4, [r7, #1]
 8001ef6:	78ba      	ldrb	r2, [r7, #2]
 8001ef8:	78f9      	ldrb	r1, [r7, #3]
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	4623      	mov	r3, r4
 8001f0a:	f004 fa01 	bl	8006310 <USB_HC_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}

08001f24 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_HCD_HC_Halt+0x1e>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e00f      	b.n	8001f62 <HAL_HCD_HC_Halt+0x3e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 fd93 	bl	8006a7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	70fb      	strb	r3, [r7, #3]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70bb      	strb	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3317      	adds	r3, #23
 8001f96:	78ba      	ldrb	r2, [r7, #2]
 8001f98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3326      	adds	r3, #38	@ 0x26
 8001faa:	787a      	ldrb	r2, [r7, #1]
 8001fac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fae:	7c3b      	ldrb	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d114      	bne.n	8001fde <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	332a      	adds	r3, #42	@ 0x2a
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3319      	adds	r3, #25
 8001fd8:	7f3a      	ldrb	r2, [r7, #28]
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e009      	b.n	8001ff2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	332a      	adds	r3, #42	@ 0x2a
 8001fee:	2202      	movs	r2, #2
 8001ff0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ff2:	787b      	ldrb	r3, [r7, #1]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	f200 8102 	bhi.w	80021fe <HAL_HCD_HC_SubmitRequest+0x292>
 8001ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8002000 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002011 	.word	0x08002011
 8002004:	080021e9 	.word	0x080021e9
 8002008:	080020d5 	.word	0x080020d5
 800200c:	0800215f 	.word	0x0800215f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002010:	7c3b      	ldrb	r3, [r7, #16]
 8002012:	2b01      	cmp	r3, #1
 8002014:	f040 80f5 	bne.w	8002202 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002018:	78bb      	ldrb	r3, [r7, #2]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12d      	bne.n	800207a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800201e:	8b3b      	ldrh	r3, [r7, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	333d      	adds	r3, #61	@ 0x3d
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	333d      	adds	r3, #61	@ 0x3d
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	332a      	adds	r3, #42	@ 0x2a
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002062:	e0ce      	b.n	8002202 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	332a      	adds	r3, #42	@ 0x2a
 8002074:	2202      	movs	r2, #2
 8002076:	701a      	strb	r2, [r3, #0]
      break;
 8002078:	e0c3      	b.n	8002202 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	331a      	adds	r3, #26
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 80b8 	bne.w	8002202 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	333c      	adds	r3, #60	@ 0x3c
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	332a      	adds	r3, #42	@ 0x2a
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
      break;
 80020bc:	e0a1      	b.n	8002202 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	332a      	adds	r3, #42	@ 0x2a
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]
      break;
 80020d2:	e096      	b.n	8002202 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80020d4:	78bb      	ldrb	r3, [r7, #2]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d120      	bne.n	800211c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	333d      	adds	r3, #61	@ 0x3d
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	332a      	adds	r3, #42	@ 0x2a
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002104:	e07e      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	332a      	adds	r3, #42	@ 0x2a
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
      break;
 800211a:	e073      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	333c      	adds	r3, #60	@ 0x3c
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	332a      	adds	r3, #42	@ 0x2a
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
      break;
 8002146:	e05d      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	332a      	adds	r3, #42	@ 0x2a
 8002158:	2202      	movs	r2, #2
 800215a:	701a      	strb	r2, [r3, #0]
      break;
 800215c:	e052      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800215e:	78bb      	ldrb	r3, [r7, #2]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d120      	bne.n	80021a6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	333d      	adds	r3, #61	@ 0x3d
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	332a      	adds	r3, #42	@ 0x2a
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800218e:	e039      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	332a      	adds	r3, #42	@ 0x2a
 80021a0:	2202      	movs	r2, #2
 80021a2:	701a      	strb	r2, [r3, #0]
      break;
 80021a4:	e02e      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	333c      	adds	r3, #60	@ 0x3c
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	332a      	adds	r3, #42	@ 0x2a
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
      break;
 80021d0:	e018      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	332a      	adds	r3, #42	@ 0x2a
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
      break;
 80021e6:	e00d      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	332a      	adds	r3, #42	@ 0x2a
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
      break;
 80021fc:	e002      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80021fe:	bf00      	nop
 8002200:	e000      	b.n	8002204 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002202:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	332c      	adds	r3, #44	@ 0x2c
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	8b39      	ldrh	r1, [r7, #24]
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4403      	add	r3, r0
 8002228:	3334      	adds	r3, #52	@ 0x34
 800222a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	334c      	adds	r3, #76	@ 0x4c
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3338      	adds	r3, #56	@ 0x38
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3315      	adds	r3, #21
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	334d      	adds	r3, #77	@ 0x4d
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3310      	adds	r3, #16
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	1d19      	adds	r1, r3, #4
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	799b      	ldrb	r3, [r3, #6]
 8002296:	461a      	mov	r2, r3
 8002298:	f004 f966 	bl	8006568 <USB_HC_StartXfer>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop

080022a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 fe5a 	bl	8005f78 <USB_GetMode>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f040 80fb 	bne.w	80024c2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 fe1d 	bl	8005f10 <USB_ReadInterrupts>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80f1 	beq.w	80024c0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 fe14 	bl	8005f10 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022f2:	d104      	bne.n	80022fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80022fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fe04 	bl	8005f10 <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002312:	d104      	bne.n	800231e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800231c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fdf4 	bl	8005f10 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800232e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002332:	d104      	bne.n	800233e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800233c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fde4 	bl	8005f10 <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d103      	bne.n	800235a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2202      	movs	r2, #2
 8002358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fdd6 	bl	8005f10 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800236a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800236e:	d120      	bne.n	80023b2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002378:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d113      	bne.n	80023b2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800238a:	2110      	movs	r1, #16
 800238c:	6938      	ldr	r0, [r7, #16]
 800238e:	f003 fcc9 	bl	8005d24 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002392:	6938      	ldr	r0, [r7, #16]
 8002394:	f003 fcf8 	bl	8005d88 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7a5b      	ldrb	r3, [r3, #9]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d105      	bne.n	80023ac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 feea 	bl	8006180 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f006 feb1 	bl	8009114 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fdaa 	bl	8005f10 <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c6:	d102      	bne.n	80023ce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f001 fd4d 	bl	8003e68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fd9c 	bl	8005f10 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d106      	bne.n	80023f0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f006 fe7a 	bl	80090dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2208      	movs	r2, #8
 80023ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fd8b 	bl	8005f10 <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002400:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002404:	d139      	bne.n	800247a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 fb26 	bl	8006a5c <USB_HC_ReadInterrupt>
 8002410:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e025      	b.n	8002464 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d018      	beq.n	800245e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800243e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002442:	d106      	bne.n	8002452 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f905 	bl	800265a <HCD_HC_IN_IRQHandler>
 8002450:	e005      	b.n	800245e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 ff67 	bl	800332c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	795b      	ldrb	r3, [r3, #5]
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4293      	cmp	r3, r2
 800246e:	d3d3      	bcc.n	8002418 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002478:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fd46 	bl	8005f10 <USB_ReadInterrupts>
 8002484:	4603      	mov	r3, r0
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b10      	cmp	r3, #16
 800248c:	d101      	bne.n	8002492 <HAL_HCD_IRQHandler+0x1ea>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_HCD_IRQHandler+0x1ec>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d014      	beq.n	80024c2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0210 	bic.w	r2, r2, #16
 80024a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f001 fbfe 	bl	8003caa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0210 	orr.w	r2, r2, #16
 80024bc:	619a      	str	r2, [r3, #24]
 80024be:	e000      	b.n	80024c2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80024c0:	bf00      	nop
    }
  }
}
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_HCD_Start+0x16>
 80024da:	2302      	movs	r3, #2
 80024dc:	e013      	b.n	8002506 <HAL_HCD_Start+0x3e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 feae 	bl	800624e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fba6 	bl	8005c48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_HCD_Stop+0x16>
 8002520:	2302      	movs	r3, #2
 8002522:	e00d      	b.n	8002540 <HAL_HCD_Stop+0x32>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fc01 	bl	8006d38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fe50 	bl	80061fa <USB_ResetPort>
 800255a:	4603      	mov	r3, r0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334c      	adds	r3, #76	@ 0x4c
 8002580:	781b      	ldrb	r3, [r3, #0]
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3338      	adds	r3, #56	@ 0x38
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 fe92 	bl	80062ee <USB_GetCurrentFrame>
 80025ca:	4603      	mov	r3, r0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fe6d 	bl	80062c0 <USB_GetHostSpeed>
 80025e6:	4603      	mov	r3, r0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	331a      	adds	r3, #26
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	331b      	adds	r3, #27
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3325      	adds	r3, #37	@ 0x25
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3324      	adds	r3, #36	@ 0x24
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fc5c 	bl	8005f36 <USB_ReadChInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d11a      	bne.n	80026be <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2304      	movs	r3, #4
 8002698:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	334d      	adds	r3, #77	@ 0x4d
 80026aa:	2207      	movs	r2, #7
 80026ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 f9e1 	bl	8006a7e <USB_HC_Halt>
 80026bc:	e09e      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fc35 	bl	8005f36 <USB_ReadChInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d6:	d11b      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	@ 0x4d
 80026fc:	2208      	movs	r2, #8
 80026fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f004 f9b8 	bl	8006a7e <USB_HC_Halt>
 800270e:	e075      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fc0c 	bl	8005f36 <USB_ReadChInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d11a      	bne.n	800275e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2308      	movs	r3, #8
 8002738:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	334d      	adds	r3, #77	@ 0x4d
 800274a:	2206      	movs	r2, #6
 800274c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f991 	bl	8006a7e <USB_HC_Halt>
 800275c:	e04e      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fbe5 	bl	8005f36 <USB_ReadChInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002776:	d11b      	bne.n	80027b0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002784:	461a      	mov	r2, r3
 8002786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800278a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334d      	adds	r3, #77	@ 0x4d
 800279c:	2209      	movs	r2, #9
 800279e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 f968 	bl	8006a7e <USB_HC_Halt>
 80027ae:	e025      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 fbbc 	bl	8005f36 <USB_ReadChInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c4:	2b80      	cmp	r3, #128	@ 0x80
 80027c6:	d119      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	334d      	adds	r3, #77	@ 0x4d
 80027ea:	2207      	movs	r2, #7
 80027ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 f941 	bl	8006a7e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fb96 	bl	8005f36 <USB_ReadChInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002814:	d112      	bne.n	800283c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f004 f92d 	bl	8006a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002836:	6093      	str	r3, [r2, #8]
 8002838:	f000 bd75 	b.w	8003326 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fb76 	bl	8005f36 <USB_ReadChInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	f040 8128 	bne.w	8002aa6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2320      	movs	r3, #32
 8002866:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	331b      	adds	r3, #27
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d119      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	331b      	adds	r3, #27
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	799b      	ldrb	r3, [r3, #6]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01b      	beq.n	80028f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3330      	adds	r3, #48	@ 0x30
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	1ac9      	subs	r1, r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4403      	add	r3, r0
 80028ee:	3338      	adds	r3, #56	@ 0x38
 80028f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	334d      	adds	r3, #77	@ 0x4d
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3344      	adds	r3, #68	@ 0x44
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	2301      	movs	r3, #1
 800292a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3326      	adds	r3, #38	@ 0x26
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	3326      	adds	r3, #38	@ 0x26
 8002952:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002954:	2b02      	cmp	r3, #2
 8002956:	d110      	bne.n	800297a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f004 f88c 	bl	8006a7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2310      	movs	r3, #16
 8002976:	6093      	str	r3, [r2, #8]
 8002978:	e03d      	b.n	80029f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3326      	adds	r3, #38	@ 0x26
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d00a      	beq.n	80029a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3326      	adds	r3, #38	@ 0x26
 80029a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d127      	bne.n	80029f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	0151      	lsls	r1, r2, #5
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	440a      	add	r2, r1
 80029bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80029c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	334c      	adds	r3, #76	@ 0x4c
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	334c      	adds	r3, #76	@ 0x4c
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f006 fb9d 	bl	8009130 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	799b      	ldrb	r3, [r3, #6]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d13b      	bne.n	8002a76 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3338      	adds	r3, #56	@ 0x38
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4403      	add	r3, r0
 8002a1e:	3328      	adds	r3, #40	@ 0x28
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	440b      	add	r3, r1
 8002a24:	1e59      	subs	r1, r3, #1
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4403      	add	r3, r0
 8002a34:	3328      	adds	r3, #40	@ 0x28
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8470 	beq.w	8003326 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	333c      	adds	r3, #60	@ 0x3c
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	f083 0301 	eor.w	r3, r3, #1
 8002a5e:	b2d8      	uxtb	r0, r3
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	333c      	adds	r3, #60	@ 0x3c
 8002a6e:	4602      	mov	r2, r0
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	f000 bc58 	b.w	8003326 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	333c      	adds	r3, #60	@ 0x3c
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	f083 0301 	eor.w	r3, r3, #1
 8002a8e:	b2d8      	uxtb	r0, r3
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	333c      	adds	r3, #60	@ 0x3c
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	f000 bc40 	b.w	8003326 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 fa41 	bl	8005f36 <USB_ReadChInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d131      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	2320      	movs	r3, #32
 8002ace:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	331a      	adds	r3, #26
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f040 841f 	bne.w	8003326 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	331b      	adds	r3, #27
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	334d      	adds	r3, #77	@ 0x4d
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 ffb0 	bl	8006a7e <USB_HC_Halt>
 8002b1e:	f000 bc02 	b.w	8003326 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fa03 	bl	8005f36 <USB_ReadChInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	f040 8305 	bne.w	8003146 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	334d      	adds	r3, #77	@ 0x4d
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d114      	bne.n	8002b8e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334d      	adds	r3, #77	@ 0x4d
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334c      	adds	r3, #76	@ 0x4c
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e2cc      	b.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	334d      	adds	r3, #77	@ 0x4d
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d114      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	334d      	adds	r3, #77	@ 0x4d
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	@ 0x4c
 8002bc8:	2205      	movs	r2, #5
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e2ac      	b.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	334d      	adds	r3, #77	@ 0x4d
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b07      	cmp	r3, #7
 8002be2:	d00b      	beq.n	8002bfc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	334d      	adds	r3, #77	@ 0x4d
 8002bf4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002bf6:	2b09      	cmp	r3, #9
 8002bf8:	f040 80a6 	bne.w	8002d48 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	@ 0x4d
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3344      	adds	r3, #68	@ 0x44
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4403      	add	r3, r0
 8002c30:	3344      	adds	r3, #68	@ 0x44
 8002c32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3344      	adds	r3, #68	@ 0x44
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d943      	bls.n	8002cd2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3344      	adds	r3, #68	@ 0x44
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	331a      	adds	r3, #26
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d123      	bne.n	8002cbc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	331b      	adds	r3, #27
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	331c      	adds	r3, #28
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	0151      	lsls	r1, r2, #5
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	440a      	add	r2, r1
 8002cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	334c      	adds	r3, #76	@ 0x4c
 8002ccc:	2204      	movs	r2, #4
 8002cce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cd0:	e229      	b.n	8003126 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	334c      	adds	r3, #76	@ 0x4c
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3326      	adds	r3, #38	@ 0x26
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3326      	adds	r3, #38	@ 0x26
 8002d0c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	f040 8209 	bne.w	8003126 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d2a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d32:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d46:	e1ee      	b.n	8003126 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	334d      	adds	r3, #77	@ 0x4d
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	f040 80c8 	bne.w	8002ef0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	334d      	adds	r3, #77	@ 0x4d
 8002d70:	2202      	movs	r2, #2
 8002d72:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	331b      	adds	r3, #27
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f040 81ce 	bne.w	8003128 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3326      	adds	r3, #38	@ 0x26
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d16b      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3348      	adds	r3, #72	@ 0x48
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1c59      	adds	r1, r3, #1
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4403      	add	r3, r0
 8002dc2:	3348      	adds	r3, #72	@ 0x48
 8002dc4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3348      	adds	r3, #72	@ 0x48
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d943      	bls.n	8002e64 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3348      	adds	r3, #72	@ 0x48
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	331b      	adds	r3, #27
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3344      	adds	r3, #68	@ 0x44
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d809      	bhi.n	8002e2e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	331c      	adds	r3, #28
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	0151      	lsls	r1, r2, #5
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	440a      	add	r2, r1
 8002e44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	334c      	adds	r3, #76	@ 0x4c
 8002e5e:	2204      	movs	r2, #4
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e014      	b.n	8002e8e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	334c      	adds	r3, #76	@ 0x4c
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e009      	b.n	8002e8e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334c      	adds	r3, #76	@ 0x4c
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3326      	adds	r3, #38	@ 0x26
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3326      	adds	r3, #38	@ 0x26
 8002eb4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	f040 8136 	bne.w	8003128 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ed2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e11b      	b.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	334d      	adds	r3, #77	@ 0x4d
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	f040 8081 	bne.w	800300a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334d      	adds	r3, #77	@ 0x4d
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	331b      	adds	r3, #27
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	f040 80fa 	bne.w	8003128 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	334c      	adds	r3, #76	@ 0x4c
 8002f44:	2202      	movs	r2, #2
 8002f46:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	0151      	lsls	r1, r2, #5
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	440a      	add	r2, r1
 8002f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f66:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	0151      	lsls	r1, r2, #5
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	440a      	add	r2, r1
 8002f7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f86:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	0151      	lsls	r1, r2, #5
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	440a      	add	r2, r1
 8002f9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fa2:	f023 0320 	bic.w	r3, r3, #32
 8002fa6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3326      	adds	r3, #38	@ 0x26
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3326      	adds	r3, #38	@ 0x26
 8002fce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f040 80a9 	bne.w	8003128 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ff4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e08e      	b.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334d      	adds	r3, #77	@ 0x4d
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d143      	bne.n	80030a8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334d      	adds	r3, #77	@ 0x4d
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334c      	adds	r3, #76	@ 0x4c
 8003044:	2202      	movs	r2, #2
 8003046:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3326      	adds	r3, #38	@ 0x26
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3326      	adds	r3, #38	@ 0x26
 800306e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003070:	2b02      	cmp	r3, #2
 8003072:	d159      	bne.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800308a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003092:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e03f      	b.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	334d      	adds	r3, #77	@ 0x4d
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d126      	bne.n	800310c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	334d      	adds	r3, #77	@ 0x4d
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3344      	adds	r3, #68	@ 0x44
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c59      	adds	r1, r3, #1
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4403      	add	r3, r0
 80030f2:	3344      	adds	r3, #68	@ 0x44
 80030f4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	334c      	adds	r3, #76	@ 0x4c
 8003106:	2204      	movs	r2, #4
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e00d      	b.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	334d      	adds	r3, #77	@ 0x4d
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b02      	cmp	r3, #2
 8003120:	f000 8100 	beq.w	8003324 <HCD_HC_IN_IRQHandler+0xcca>
 8003124:	e000      	b.n	8003128 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003126:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334c      	adds	r3, #76	@ 0x4c
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	4619      	mov	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f005 fff6 	bl	8009130 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003144:	e0ef      	b.n	8003326 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fef1 	bl	8005f36 <USB_ReadChInterrupts>
 8003154:	4603      	mov	r3, r0
 8003156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315a:	2b40      	cmp	r3, #64	@ 0x40
 800315c:	d12f      	bne.n	80031be <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2340      	movs	r3, #64	@ 0x40
 800316e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334d      	adds	r3, #77	@ 0x4d
 8003180:	2205      	movs	r2, #5
 8003182:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	331a      	adds	r3, #26
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3344      	adds	r3, #68	@ 0x44
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fc61 	bl	8006a7e <USB_HC_Halt>
 80031bc:	e0b3      	b.n	8003326 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f002 feb5 	bl	8005f36 <USB_ReadChInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	f040 80a7 	bne.w	8003326 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3326      	adds	r3, #38	@ 0x26
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d11b      	bne.n	8003226 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3344      	adds	r3, #68	@ 0x44
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	2204      	movs	r2, #4
 8003214:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f003 fc2d 	bl	8006a7e <USB_HC_Halt>
 8003224:	e03f      	b.n	80032a6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	3326      	adds	r3, #38	@ 0x26
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3326      	adds	r3, #38	@ 0x26
 800324c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800324e:	2b02      	cmp	r3, #2
 8003250:	d129      	bne.n	80032a6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3344      	adds	r3, #68	@ 0x44
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HCD_HC_IN_IRQHandler+0xc2a>
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	331b      	adds	r3, #27
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d110      	bne.n	80032a6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	2204      	movs	r2, #4
 8003296:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 fbec 	bl	8006a7e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	331b      	adds	r3, #27
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d129      	bne.n	8003310 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	331b      	adds	r3, #27
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	0151      	lsls	r1, r2, #5
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	440a      	add	r2, r1
 8003306:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800330a:	f043 0320 	orr.w	r3, r3, #32
 800330e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331c:	461a      	mov	r2, r3
 800331e:	2310      	movs	r3, #16
 8003320:	6093      	str	r3, [r2, #8]
 8003322:	e000      	b.n	8003326 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003324:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f002 fdf3 	bl	8005f36 <USB_ReadChInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d11b      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003366:	461a      	mov	r2, r3
 8003368:	2304      	movs	r3, #4
 800336a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334d      	adds	r3, #77	@ 0x4d
 800337c:	2207      	movs	r2, #7
 800337e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fb78 	bl	8006a7e <USB_HC_Halt>
 800338e:	f000 bc89 	b.w	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fdcb 	bl	8005f36 <USB_ReadChInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 8082 	bne.w	80034b0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2320      	movs	r3, #32
 80033bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3319      	adds	r3, #25
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d124      	bne.n	800341e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3319      	adds	r3, #25
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334c      	adds	r3, #76	@ 0x4c
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	@ 0x4d
 800340c:	2203      	movs	r2, #3
 800340e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fb30 	bl	8006a7e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	331a      	adds	r3, #26
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	f040 8437 	bne.w	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	331b      	adds	r3, #27
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 842b 	bne.w	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3326      	adds	r3, #38	@ 0x26
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d009      	beq.n	8003478 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	331b      	adds	r3, #27
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	334d      	adds	r3, #77	@ 0x4d
 8003488:	2203      	movs	r2, #3
 800348a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f003 faf2 	bl	8006a7e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3344      	adds	r3, #68	@ 0x44
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e3f9      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f002 fd3c 	bl	8005f36 <USB_ReadChInterrupts>
 80034be:	4603      	mov	r3, r0
 80034c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c8:	d111      	bne.n	80034ee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d6:	461a      	mov	r2, r3
 80034d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fac9 	bl	8006a7e <USB_HC_Halt>
 80034ec:	e3da      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fd1d 	bl	8005f36 <USB_ReadChInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d168      	bne.n	80035d8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	3344      	adds	r3, #68	@ 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f002 fd07 	bl	8005f36 <USB_ReadChInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b40      	cmp	r3, #64	@ 0x40
 8003530:	d112      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3319      	adds	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	2340      	movs	r3, #64	@ 0x40
 8003556:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	331b      	adds	r3, #27
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d019      	beq.n	80035a2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	331b      	adds	r3, #27
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800359c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	2301      	movs	r3, #1
 80035b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	334d      	adds	r3, #77	@ 0x4d
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f003 fa54 	bl	8006a7e <USB_HC_Halt>
 80035d6:	e365      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fca8 	bl	8005f36 <USB_ReadChInterrupts>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b40      	cmp	r3, #64	@ 0x40
 80035ee:	d139      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	334d      	adds	r3, #77	@ 0x4d
 8003600:	2205      	movs	r2, #5
 8003602:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	331a      	adds	r3, #26
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3319      	adds	r3, #25
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3344      	adds	r3, #68	@ 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f003 fa17 	bl	8006a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	2340      	movs	r3, #64	@ 0x40
 8003660:	6093      	str	r3, [r2, #8]
 8003662:	e31f      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f002 fc62 	bl	8005f36 <USB_ReadChInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d11a      	bne.n	80036b2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2308      	movs	r3, #8
 800368c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	334d      	adds	r3, #77	@ 0x4d
 800369e:	2206      	movs	r2, #6
 80036a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 f9e7 	bl	8006a7e <USB_HC_Halt>
 80036b0:	e2f8      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 fc3b 	bl	8005f36 <USB_ReadChInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d144      	bne.n	8003754 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3344      	adds	r3, #68	@ 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334d      	adds	r3, #77	@ 0x4d
 80036ee:	2204      	movs	r2, #4
 80036f0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3319      	adds	r3, #25
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d114      	bne.n	8003732 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3318      	adds	r3, #24
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3319      	adds	r3, #25
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f003 f99f 	bl	8006a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374c:	461a      	mov	r2, r3
 800374e:	2310      	movs	r3, #16
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	e2a7      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f002 fbea 	bl	8005f36 <USB_ReadChInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003768:	2b80      	cmp	r3, #128	@ 0x80
 800376a:	f040 8083 	bne.w	8003874 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	799b      	ldrb	r3, [r3, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d111      	bne.n	800379a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	334d      	adds	r3, #77	@ 0x4d
 8003786:	2207      	movs	r2, #7
 8003788:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f973 	bl	8006a7e <USB_HC_Halt>
 8003798:	e062      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3344      	adds	r3, #68	@ 0x44
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4403      	add	r3, r0
 80037ba:	3344      	adds	r3, #68	@ 0x44
 80037bc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3344      	adds	r3, #68	@ 0x44
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d922      	bls.n	800381a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	3344      	adds	r3, #68	@ 0x44
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	334c      	adds	r3, #76	@ 0x4c
 80037f8:	2204      	movs	r2, #4
 80037fa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	334c      	adds	r3, #76	@ 0x4c
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f005 fc8c 	bl	8009130 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003818:	e022      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	334c      	adds	r3, #76	@ 0x4c
 800382a:	2202      	movs	r2, #2
 800382c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003844:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800384c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386c:	461a      	mov	r2, r3
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	6093      	str	r3, [r2, #8]
 8003872:	e217      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f002 fb5a 	bl	8005f36 <USB_ReadChInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388c:	d11b      	bne.n	80038c6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	334d      	adds	r3, #77	@ 0x4d
 800389e:	2209      	movs	r2, #9
 80038a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 f8e7 	bl	8006a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038bc:	461a      	mov	r2, r3
 80038be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038c2:	6093      	str	r3, [r2, #8]
 80038c4:	e1ee      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 fb31 	bl	8005f36 <USB_ReadChInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	f040 81df 	bne.w	8003c9e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ec:	461a      	mov	r2, r3
 80038ee:	2302      	movs	r3, #2
 80038f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	334d      	adds	r3, #77	@ 0x4d
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 8093 	bne.w	8003a30 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334d      	adds	r3, #77	@ 0x4d
 800391a:	2202      	movs	r2, #2
 800391c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	334c      	adds	r3, #76	@ 0x4c
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3326      	adds	r3, #38	@ 0x26
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d00b      	beq.n	8003960 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3326      	adds	r3, #38	@ 0x26
 8003958:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800395a:	2b03      	cmp	r3, #3
 800395c:	f040 8190 	bne.w	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	799b      	ldrb	r3, [r3, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	333d      	adds	r3, #61	@ 0x3d
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	f083 0301 	eor.w	r3, r3, #1
 8003980:	b2d8      	uxtb	r0, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	333d      	adds	r3, #61	@ 0x3d
 8003990:	4602      	mov	r2, r0
 8003992:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	799b      	ldrb	r3, [r3, #6]
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 8171 	bne.w	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3334      	adds	r3, #52	@ 0x34
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8165 	beq.w	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3334      	adds	r3, #52	@ 0x34
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4403      	add	r3, r0
 80039d6:	3328      	adds	r3, #40	@ 0x28
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	440b      	add	r3, r1
 80039dc:	1e59      	subs	r1, r3, #1
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4403      	add	r3, r0
 80039ec:	3328      	adds	r3, #40	@ 0x28
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 813f 	beq.w	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	333d      	adds	r3, #61	@ 0x3d
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	f083 0301 	eor.w	r3, r3, #1
 8003a1a:	b2d8      	uxtb	r0, r3
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	333d      	adds	r3, #61	@ 0x3d
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e127      	b.n	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334d      	adds	r3, #77	@ 0x4d
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d120      	bne.n	8003a88 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	334d      	adds	r3, #77	@ 0x4d
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	331b      	adds	r3, #27
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f040 8107 	bne.w	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	334c      	adds	r3, #76	@ 0x4c
 8003a82:	2202      	movs	r2, #2
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e0fb      	b.n	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	334d      	adds	r3, #77	@ 0x4d
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d13a      	bne.n	8003b14 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	334d      	adds	r3, #77	@ 0x4d
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	334c      	adds	r3, #76	@ 0x4c
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	331b      	adds	r3, #27
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	f040 80d1 	bne.w	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	331b      	adds	r3, #27
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b10:	6053      	str	r3, [r2, #4]
 8003b12:	e0b5      	b.n	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	334d      	adds	r3, #77	@ 0x4d
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d114      	bne.n	8003b54 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	334d      	adds	r3, #77	@ 0x4d
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	334c      	adds	r3, #76	@ 0x4c
 8003b4e:	2202      	movs	r2, #2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e095      	b.n	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	334d      	adds	r3, #77	@ 0x4d
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d114      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	334d      	adds	r3, #77	@ 0x4d
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	334c      	adds	r3, #76	@ 0x4c
 8003b8e:	2205      	movs	r2, #5
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e075      	b.n	8003c80 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	334d      	adds	r3, #77	@ 0x4d
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b07      	cmp	r3, #7
 8003ba8:	d00a      	beq.n	8003bc0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	334d      	adds	r3, #77	@ 0x4d
 8003bba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d170      	bne.n	8003ca2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334d      	adds	r3, #77	@ 0x4d
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3344      	adds	r3, #68	@ 0x44
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1c59      	adds	r1, r3, #1
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4403      	add	r3, r0
 8003bf4:	3344      	adds	r3, #68	@ 0x44
 8003bf6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	3344      	adds	r3, #68	@ 0x44
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d914      	bls.n	8003c38 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3344      	adds	r3, #68	@ 0x44
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	334c      	adds	r3, #76	@ 0x4c
 8003c32:	2204      	movs	r2, #4
 8003c34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c36:	e022      	b.n	8003c7e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	334c      	adds	r3, #76	@ 0x4c
 8003c48:	2202      	movs	r2, #2
 8003c4a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c62:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c6a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c7e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	334c      	adds	r3, #76	@ 0x4c
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f005 fa4a 	bl	8009130 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c9c:	e002      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003ca2:	bf00      	nop
  }
}
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	@ 0x28
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	0c5b      	lsrs	r3, r3, #17
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cde:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d004      	beq.n	8003cf0 <HCD_RXQLVL_IRQHandler+0x46>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	f000 80b6 	beq.w	8003e5a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003cee:	e0b7      	b.n	8003e60 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80b3 	beq.w	8003e5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	332c      	adds	r3, #44	@ 0x2c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80a7 	beq.w	8003e5e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3338      	adds	r3, #56	@ 0x38
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	18d1      	adds	r1, r2, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4403      	add	r3, r0
 8003d34:	3334      	adds	r3, #52	@ 0x34
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4299      	cmp	r1, r3
 8003d3a:	f200 8083 	bhi.w	8003e44 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	332c      	adds	r3, #44	@ 0x2c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	b292      	uxth	r2, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f002 f881 	bl	8005e60 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	332c      	adds	r3, #44	@ 0x2c
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	18d1      	adds	r1, r2, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4403      	add	r3, r0
 8003d82:	332c      	adds	r3, #44	@ 0x2c
 8003d84:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3338      	adds	r3, #56	@ 0x38
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	18d1      	adds	r1, r2, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4403      	add	r3, r0
 8003daa:	3338      	adds	r3, #56	@ 0x38
 8003dac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	0cdb      	lsrs	r3, r3, #19
 8003dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3328      	adds	r3, #40	@ 0x28
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d13f      	bne.n	8003e5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d03c      	beq.n	8003e5e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e02:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	333c      	adds	r3, #60	@ 0x3c
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f083 0301 	eor.w	r3, r3, #1
 8003e2c:	b2d8      	uxtb	r0, r3
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	333c      	adds	r3, #60	@ 0x3c
 8003e3e:	4602      	mov	r2, r0
 8003e40:	701a      	strb	r2, [r3, #0]
      break;
 8003e42:	e00c      	b.n	8003e5e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334c      	adds	r3, #76	@ 0x4c
 8003e54:	2204      	movs	r2, #4
 8003e56:	701a      	strb	r2, [r3, #0]
      break;
 8003e58:	e001      	b.n	8003e5e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003e5e:	bf00      	nop
  }
}
 8003e60:	bf00      	nop
 8003e62:	3728      	adds	r7, #40	@ 0x28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003e94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d10b      	bne.n	8003eb8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f005 f924 	bl	80090f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d132      	bne.n	8003f28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d126      	bne.n	8003f22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7a5b      	ldrb	r3, [r3, #9]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d113      	bne.n	8003f04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003ee2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ee6:	d106      	bne.n	8003ef6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 f946 	bl	8006180 <USB_InitFSLSPClkSel>
 8003ef4:	e011      	b.n	8003f1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f002 f93f 	bl	8006180 <USB_InitFSLSPClkSel>
 8003f02:	e00a      	b.n	8003f1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	79db      	ldrb	r3, [r3, #7]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f12:	461a      	mov	r2, r3
 8003f14:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f005 f916 	bl	800914c <HAL_HCD_PortEnabled_Callback>
 8003f20:	e002      	b.n	8003f28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f005 f920 	bl	8009168 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d103      	bne.n	8003f3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f043 0320 	orr.w	r3, r3, #32
 8003f38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6013      	str	r3, [r2, #0]
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e12b      	b.n	80041ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd f9c4 	bl	8001304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	@ 0x24
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f000 fde8 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a81      	ldr	r2, [pc, #516]	@ (80041c4 <HAL_I2C_Init+0x274>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d807      	bhi.n	8003fd4 <HAL_I2C_Init+0x84>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a80      	ldr	r2, [pc, #512]	@ (80041c8 <HAL_I2C_Init+0x278>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	bf94      	ite	ls
 8003fcc:	2301      	movls	r3, #1
 8003fce:	2300      	movhi	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e006      	b.n	8003fe2 <HAL_I2C_Init+0x92>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a7d      	ldr	r2, [pc, #500]	@ (80041cc <HAL_I2C_Init+0x27c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0e7      	b.n	80041ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a78      	ldr	r2, [pc, #480]	@ (80041d0 <HAL_I2C_Init+0x280>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0c9b      	lsrs	r3, r3, #18
 8003ff4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4a6a      	ldr	r2, [pc, #424]	@ (80041c4 <HAL_I2C_Init+0x274>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d802      	bhi.n	8004024 <HAL_I2C_Init+0xd4>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3301      	adds	r3, #1
 8004022:	e009      	b.n	8004038 <HAL_I2C_Init+0xe8>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	4a69      	ldr	r2, [pc, #420]	@ (80041d4 <HAL_I2C_Init+0x284>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	3301      	adds	r3, #1
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800404a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	495c      	ldr	r1, [pc, #368]	@ (80041c4 <HAL_I2C_Init+0x274>)
 8004054:	428b      	cmp	r3, r1
 8004056:	d819      	bhi.n	800408c <HAL_I2C_Init+0x13c>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1e59      	subs	r1, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fbb1 f3f3 	udiv	r3, r1, r3
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800406c:	400b      	ands	r3, r1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_I2C_Init+0x138>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1e59      	subs	r1, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004080:	3301      	adds	r3, #1
 8004082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004086:	e051      	b.n	800412c <HAL_I2C_Init+0x1dc>
 8004088:	2304      	movs	r3, #4
 800408a:	e04f      	b.n	800412c <HAL_I2C_Init+0x1dc>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d111      	bne.n	80040b8 <HAL_I2C_Init+0x168>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	440b      	add	r3, r1
 80040a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e012      	b.n	80040de <HAL_I2C_Init+0x18e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	0099      	lsls	r1, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Init+0x196>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e022      	b.n	800412c <HAL_I2C_Init+0x1dc>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <HAL_I2C_Init+0x1bc>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e58      	subs	r0, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	440b      	add	r3, r1
 80040fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410a:	e00f      	b.n	800412c <HAL_I2C_Init+0x1dc>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1e58      	subs	r0, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	0099      	lsls	r1, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	6809      	ldr	r1, [r1, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800415a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6911      	ldr	r1, [r2, #16]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	000186a0 	.word	0x000186a0
 80041c8:	001e847f 	.word	0x001e847f
 80041cc:	003d08ff 	.word	0x003d08ff
 80041d0:	431bde83 	.word	0x431bde83
 80041d4:	10624dd3 	.word	0x10624dd3

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e267      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041f6:	4b88      	ldr	r3, [pc, #544]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b85      	ldr	r3, [pc, #532]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b82      	ldr	r3, [pc, #520]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b7e      	ldr	r3, [pc, #504]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e242      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b76      	ldr	r3, [pc, #472]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a75      	ldr	r2, [pc, #468]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b70      	ldr	r3, [pc, #448]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6f      	ldr	r2, [pc, #444]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b6d      	ldr	r3, [pc, #436]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6c      	ldr	r2, [pc, #432]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b69      	ldr	r3, [pc, #420]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a68      	ldr	r2, [pc, #416]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b66      	ldr	r3, [pc, #408]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fd fa32 	bl	80016f8 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004298:	f7fd fa2e 	bl	80016f8 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	@ 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e207      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fd fa1e 	bl	80016f8 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fd fa1a 	bl	80016f8 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1f3      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b51      	ldr	r3, [pc, #324]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b47      	ldr	r3, [pc, #284]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b44      	ldr	r3, [pc, #272]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b41      	ldr	r3, [pc, #260]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1c7      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b3b      	ldr	r3, [pc, #236]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4937      	ldr	r1, [pc, #220]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b34      	ldr	r3, [pc, #208]	@ (800441c <HAL_RCC_OscConfig+0x244>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd f9d3 	bl	80016f8 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd f9cf 	bl	80016f8 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1a8      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b2b      	ldr	r3, [pc, #172]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b28      	ldr	r3, [pc, #160]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4925      	ldr	r1, [pc, #148]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCC_OscConfig+0x244>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd f9b2 	bl	80016f8 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004398:	f7fd f9ae 	bl	80016f8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e187      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d036      	beq.n	8004430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <HAL_RCC_OscConfig+0x248>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fd f992 	bl	80016f8 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fd f98e 	bl	80016f8 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e167      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e01b      	b.n	8004430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_RCC_OscConfig+0x248>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fd f97b 	bl	80016f8 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e00e      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004406:	f7fd f977 	bl	80016f8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d907      	bls.n	8004424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e150      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004418:	40023800 	.word	0x40023800
 800441c:	42470000 	.word	0x42470000
 8004420:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004424:	4b88      	ldr	r3, [pc, #544]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ea      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8097 	beq.w	800456c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b81      	ldr	r3, [pc, #516]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	4b7d      	ldr	r3, [pc, #500]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	4a7c      	ldr	r2, [pc, #496]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	@ 0x40
 800445e:	4b7a      	ldr	r3, [pc, #488]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b77      	ldr	r3, [pc, #476]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d118      	bne.n	80044ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447a:	4b74      	ldr	r3, [pc, #464]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a73      	ldr	r2, [pc, #460]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7fd f937 	bl	80016f8 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fd f933 	bl	80016f8 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e10c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	4b6a      	ldr	r3, [pc, #424]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2ea>
 80044b4:	4b64      	ldr	r3, [pc, #400]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b8:	4a63      	ldr	r2, [pc, #396]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c0:	e01c      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x30c>
 80044ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a5b      	ldr	r2, [pc, #364]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044e4:	4b58      	ldr	r3, [pc, #352]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a57      	ldr	r2, [pc, #348]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	4b55      	ldr	r3, [pc, #340]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f4:	4a54      	ldr	r2, [pc, #336]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 0304 	bic.w	r3, r3, #4
 80044fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fd f8f8 	bl	80016f8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fd f8f4 	bl	80016f8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0cb      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ee      	beq.n	800450c <HAL_RCC_OscConfig+0x334>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004530:	f7fd f8e2 	bl	80016f8 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	e00a      	b.n	800454e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fd f8de 	bl	80016f8 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0b5      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454e:	4b3e      	ldr	r3, [pc, #248]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1ee      	bne.n	8004538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004560:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	4a38      	ldr	r2, [pc, #224]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a1 	beq.w	80046b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004576:	4b34      	ldr	r3, [pc, #208]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d05c      	beq.n	800463c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d141      	bne.n	800460e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b31      	ldr	r3, [pc, #196]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fd f8b2 	bl	80016f8 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fd f8ae 	bl	80016f8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e087      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	3b01      	subs	r3, #1
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	491b      	ldr	r1, [pc, #108]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fd f887 	bl	80016f8 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd f883 	bl	80016f8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e05c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x416>
 800460c:	e054      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fd f870 	bl	80016f8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd f86c 	bl	80016f8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e045      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x444>
 800463a:	e03d      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e038      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004648:	40023800 	.word	0x40023800
 800464c:	40007000 	.word	0x40007000
 8004650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004654:	4b1b      	ldr	r3, [pc, #108]	@ (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d028      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d121      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d11a      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800468a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	3b01      	subs	r3, #1
 800469e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cc      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b68      	ldr	r3, [pc, #416]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90c      	bls.n	8004704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b65      	ldr	r3, [pc, #404]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d044      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b3f      	ldr	r3, [pc, #252]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	4b3b      	ldr	r3, [pc, #236]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e067      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b37      	ldr	r3, [pc, #220]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4934      	ldr	r1, [pc, #208]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b8:	f7fc ff9e 	bl	80016f8 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7fc ff9a 	bl	80016f8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047e8:	4b25      	ldr	r3, [pc, #148]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20c      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f889 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	@ (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	@ (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fefe 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	08009824 	.word	0x08009824
 800488c:	20000000 	.word	0x20000000
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	@ 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d129      	bne.n	80048fa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048b6:	4b28      	ldr	r3, [pc, #160]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80048c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048cc:	2303      	movs	r3, #3
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80048d8:	f107 031c 	add.w	r3, r7, #28
 80048dc:	4619      	mov	r1, r3
 80048de:	481f      	ldr	r0, [pc, #124]	@ (800495c <HAL_RCC_MCOConfig+0xc8>)
 80048e0:	f7fd f84c 	bl	800197c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80048e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	4919      	ldr	r1, [pc, #100]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80048f8:	e029      	b.n	800494e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	4b16      	ldr	r3, [pc, #88]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	4a15      	ldr	r2, [pc, #84]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	6313      	str	r3, [r2, #48]	@ 0x30
 800490a:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800491a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491c:	2302      	movs	r3, #2
 800491e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004920:	2303      	movs	r3, #3
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800492c:	f107 031c 	add.w	r3, r7, #28
 8004930:	4619      	mov	r1, r3
 8004932:	480b      	ldr	r0, [pc, #44]	@ (8004960 <HAL_RCC_MCOConfig+0xcc>)
 8004934:	f7fd f822 	bl	800197c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004938:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	00d9      	lsls	r1, r3, #3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	430b      	orrs	r3, r1
 8004948:	4903      	ldr	r1, [pc, #12]	@ (8004958 <HAL_RCC_MCOConfig+0xc4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
}
 800494e:	bf00      	nop
 8004950:	3730      	adds	r7, #48	@ 0x30
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	40020000 	.word	0x40020000
 8004960:	40020800 	.word	0x40020800

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b094      	sub	sp, #80	@ 0x50
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b79      	ldr	r3, [pc, #484]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80e1 	bhi.w	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e0db      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b73      	ldr	r3, [pc, #460]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800499a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800499c:	e0db      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b73      	ldr	r3, [pc, #460]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80049a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a2:	e0d8      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d063      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049d6:	4622      	mov	r2, r4
 80049d8:	462b      	mov	r3, r5
 80049da:	f04f 0000 	mov.w	r0, #0
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	0159      	lsls	r1, r3, #5
 80049e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e8:	0150      	lsls	r0, r2, #5
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4621      	mov	r1, r4
 80049f0:	1a51      	subs	r1, r2, r1
 80049f2:	6139      	str	r1, [r7, #16]
 80049f4:	4629      	mov	r1, r5
 80049f6:	eb63 0301 	sbc.w	r3, r3, r1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	018b      	lsls	r3, r1, #6
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a12:	4651      	mov	r1, sl
 8004a14:	018a      	lsls	r2, r1, #6
 8004a16:	4651      	mov	r1, sl
 8004a18:	ebb2 0801 	subs.w	r8, r2, r1
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a36:	4690      	mov	r8, r2
 8004a38:	4699      	mov	r9, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	eb18 0303 	adds.w	r3, r8, r3
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	462b      	mov	r3, r5
 8004a44:	eb49 0303 	adc.w	r3, r9, r3
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a56:	4629      	mov	r1, r5
 8004a58:	024b      	lsls	r3, r1, #9
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a60:	4621      	mov	r1, r4
 8004a62:	024a      	lsls	r2, r1, #9
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a74:	f7fb ff76 	bl	8000964 <__aeabi_uldivmod>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a80:	e058      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	f04f 0000 	mov.w	r0, #0
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	0159      	lsls	r1, r3, #5
 8004aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aae:	0150      	lsls	r0, r2, #5
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	00eb      	lsls	r3, r5, #3
 8004ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aea:	00e2      	lsls	r2, r4, #3
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	464b      	mov	r3, r9
 8004af8:	eb45 0303 	adc.w	r3, r5, r3
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	028b      	lsls	r3, r1, #10
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b14:	4621      	mov	r1, r4
 8004b16:	028a      	lsls	r2, r1, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	61fa      	str	r2, [r7, #28]
 8004b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b28:	f7fb ff1c 	bl	8000964 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3750      	adds	r7, #80	@ 0x50
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00f42400 	.word	0x00f42400
 8004b6c:	007a1200 	.word	0x007a1200

08004b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b74:	4b03      	ldr	r3, [pc, #12]	@ (8004b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000000 	.word	0x20000000

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	@ (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	08009834 	.word	0x08009834

08004bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07b      	b.n	8004cba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d108      	bne.n	8004bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd2:	d009      	beq.n	8004be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61da      	str	r2, [r3, #28]
 8004bda:	e005      	b.n	8004be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc fbc6 	bl	8001394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6c:	ea42 0103 	orr.w	r1, r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 0104 	and.w	r1, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	f003 0210 	and.w	r2, r3, #16
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e041      	b.n	8004d58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fc fb9b 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 fc17 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_OC_Start_IT+0x28>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e022      	b.n	8004dce <HAL_TIM_OC_Start_IT+0x6e>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d109      	bne.n	8004da2 <HAL_TIM_OC_Start_IT+0x42>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e015      	b.n	8004dce <HAL_TIM_OC_Start_IT+0x6e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d109      	bne.n	8004dbc <HAL_TIM_OC_Start_IT+0x5c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e008      	b.n	8004dce <HAL_TIM_OC_Start_IT+0x6e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0c7      	b.n	8004f66 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_OC_Start_IT+0x86>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	e013      	b.n	8004e0e <HAL_TIM_OC_Start_IT+0xae>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_OC_Start_IT+0x96>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df4:	e00b      	b.n	8004e0e <HAL_TIM_OC_Start_IT+0xae>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_OC_Start_IT+0xa6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e04:	e003      	b.n	8004e0e <HAL_TIM_OC_Start_IT+0xae>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	d841      	bhi.n	8004e98 <HAL_TIM_OC_Start_IT+0x138>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <HAL_TIM_OC_Start_IT+0xbc>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004e99 	.word	0x08004e99
 8004e24:	08004e99 	.word	0x08004e99
 8004e28:	08004e99 	.word	0x08004e99
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e99 	.word	0x08004e99
 8004e34:	08004e99 	.word	0x08004e99
 8004e38:	08004e99 	.word	0x08004e99
 8004e3c:	08004e75 	.word	0x08004e75
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004e99 	.word	0x08004e99
 8004e4c:	08004e87 	.word	0x08004e87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0202 	orr.w	r2, r2, #2
 8004e5e:	60da      	str	r2, [r3, #12]
      break;
 8004e60:	e01d      	b.n	8004e9e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0204 	orr.w	r2, r2, #4
 8004e70:	60da      	str	r2, [r3, #12]
      break;
 8004e72:	e014      	b.n	8004e9e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	60da      	str	r2, [r3, #12]
      break;
 8004e84:	e00b      	b.n	8004e9e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0210 	orr.w	r2, r2, #16
 8004e94:	60da      	str	r2, [r3, #12]
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d15f      	bne.n	8004f64 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fdb1 	bl	8005a14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8004f70 <HAL_TIM_OC_Start_IT+0x210>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_TIM_OC_Start_IT+0x166>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f74 <HAL_TIM_OC_Start_IT+0x214>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <HAL_TIM_OC_Start_IT+0x16a>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <HAL_TIM_OC_Start_IT+0x16c>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a22      	ldr	r2, [pc, #136]	@ (8004f70 <HAL_TIM_OC_Start_IT+0x210>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_TIM_OC_Start_IT+0x1d0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef2:	d01d      	beq.n	8004f30 <HAL_TIM_OC_Start_IT+0x1d0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f78 <HAL_TIM_OC_Start_IT+0x218>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_TIM_OC_Start_IT+0x1d0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	@ (8004f7c <HAL_TIM_OC_Start_IT+0x21c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_TIM_OC_Start_IT+0x1d0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f80 <HAL_TIM_OC_Start_IT+0x220>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIM_OC_Start_IT+0x1d0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <HAL_TIM_OC_Start_IT+0x214>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIM_OC_Start_IT+0x1d0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a18      	ldr	r2, [pc, #96]	@ (8004f84 <HAL_TIM_OC_Start_IT+0x224>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_OC_Start_IT+0x1d0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	@ (8004f88 <HAL_TIM_OC_Start_IT+0x228>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d111      	bne.n	8004f54 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d010      	beq.n	8004f64 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	e007      	b.n	8004f64 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40001800 	.word	0x40001800

08004f8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e041      	b.n	8005022 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f839 	bl	800502a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f000 fab2 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d020      	beq.n	80050a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01b      	beq.n	80050a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0202 	mvn.w	r2, #2
 8005072:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fc f8e1 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 800508e:	e005      	b.n	800509c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fa31 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa38 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01b      	beq.n	80050ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f06f 0204 	mvn.w	r2, #4
 80050be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc f8bb 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 80050da:	e005      	b.n	80050e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fa0b 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa12 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d020      	beq.n	800513a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01b      	beq.n	800513a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0208 	mvn.w	r2, #8
 800510a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2204      	movs	r2, #4
 8005110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fc f895 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 8005126:	e005      	b.n	8005134 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f9e5 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9ec 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d020      	beq.n	8005186 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01b      	beq.n	8005186 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f06f 0210 	mvn.w	r2, #16
 8005156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2208      	movs	r2, #8
 800515c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fc f86f 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 8005172:	e005      	b.n	8005180 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f9bf 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9c6 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00c      	beq.n	80051aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0201 	mvn.w	r2, #1
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f99d 	bl	80054e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fccf 	bl	8005b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00c      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f997 	bl	8005520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00c      	beq.n	8005216 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0220 	mvn.w	r2, #32
 800520e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fca1 	bl	8005b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005238:	2302      	movs	r3, #2
 800523a:	e088      	b.n	800534e <HAL_TIM_IC_ConfigChannel+0x130>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11b      	bne.n	8005282 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800525a:	f000 fa17 	bl	800568c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 020c 	bic.w	r2, r2, #12
 800526c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6999      	ldr	r1, [r3, #24]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	619a      	str	r2, [r3, #24]
 8005280:	e060      	b.n	8005344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d11c      	bne.n	80052c2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005298:	f000 fa9b 	bl	80057d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80052aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6999      	ldr	r1, [r3, #24]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	021a      	lsls	r2, r3, #8
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	619a      	str	r2, [r3, #24]
 80052c0:	e040      	b.n	8005344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80052d8:	f000 fae8 	bl	80058ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 020c 	bic.w	r2, r2, #12
 80052ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69d9      	ldr	r1, [r3, #28]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	61da      	str	r2, [r3, #28]
 80052fe:	e021      	b.n	8005344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d11c      	bne.n	8005340 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005316:	f000 fb05 	bl	8005924 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005328:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69d9      	ldr	r1, [r3, #28]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	021a      	lsls	r2, r3, #8
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	61da      	str	r2, [r3, #28]
 800533e:	e001      	b.n	8005344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_TIM_ConfigClockSource+0x1c>
 800536e:	2302      	movs	r3, #2
 8005370:	e0b4      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x186>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005390:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005398:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053aa:	d03e      	beq.n	800542a <HAL_TIM_ConfigClockSource+0xd4>
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b0:	f200 8087 	bhi.w	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b8:	f000 8086 	beq.w	80054c8 <HAL_TIM_ConfigClockSource+0x172>
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c0:	d87f      	bhi.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053c2:	2b70      	cmp	r3, #112	@ 0x70
 80053c4:	d01a      	beq.n	80053fc <HAL_TIM_ConfigClockSource+0xa6>
 80053c6:	2b70      	cmp	r3, #112	@ 0x70
 80053c8:	d87b      	bhi.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053ca:	2b60      	cmp	r3, #96	@ 0x60
 80053cc:	d050      	beq.n	8005470 <HAL_TIM_ConfigClockSource+0x11a>
 80053ce:	2b60      	cmp	r3, #96	@ 0x60
 80053d0:	d877      	bhi.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053d2:	2b50      	cmp	r3, #80	@ 0x50
 80053d4:	d03c      	beq.n	8005450 <HAL_TIM_ConfigClockSource+0xfa>
 80053d6:	2b50      	cmp	r3, #80	@ 0x50
 80053d8:	d873      	bhi.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053da:	2b40      	cmp	r3, #64	@ 0x40
 80053dc:	d058      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0x13a>
 80053de:	2b40      	cmp	r3, #64	@ 0x40
 80053e0:	d86f      	bhi.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053e2:	2b30      	cmp	r3, #48	@ 0x30
 80053e4:	d064      	beq.n	80054b0 <HAL_TIM_ConfigClockSource+0x15a>
 80053e6:	2b30      	cmp	r3, #48	@ 0x30
 80053e8:	d86b      	bhi.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d060      	beq.n	80054b0 <HAL_TIM_ConfigClockSource+0x15a>
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d867      	bhi.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d05c      	beq.n	80054b0 <HAL_TIM_ConfigClockSource+0x15a>
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d05a      	beq.n	80054b0 <HAL_TIM_ConfigClockSource+0x15a>
 80053fa:	e062      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800540c:	f000 fae2 	bl	80059d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800541e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	609a      	str	r2, [r3, #8]
      break;
 8005428:	e04f      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	f000 facb 	bl	80059d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800544c:	609a      	str	r2, [r3, #8]
      break;
 800544e:	e03c      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545c:	461a      	mov	r2, r3
 800545e:	f000 f989 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2150      	movs	r1, #80	@ 0x50
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fa98 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 800546e:	e02c      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800547c:	461a      	mov	r2, r3
 800547e:	f000 f9e5 	bl	800584c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2160      	movs	r1, #96	@ 0x60
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fa88 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 800548e:	e01c      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549c:	461a      	mov	r2, r3
 800549e:	f000 f969 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2140      	movs	r1, #64	@ 0x40
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fa78 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 80054ae:	e00c      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4619      	mov	r1, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	f000 fa6f 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 80054c0:	e003      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
      break;
 80054c6:	e000      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a46      	ldr	r2, [pc, #280]	@ (8005660 <TIM_Base_SetConfig+0x12c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a43      	ldr	r2, [pc, #268]	@ (8005664 <TIM_Base_SetConfig+0x130>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a42      	ldr	r2, [pc, #264]	@ (8005668 <TIM_Base_SetConfig+0x134>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a41      	ldr	r2, [pc, #260]	@ (800566c <TIM_Base_SetConfig+0x138>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a40      	ldr	r2, [pc, #256]	@ (8005670 <TIM_Base_SetConfig+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d108      	bne.n	8005586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a35      	ldr	r2, [pc, #212]	@ (8005660 <TIM_Base_SetConfig+0x12c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02b      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005594:	d027      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a32      	ldr	r2, [pc, #200]	@ (8005664 <TIM_Base_SetConfig+0x130>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d023      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a31      	ldr	r2, [pc, #196]	@ (8005668 <TIM_Base_SetConfig+0x134>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01f      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a30      	ldr	r2, [pc, #192]	@ (800566c <TIM_Base_SetConfig+0x138>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01b      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005670 <TIM_Base_SetConfig+0x13c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d017      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005674 <TIM_Base_SetConfig+0x140>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005678 <TIM_Base_SetConfig+0x144>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2c      	ldr	r2, [pc, #176]	@ (800567c <TIM_Base_SetConfig+0x148>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005680 <TIM_Base_SetConfig+0x14c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005684 <TIM_Base_SetConfig+0x150>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a29      	ldr	r2, [pc, #164]	@ (8005688 <TIM_Base_SetConfig+0x154>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a10      	ldr	r2, [pc, #64]	@ (8005660 <TIM_Base_SetConfig+0x12c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a12      	ldr	r2, [pc, #72]	@ (8005670 <TIM_Base_SetConfig+0x13c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
  }
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40010400 	.word	0x40010400
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800
 8005680:	40001800 	.word	0x40001800
 8005684:	40001c00 	.word	0x40001c00
 8005688:	40002000 	.word	0x40002000

0800568c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f023 0201 	bic.w	r2, r3, #1
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a28      	ldr	r2, [pc, #160]	@ (8005758 <TIM_TI1_SetConfig+0xcc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01b      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c0:	d017      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a25      	ldr	r2, [pc, #148]	@ (800575c <TIM_TI1_SetConfig+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a24      	ldr	r2, [pc, #144]	@ (8005760 <TIM_TI1_SetConfig+0xd4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a23      	ldr	r2, [pc, #140]	@ (8005764 <TIM_TI1_SetConfig+0xd8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <TIM_TI1_SetConfig+0xdc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a21      	ldr	r2, [pc, #132]	@ (800576c <TIM_TI1_SetConfig+0xe0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a20      	ldr	r2, [pc, #128]	@ (8005770 <TIM_TI1_SetConfig+0xe4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <TIM_TI1_SetConfig+0x6a>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <TIM_TI1_SetConfig+0x6c>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e003      	b.n	8005716 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800571c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	b2db      	uxtb	r3, r3
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f023 030a 	bic.w	r3, r3, #10
 8005730:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f003 030a 	and.w	r3, r3, #10
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40001800 	.word	0x40001800

08005774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0210 	bic.w	r2, r3, #16
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	031b      	lsls	r3, r3, #12
 8005816:	b29b      	uxth	r3, r3
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	621a      	str	r2, [r3, #32]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0210 	bic.w	r2, r3, #16
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	031b      	lsls	r3, r3, #12
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005888:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	621a      	str	r2, [r3, #32]
}
 80058a0:	bf00      	nop
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80058fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005950:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005962:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	031b      	lsls	r3, r3, #12
 8005968:	b29b      	uxth	r3, r3
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005976:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	031b      	lsls	r3, r3, #12
 800597c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 0307 	orr.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2201      	movs	r2, #1
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e05a      	b.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d022      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac4:	d01d      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1a      	ldr	r2, [pc, #104]	@ (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a18      	ldr	r2, [pc, #96]	@ (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10c      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40000c00 	.word	0x40000c00
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40001800 	.word	0x40001800

08005b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b80:	b084      	sub	sp, #16
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	f107 001c 	add.w	r0, r7, #28
 8005b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d123      	bne.n	8005be2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f9dc 	bl	8005f94 <USB_CoreReset>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]
 8005be0:	e01b      	b.n	8005c1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f9d0 	bl	8005f94 <USB_CoreReset>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c0c:	e005      	b.n	8005c1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c1a:	7fbb      	ldrb	r3, [r7, #30]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10b      	bne.n	8005c38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f043 0206 	orr.w	r2, r3, #6
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c44:	b004      	add	sp, #16
 8005c46:	4770      	bx	lr

08005c48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f043 0201 	orr.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f023 0201 	bic.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d115      	bne.n	8005cda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cba:	200a      	movs	r0, #10
 8005cbc:	f7fb fd28 	bl	8001710 <HAL_Delay>
      ms += 10U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	330a      	adds	r3, #10
 8005cc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f956 	bl	8005f78 <USB_GetMode>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d01e      	beq.n	8005d10 <USB_SetCurrentMode+0x84>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cd6:	d9f0      	bls.n	8005cba <USB_SetCurrentMode+0x2e>
 8005cd8:	e01a      	b.n	8005d10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d115      	bne.n	8005d0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cec:	200a      	movs	r0, #10
 8005cee:	f7fb fd0f 	bl	8001710 <HAL_Delay>
      ms += 10U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	330a      	adds	r3, #10
 8005cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f93d 	bl	8005f78 <USB_GetMode>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <USB_SetCurrentMode+0x84>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d08:	d9f0      	bls.n	8005cec <USB_SetCurrentMode+0x60>
 8005d0a:	e001      	b.n	8005d10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e005      	b.n	8005d1c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d14:	d101      	bne.n	8005d1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d3e:	d901      	bls.n	8005d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01b      	b.n	8005d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	daf2      	bge.n	8005d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	019b      	lsls	r3, r3, #6
 8005d54:	f043 0220 	orr.w	r2, r3, #32
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d68:	d901      	bls.n	8005d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e006      	b.n	8005d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d0f0      	beq.n	8005d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005da0:	d901      	bls.n	8005da6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e018      	b.n	8005dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	daf2      	bge.n	8005d94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2210      	movs	r2, #16
 8005db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dc4:	d901      	bls.n	8005dca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e006      	b.n	8005dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d0f0      	beq.n	8005db8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b089      	sub	sp, #36	@ 0x24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	460b      	mov	r3, r1
 8005df4:	71fb      	strb	r3, [r7, #7]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d123      	bne.n	8005e52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e0a:	88bb      	ldrh	r3, [r7, #4]
 8005e0c:	3303      	adds	r3, #3
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e018      	b.n	8005e4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	031a      	lsls	r2, r3, #12
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e24:	461a      	mov	r2, r3
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	3301      	adds	r3, #1
 8005e36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3301      	adds	r3, #1
 8005e42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d3e2      	bcc.n	8005e18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3724      	adds	r7, #36	@ 0x24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b08b      	sub	sp, #44	@ 0x2c
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	e014      	b.n	8005eb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	3301      	adds	r3, #1
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	623b      	str	r3, [r7, #32]
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d3e6      	bcc.n	8005e8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ebe:	8bfb      	ldrh	r3, [r7, #30]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01e      	beq.n	8005f02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	701a      	strb	r2, [r3, #0]
      i++;
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	3301      	adds	r3, #1
 8005eee:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ef6:	8bfb      	ldrh	r3, [r7, #30]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005efc:	8bfb      	ldrh	r3, [r7, #30]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1ea      	bne.n	8005ed8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	372c      	adds	r7, #44	@ 0x2c
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4013      	ands	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	f003 0301 	and.w	r3, r3, #1
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fac:	d901      	bls.n	8005fb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e01b      	b.n	8005fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	daf2      	bge.n	8005fa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f043 0201 	orr.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fd6:	d901      	bls.n	8005fdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d0f0      	beq.n	8005fca <USB_CoreReset+0x36>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d119      	bne.n	8006082 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800604e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10a      	bne.n	800606c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e014      	b.n	8006096 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800607a:	f023 0304 	bic.w	r3, r3, #4
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e009      	b.n	8006096 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006090:	f023 0304 	bic.w	r3, r3, #4
 8006094:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006096:	2110      	movs	r1, #16
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fe43 	bl	8005d24 <USB_FlushTxFifo>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff fe6d 	bl	8005d88 <USB_FlushRxFifo>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	e015      	b.n	80060ea <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ca:	461a      	mov	r2, r3
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
 80060d0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060de:	461a      	mov	r2, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3301      	adds	r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060ee:	461a      	mov	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d3e3      	bcc.n	80060be <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006102:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a18      	ldr	r2, [pc, #96]	@ (8006168 <USB_HostInit+0x170>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10b      	bne.n	8006124 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006112:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a15      	ldr	r2, [pc, #84]	@ (800616c <USB_HostInit+0x174>)
 8006118:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a14      	ldr	r2, [pc, #80]	@ (8006170 <USB_HostInit+0x178>)
 800611e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006122:	e009      	b.n	8006138 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2280      	movs	r2, #128	@ 0x80
 8006128:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a11      	ldr	r2, [pc, #68]	@ (8006174 <USB_HostInit+0x17c>)
 800612e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a11      	ldr	r2, [pc, #68]	@ (8006178 <USB_HostInit+0x180>)
 8006134:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006138:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f043 0210 	orr.w	r2, r3, #16
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <USB_HostInit+0x184>)
 8006152:	4313      	orrs	r3, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006158:	7dfb      	ldrb	r3, [r7, #23]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006164:	b004      	add	sp, #16
 8006166:	4770      	bx	lr
 8006168:	40040000 	.word	0x40040000
 800616c:	01000200 	.word	0x01000200
 8006170:	00e00300 	.word	0x00e00300
 8006174:	00600080 	.word	0x00600080
 8006178:	004000e0 	.word	0x004000e0
 800617c:	a3200008 	.word	0xa3200008

08006180 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061b8:	4313      	orrs	r3, r2
 80061ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d107      	bne.n	80061d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061c8:	461a      	mov	r2, r3
 80061ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061ce:	6053      	str	r3, [r2, #4]
 80061d0:	e00c      	b.n	80061ec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d107      	bne.n	80061e8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061de:	461a      	mov	r2, r3
 80061e0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80061e4:	6053      	str	r3, [r2, #4]
 80061e6:	e001      	b.n	80061ec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800621a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006228:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800622a:	2064      	movs	r0, #100	@ 0x64
 800622c:	f7fb fa70 	bl	8001710 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800623c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800623e:	200a      	movs	r0, #10
 8006240:	f7fb fa66 	bl	8001710 <HAL_Delay>

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006272:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <USB_DriveVbus+0x44>
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d106      	bne.n	8006292 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800628c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006290:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629c:	d109      	bne.n	80062b2 <USB_DriveVbus+0x64>
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80062ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062b0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	0c5b      	lsrs	r3, r3, #17
 80062de:	f003 0303 	and.w	r3, r3, #3
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	b29b      	uxth	r3, r3
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	4603      	mov	r3, r0
 8006320:	70fb      	strb	r3, [r7, #3]
 8006322:	460b      	mov	r3, r1
 8006324:	70bb      	strb	r3, [r7, #2]
 8006326:	4613      	mov	r3, r2
 8006328:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633e:	461a      	mov	r2, r3
 8006340:	f04f 33ff 	mov.w	r3, #4294967295
 8006344:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006346:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800634a:	2b03      	cmp	r3, #3
 800634c:	d87c      	bhi.n	8006448 <USB_HC_Init+0x138>
 800634e:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <USB_HC_Init+0x44>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	08006365 	.word	0x08006365
 8006358:	0800640b 	.word	0x0800640b
 800635c:	08006365 	.word	0x08006365
 8006360:	080063cd 	.word	0x080063cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006370:	461a      	mov	r2, r3
 8006372:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006376:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006378:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800637c:	2b00      	cmp	r3, #0
 800637e:	da10      	bge.n	80063a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	440a      	add	r2, r1
 8006396:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800639a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800639e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80063a0:	e055      	b.n	800644e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a6f      	ldr	r2, [pc, #444]	@ (8006564 <USB_HC_Init+0x254>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d151      	bne.n	800644e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063c8:	60d3      	str	r3, [r2, #12]
      break;
 80063ca:	e040      	b.n	800644e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d8:	461a      	mov	r2, r3
 80063da:	f240 639d 	movw	r3, #1693	@ 0x69d
 80063de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da34      	bge.n	8006452 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006406:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006408:	e023      	b.n	8006452 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006416:	461a      	mov	r2, r3
 8006418:	f240 2325 	movw	r3, #549	@ 0x225
 800641c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800641e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da17      	bge.n	8006456 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	78fa      	ldrb	r2, [r7, #3]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	440a      	add	r2, r1
 800643c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006440:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006444:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006446:	e006      	b.n	8006456 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	77fb      	strb	r3, [r7, #31]
      break;
 800644c:	e004      	b.n	8006458 <USB_HC_Init+0x148>
      break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <USB_HC_Init+0x148>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <USB_HC_Init+0x148>
      break;
 8006456:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4413      	add	r3, r2
 8006460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	440a      	add	r2, r1
 8006480:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006484:	f043 0302 	orr.w	r3, r3, #2
 8006488:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	2101      	movs	r1, #1
 800649a:	fa01 f303 	lsl.w	r3, r1, r3
 800649e:	6939      	ldr	r1, [r7, #16]
 80064a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064a4:	4313      	orrs	r3, r2
 80064a6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	da03      	bge.n	80064c4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e001      	b.n	80064c8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff fef9 	bl	80062c0 <USB_GetHostSpeed>
 80064ce:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80064d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d106      	bne.n	80064e6 <USB_HC_Init+0x1d6>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d003      	beq.n	80064e6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e001      	b.n	80064ea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064ea:	787b      	ldrb	r3, [r7, #1]
 80064ec:	059b      	lsls	r3, r3, #22
 80064ee:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064f2:	78bb      	ldrb	r3, [r7, #2]
 80064f4:	02db      	lsls	r3, r3, #11
 80064f6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064fa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006500:	049b      	lsls	r3, r3, #18
 8006502:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006506:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006508:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800650a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800650e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	431a      	orrs	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	440a      	add	r2, r1
 8006520:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006528:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800652a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800652e:	2b03      	cmp	r3, #3
 8006530:	d003      	beq.n	800653a <USB_HC_Init+0x22a>
 8006532:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006536:	2b01      	cmp	r3, #1
 8006538:	d10f      	bne.n	800655a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006554:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006558:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800655a:	7ffb      	ldrb	r3, [r7, #31]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40040000 	.word	0x40040000

08006568 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	@ 0x30
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4613      	mov	r3, r2
 8006574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006584:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a5d      	ldr	r2, [pc, #372]	@ (8006700 <USB_HC_StartXfer+0x198>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d12f      	bne.n	80065ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d11c      	bne.n	80065ce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	7c9b      	ldrb	r3, [r3, #18]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <USB_HC_StartXfer+0x3c>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	7c9b      	ldrb	r3, [r3, #18]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d124      	bne.n	80065ee <USB_HC_StartXfer+0x86>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	799b      	ldrb	r3, [r3, #6]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d120      	bne.n	80065ee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	6a3a      	ldr	r2, [r7, #32]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	60d3      	str	r3, [r2, #12]
 80065cc:	e00f      	b.n	80065ee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	791b      	ldrb	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <USB_HC_StartXfer+0x86>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	795b      	ldrb	r3, [r3, #5]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d107      	bne.n	80065ee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	785b      	ldrb	r3, [r3, #1]
 80065e2:	4619      	mov	r1, r3
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fb6b 	bl	8006cc0 <USB_DoPing>
        return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e232      	b.n	8006a54 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	799b      	ldrb	r3, [r3, #6]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d158      	bne.n	80066a8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80065f6:	2301      	movs	r3, #1
 80065f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	78db      	ldrb	r3, [r3, #3]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006602:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	8a92      	ldrh	r2, [r2, #20]
 8006608:	fb03 f202 	mul.w	r2, r3, r2
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	61da      	str	r2, [r3, #28]
 8006610:	e07c      	b.n	800670c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	7c9b      	ldrb	r3, [r3, #18]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d130      	bne.n	800667c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006620:	d918      	bls.n	8006654 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	8a9b      	ldrh	r3, [r3, #20]
 8006626:	461a      	mov	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d003      	beq.n	8006644 <USB_HC_StartXfer+0xdc>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d103      	bne.n	800664c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2202      	movs	r2, #2
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e05f      	b.n	800670c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2201      	movs	r2, #1
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e05b      	b.n	800670c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d007      	beq.n	8006674 <USB_HC_StartXfer+0x10c>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d003      	beq.n	8006674 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2204      	movs	r2, #4
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	e04b      	b.n	800670c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2203      	movs	r2, #3
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e047      	b.n	800670c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d10d      	bne.n	800669e <USB_HC_StartXfer+0x136>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	8a92      	ldrh	r2, [r2, #20]
 800668a:	4293      	cmp	r3, r2
 800668c:	d907      	bls.n	800669e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800668e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	8a92      	ldrh	r2, [r2, #20]
 8006694:	fb03 f202 	mul.w	r2, r3, r2
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	61da      	str	r2, [r3, #28]
 800669c:	e036      	b.n	800670c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6a1a      	ldr	r2, [r3, #32]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	61da      	str	r2, [r3, #28]
 80066a6:	e031      	b.n	800670c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d018      	beq.n	80066e2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	8a92      	ldrh	r2, [r2, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	3b01      	subs	r3, #1
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	8a92      	ldrh	r2, [r2, #20]
 80066c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80066c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80066c8:	8b7b      	ldrh	r3, [r7, #26]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d90b      	bls.n	80066e6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80066ce:	8b7b      	ldrh	r3, [r7, #26]
 80066d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	8a92      	ldrh	r2, [r2, #20]
 80066d8:	fb03 f202 	mul.w	r2, r3, r2
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	61da      	str	r2, [r3, #28]
 80066e0:	e001      	b.n	80066e6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80066e2:	2301      	movs	r3, #1
 80066e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	8a92      	ldrh	r2, [r2, #20]
 80066f4:	fb03 f202 	mul.w	r2, r3, r2
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	61da      	str	r2, [r3, #28]
 80066fc:	e006      	b.n	800670c <USB_HC_StartXfer+0x1a4>
 80066fe:	bf00      	nop
 8006700:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006714:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006716:	04d9      	lsls	r1, r3, #19
 8006718:	4ba3      	ldr	r3, [pc, #652]	@ (80069a8 <USB_HC_StartXfer+0x440>)
 800671a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800671c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	7d9b      	ldrb	r3, [r3, #22]
 8006722:	075b      	lsls	r3, r3, #29
 8006724:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006728:	69f9      	ldr	r1, [r7, #28]
 800672a:	0148      	lsls	r0, r1, #5
 800672c:	6a39      	ldr	r1, [r7, #32]
 800672e:	4401      	add	r1, r0
 8006730:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006734:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006736:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6999      	ldr	r1, [r3, #24]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674e:	460a      	mov	r2, r1
 8006750:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	440a      	add	r2, r1
 8006780:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006784:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006788:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	4413      	add	r3, r2
 8006792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	7e7b      	ldrb	r3, [r7, #25]
 800679a:	075b      	lsls	r3, r3, #29
 800679c:	69f9      	ldr	r1, [r7, #28]
 800679e:	0148      	lsls	r0, r1, #5
 80067a0:	6a39      	ldr	r1, [r7, #32]
 80067a2:	4401      	add	r1, r0
 80067a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	799b      	ldrb	r3, [r3, #6]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f040 80c3 	bne.w	800693c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	7c5b      	ldrb	r3, [r3, #17]
 80067ba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067c0:	4313      	orrs	r3, r2
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	0151      	lsls	r1, r2, #5
 80067c6:	6a3a      	ldr	r2, [r7, #32]
 80067c8:	440a      	add	r2, r1
 80067ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80067ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067d2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	79db      	ldrb	r3, [r3, #7]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d123      	bne.n	8006844 <USB_HC_StartXfer+0x2dc>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	78db      	ldrb	r3, [r3, #3]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11f      	bne.n	8006844 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	4413      	add	r3, r2
 800680c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	6a3a      	ldr	r2, [r7, #32]
 8006818:	440a      	add	r2, r1
 800681a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800681e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006822:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	440a      	add	r2, r1
 800683a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800683e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006842:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	7c9b      	ldrb	r3, [r3, #18]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d003      	beq.n	8006854 <USB_HC_StartXfer+0x2ec>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	7c9b      	ldrb	r3, [r3, #18]
 8006850:	2b03      	cmp	r3, #3
 8006852:	d117      	bne.n	8006884 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006858:	2b01      	cmp	r3, #1
 800685a:	d113      	bne.n	8006884 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	78db      	ldrb	r3, [r3, #3]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d10f      	bne.n	8006884 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	4413      	add	r3, r2
 800686c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	440a      	add	r2, r1
 800687a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800687e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006882:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	7c9b      	ldrb	r3, [r3, #18]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d162      	bne.n	8006952 <USB_HC_StartXfer+0x3ea>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	78db      	ldrb	r3, [r3, #3]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d15e      	bne.n	8006952 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	3b01      	subs	r3, #1
 800689a:	2b03      	cmp	r3, #3
 800689c:	d858      	bhi.n	8006950 <USB_HC_StartXfer+0x3e8>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <USB_HC_StartXfer+0x33c>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068d7 	.word	0x080068d7
 80068ac:	080068f9 	.word	0x080068f9
 80068b0:	0800691b 	.word	0x0800691b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d2:	6053      	str	r3, [r2, #4]
          break;
 80068d4:	e03d      	b.n	8006952 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	6a3a      	ldr	r2, [r7, #32]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068f0:	f043 030e 	orr.w	r3, r3, #14
 80068f4:	6053      	str	r3, [r2, #4]
          break;
 80068f6:	e02c      	b.n	8006952 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	6a3a      	ldr	r2, [r7, #32]
 800690c:	440a      	add	r2, r1
 800690e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006916:	6053      	str	r3, [r2, #4]
          break;
 8006918:	e01b      	b.n	8006952 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	440a      	add	r2, r1
 8006930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006938:	6053      	str	r3, [r2, #4]
          break;
 800693a:	e00a      	b.n	8006952 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006948:	461a      	mov	r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	6053      	str	r3, [r2, #4]
 800694e:	e000      	b.n	8006952 <USB_HC_StartXfer+0x3ea>
          break;
 8006950:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006968:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	78db      	ldrb	r3, [r3, #3]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	e003      	b.n	8006984 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006982:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800698a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006998:	461a      	mov	r2, r3
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e055      	b.n	8006a54 <USB_HC_StartXfer+0x4ec>
 80069a8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	78db      	ldrb	r3, [r3, #3]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d14e      	bne.n	8006a52 <USB_HC_StartXfer+0x4ea>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d04a      	beq.n	8006a52 <USB_HC_StartXfer+0x4ea>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	79db      	ldrb	r3, [r3, #7]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d146      	bne.n	8006a52 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	7c9b      	ldrb	r3, [r3, #18]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d831      	bhi.n	8006a30 <USB_HC_StartXfer+0x4c8>
 80069cc:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <USB_HC_StartXfer+0x46c>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	08006a09 	.word	0x08006a09
 80069dc:	080069e5 	.word	0x080069e5
 80069e0:	08006a09 	.word	0x08006a09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	3303      	adds	r3, #3
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069ee:	8afa      	ldrh	r2, [r7, #22]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d91c      	bls.n	8006a34 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a06:	e015      	b.n	8006a34 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	3303      	adds	r3, #3
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a12:	8afa      	ldrh	r2, [r7, #22]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d90a      	bls.n	8006a38 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a2e:	e003      	b.n	8006a38 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006a30:	bf00      	nop
 8006a32:	e002      	b.n	8006a3a <USB_HC_StartXfer+0x4d2>
        break;
 8006a34:	bf00      	nop
 8006a36:	e000      	b.n	8006a3a <USB_HC_StartXfer+0x4d2>
        break;
 8006a38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6999      	ldr	r1, [r3, #24]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785a      	ldrb	r2, [r3, #1]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2000      	movs	r0, #0
 8006a4a:	9000      	str	r0, [sp, #0]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff f9c9 	bl	8005de4 <USB_WritePacket>
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3728      	adds	r7, #40	@ 0x28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	b29b      	uxth	r3, r3
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b089      	sub	sp, #36	@ 0x24
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0c9b      	lsrs	r3, r3, #18
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	0fdb      	lsrs	r3, r3, #31
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	0fdb      	lsrs	r3, r3, #31
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d10d      	bne.n	8006b00 <USB_HC_Halt+0x82>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <USB_HC_Halt+0x82>
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d002      	beq.n	8006afc <USB_HC_Halt+0x7e>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d101      	bne.n	8006b00 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e0d8      	b.n	8006cb2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <USB_HC_Halt+0x8e>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d173      	bne.n	8006bf4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b2a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d14a      	bne.n	8006bce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d133      	bne.n	8006bac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b62:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b82:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b90:	d82e      	bhi.n	8006bf0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ba8:	d0ec      	beq.n	8006b84 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006baa:	e081      	b.n	8006cb0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bcc:	e070      	b.n	8006cb0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006be8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bee:	e05f      	b.n	8006cb0 <USB_HC_Halt+0x232>
            break;
 8006bf0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bf2:	e05d      	b.n	8006cb0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d133      	bne.n	8006c8c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c62:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c70:	d81d      	bhi.n	8006cae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c88:	d0ec      	beq.n	8006c64 <USB_HC_Halt+0x1e6>
 8006c8a:	e011      	b.n	8006cb0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	e000      	b.n	8006cb0 <USB_HC_Halt+0x232>
          break;
 8006cae:	bf00      	nop
    }
  }

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3724      	adds	r7, #36	@ 0x24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	04da      	lsls	r2, r3, #19
 8006cdc:	4b15      	ldr	r3, [pc, #84]	@ (8006d34 <USB_DoPing+0x74>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cf0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	1ff80000 	.word	0x1ff80000

08006d38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7fe ff8c 	bl	8005c6a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d52:	2110      	movs	r1, #16
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fe ffe5 	bl	8005d24 <USB_FlushTxFifo>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff f80f 	bl	8005d88 <USB_FlushRxFifo>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	e01f      	b.n	8006dba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006da0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dae:	461a      	mov	r2, r3
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	3301      	adds	r3, #1
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b0f      	cmp	r3, #15
 8006dbe:	d9dc      	bls.n	8006d7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	e034      	b.n	8006e30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ddc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006de4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e0c:	d80c      	bhi.n	8006e28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e24:	d0ec      	beq.n	8006e00 <USB_StopHost+0xc8>
 8006e26:	e000      	b.n	8006e2a <USB_StopHost+0xf2>
        break;
 8006e28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d9c7      	bls.n	8006dc6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fe fefb 	bl	8005c48 <USB_EnableGlobalInt>

  return ret;
 8006e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b089      	sub	sp, #36	@ 0x24
 8006e60:	af04      	add	r7, sp, #16
 8006e62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e64:	2301      	movs	r3, #1
 8006e66:	2202      	movs	r2, #2
 8006e68:	2102      	movs	r1, #2
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc85 	bl	800777a <USBH_FindInterface>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2bff      	cmp	r3, #255	@ 0xff
 8006e78:	d002      	beq.n	8006e80 <USBH_CDC_InterfaceInit+0x24>
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d901      	bls.n	8006e84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e80:	2302      	movs	r3, #2
 8006e82:	e13d      	b.n	8007100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc5a 	bl	8007742 <USBH_SelectInterface>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e131      	b.n	8007100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006ea2:	2050      	movs	r0, #80	@ 0x50
 8006ea4:	f002 fb64 	bl	8009570 <malloc>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e11f      	b.n	8007100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ec0:	2250      	movs	r2, #80	@ 0x50
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	68b8      	ldr	r0, [r7, #8]
 8006ec6:	f002 fc11 	bl	80096ec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	211a      	movs	r1, #26
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b25b      	sxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da15      	bge.n	8006f0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	211a      	movs	r1, #26
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	4413      	add	r3, r2
 8006eee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	211a      	movs	r1, #26
 8006efe:	fb01 f303 	mul.w	r3, r1, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f08:	881a      	ldrh	r2, [r3, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 ffbe 	bl	8008e96 <USBH_AllocPipe>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	7819      	ldrb	r1, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	7858      	ldrb	r0, [r3, #1]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	8952      	ldrh	r2, [r2, #10]
 8006f3a:	9202      	str	r2, [sp, #8]
 8006f3c:	2203      	movs	r2, #3
 8006f3e:	9201      	str	r2, [sp, #4]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	4623      	mov	r3, r4
 8006f44:	4602      	mov	r2, r0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 ff76 	bl	8008e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2200      	movs	r2, #0
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f002 fa85 	bl	8009464 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	210a      	movs	r1, #10
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc0a 	bl	800777a <USBH_FindInterface>
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	2bff      	cmp	r3, #255	@ 0xff
 8006f6e:	d002      	beq.n	8006f76 <USBH_CDC_InterfaceInit+0x11a>
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d901      	bls.n	8006f7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f76:	2302      	movs	r3, #2
 8006f78:	e0c2      	b.n	8007100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	211a      	movs	r1, #26
 8006f80:	fb01 f303 	mul.w	r3, r1, r3
 8006f84:	4413      	add	r3, r2
 8006f86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b25b      	sxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	da16      	bge.n	8006fc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	211a      	movs	r1, #26
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	211a      	movs	r1, #26
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fb8:	881a      	ldrh	r2, [r3, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	835a      	strh	r2, [r3, #26]
 8006fbe:	e015      	b.n	8006fec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	211a      	movs	r1, #26
 8006fc6:	fb01 f303 	mul.w	r3, r1, r3
 8006fca:	4413      	add	r3, r2
 8006fcc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	211a      	movs	r1, #26
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fe6:	881a      	ldrh	r2, [r3, #0]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	211a      	movs	r1, #26
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	da16      	bge.n	8007032 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	211a      	movs	r1, #26
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4413      	add	r3, r2
 8007010:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007014:	781a      	ldrb	r2, [r3, #0]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	211a      	movs	r1, #26
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	4413      	add	r3, r2
 8007026:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800702a:	881a      	ldrh	r2, [r3, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	835a      	strh	r2, [r3, #26]
 8007030:	e015      	b.n	800705e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	211a      	movs	r1, #26
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	4413      	add	r3, r2
 800703e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	211a      	movs	r1, #26
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	4413      	add	r3, r2
 8007054:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007058:	881a      	ldrh	r2, [r3, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	7b9b      	ldrb	r3, [r3, #14]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 ff16 	bl	8008e96 <USBH_AllocPipe>
 800706a:	4603      	mov	r3, r0
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	7bdb      	ldrb	r3, [r3, #15]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 ff0c 	bl	8008e96 <USBH_AllocPipe>
 800707e:	4603      	mov	r3, r0
 8007080:	461a      	mov	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	7b59      	ldrb	r1, [r3, #13]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	7b98      	ldrb	r0, [r3, #14]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	8b12      	ldrh	r2, [r2, #24]
 800709e:	9202      	str	r2, [sp, #8]
 80070a0:	2202      	movs	r2, #2
 80070a2:	9201      	str	r2, [sp, #4]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4623      	mov	r3, r4
 80070a8:	4602      	mov	r2, r0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fec4 	bl	8008e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	7b19      	ldrb	r1, [r3, #12]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	7bd8      	ldrb	r0, [r3, #15]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	8b52      	ldrh	r2, [r2, #26]
 80070c8:	9202      	str	r2, [sp, #8]
 80070ca:	2202      	movs	r2, #2
 80070cc:	9201      	str	r2, [sp, #4]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4623      	mov	r3, r4
 80070d2:	4602      	mov	r2, r0
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 feaf 	bl	8008e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	7b5b      	ldrb	r3, [r3, #13]
 80070e6:	2200      	movs	r2, #0
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f002 f9ba 	bl	8009464 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	7b1b      	ldrb	r3, [r3, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f002 f9b3 	bl	8009464 <USBH_LL_SetToggle>

  return USBH_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	bd90      	pop	{r4, r7, pc}

08007108 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fea4 	bl	8008e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fecf 	bl	8008ed8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	7b1b      	ldrb	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00e      	beq.n	8007166 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	7b1b      	ldrb	r3, [r3, #12]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fe91 	bl	8008e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	7b1b      	ldrb	r3, [r3, #12]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 febc 	bl	8008ed8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	7b5b      	ldrb	r3, [r3, #13]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00e      	beq.n	800718c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	7b5b      	ldrb	r3, [r3, #13]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 fe7e 	bl	8008e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	7b5b      	ldrb	r3, [r3, #13]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fea9 	bl	8008ed8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f002 f9ed 	bl	8009580 <free>
    phost->pActiveClass->pData = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071ac:	2200      	movs	r2, #0
 80071ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3340      	adds	r3, #64	@ 0x40
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8b1 	bl	800733a <GetLineCoding>
 80071d8:	4603      	mov	r3, r0
 80071da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80071e8:	2102      	movs	r1, #2
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80071ee:	7afb      	ldrb	r3, [r7, #11]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007218:	2b04      	cmp	r3, #4
 800721a:	d877      	bhi.n	800730c <USBH_CDC_Process+0x114>
 800721c:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <USBH_CDC_Process+0x2c>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007239 	.word	0x08007239
 8007228:	0800723f 	.word	0x0800723f
 800722c:	0800726f 	.word	0x0800726f
 8007230:	080072e3 	.word	0x080072e3
 8007234:	080072f1 	.word	0x080072f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]
      break;
 800723c:	e06d      	b.n	800731a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f897 	bl	8007378 <SetLineCoding>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800725c:	e058      	b.n	8007310 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d055      	beq.n	8007310 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2204      	movs	r2, #4
 8007268:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800726c:	e050      	b.n	8007310 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	3340      	adds	r3, #64	@ 0x40
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f860 	bl	800733a <GetLineCoding>
 800727a:	4603      	mov	r3, r0
 800727c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d126      	bne.n	80072d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007296:	791b      	ldrb	r3, [r3, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d13b      	bne.n	8007314 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d133      	bne.n	8007314 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d12b      	bne.n	8007314 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d124      	bne.n	8007314 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f958 	bl	8007580 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072d0:	e020      	b.n	8007314 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d01d      	beq.n	8007314 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2204      	movs	r2, #4
 80072dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80072e0:	e018      	b.n	8007314 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f867 	bl	80073b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f8da 	bl	80074a2 <CDC_ProcessReception>
      break;
 80072ee:	e014      	b.n	800731a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80072f0:	2100      	movs	r1, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f81a 	bl	800832c <USBH_ClrFeature>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800730a:	e005      	b.n	8007318 <USBH_CDC_Process+0x120>

    default:
      break;
 800730c:	bf00      	nop
 800730e:	e004      	b.n	800731a <USBH_CDC_Process+0x122>
      break;
 8007310:	bf00      	nop
 8007312:	e002      	b.n	800731a <USBH_CDC_Process+0x122>
      break;
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <USBH_CDC_Process+0x122>
      break;
 8007318:	bf00      	nop

  }

  return status;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	22a1      	movs	r2, #161	@ 0xa1
 8007348:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2221      	movs	r2, #33	@ 0x21
 800734e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2207      	movs	r2, #7
 8007360:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2207      	movs	r2, #7
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 fb14 	bl	8008996 <USBH_CtlReq>
 800736e:	4603      	mov	r3, r0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2221      	movs	r2, #33	@ 0x21
 8007386:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2207      	movs	r2, #7
 800739e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2207      	movs	r2, #7
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 faf5 	bl	8008996 <USBH_CtlReq>
 80073ac:	4603      	mov	r3, r0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af02      	add	r7, sp, #8
 80073bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d002      	beq.n	80073dc <CDC_ProcessTransmission+0x26>
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d023      	beq.n	8007422 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80073da:	e05e      	b.n	800749a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	8b12      	ldrh	r2, [r2, #24]
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d90b      	bls.n	8007400 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	69d9      	ldr	r1, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8b1a      	ldrh	r2, [r3, #24]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	7b5b      	ldrb	r3, [r3, #13]
 80073f4:	2001      	movs	r0, #1
 80073f6:	9000      	str	r0, [sp, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fcda 	bl	8008db2 <USBH_BulkSendData>
 80073fe:	e00b      	b.n	8007418 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	7b5b      	ldrb	r3, [r3, #13]
 800740e:	2001      	movs	r0, #1
 8007410:	9000      	str	r0, [sp, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fccd 	bl	8008db2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007420:	e03b      	b.n	800749a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	7b5b      	ldrb	r3, [r3, #13]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 fff1 	bl	8009410 <USBH_LL_GetURBState>
 800742e:	4603      	mov	r3, r0
 8007430:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d128      	bne.n	800748a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	8b12      	ldrh	r2, [r2, #24]
 8007440:	4293      	cmp	r3, r2
 8007442:	d90e      	bls.n	8007462 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	8b12      	ldrh	r2, [r2, #24]
 800744c:	1a9a      	subs	r2, r3, r2
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	8b12      	ldrh	r2, [r2, #24]
 800745a:	441a      	add	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	61da      	str	r2, [r3, #28]
 8007460:	e002      	b.n	8007468 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007478:	e00e      	b.n	8007498 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f868 	bl	8007558 <USBH_CDC_TransmitCallback>
      break;
 8007488:	e006      	b.n	8007498 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d103      	bne.n	8007498 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007498:	bf00      	nop
  }
}
 800749a:	bf00      	nop
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d002      	beq.n	80074c8 <CDC_ProcessReception+0x26>
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d00e      	beq.n	80074e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80074c6:	e043      	b.n	8007550 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	6a19      	ldr	r1, [r3, #32]
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	8b5a      	ldrh	r2, [r3, #26]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	7b1b      	ldrb	r3, [r3, #12]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 fc91 	bl	8008dfc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2204      	movs	r2, #4
 80074de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80074e2:	e035      	b.n	8007550 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	7b1b      	ldrb	r3, [r3, #12]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 ff90 	bl	8009410 <USBH_LL_GetURBState>
 80074f0:	4603      	mov	r3, r0
 80074f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80074f4:	7cfb      	ldrb	r3, [r7, #19]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d129      	bne.n	800754e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	7b1b      	ldrb	r3, [r3, #12]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fef3 	bl	80092ec <USBH_LL_GetLastXferSize>
 8007506:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	429a      	cmp	r2, r3
 8007510:	d016      	beq.n	8007540 <CDC_ProcessReception+0x9e>
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	8b5b      	ldrh	r3, [r3, #26]
 8007516:	461a      	mov	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4293      	cmp	r3, r2
 800751c:	d110      	bne.n	8007540 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1ad2      	subs	r2, r2, r3
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	441a      	add	r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2203      	movs	r2, #3
 800753a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800753e:	e006      	b.n	800754e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f80f 	bl	800756c <USBH_CDC_ReceiveCallback>
      break;
 800754e:	bf00      	nop
  }
}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80075a8:	2302      	movs	r3, #2
 80075aa:	e029      	b.n	8007600 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	79fa      	ldrb	r2, [r7, #7]
 80075b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f81f 	bl	8007608 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fdc3 	bl	8009184 <USBH_LL_Init>

  return USBH_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	e009      	b.n	800762e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	33e0      	adds	r3, #224	@ 0xe0
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b0f      	cmp	r3, #15
 8007632:	d9f2      	bls.n	800761a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e009      	b.n	800764e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007654:	d3f1      	bcc.n	800763a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2240      	movs	r2, #64	@ 0x40
 800767a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	331c      	adds	r3, #28
 80076a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076aa:	2100      	movs	r1, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f002 f81d 	bl	80096ec <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80076b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f002 f814 	bl	80096ec <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80076ca:	2212      	movs	r2, #18
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f002 f80c 	bl	80096ec <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80076da:	223e      	movs	r2, #62	@ 0x3e
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f002 f804 	bl	80096ec <memset>

  return USBH_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d016      	beq.n	8007730 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10e      	bne.n	800772a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007712:	1c59      	adds	r1, r3, #1
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	33de      	adds	r3, #222	@ 0xde
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	73fb      	strb	r3, [r7, #15]
 8007728:	e004      	b.n	8007734 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800772a:	2302      	movs	r3, #2
 800772c:	73fb      	strb	r3, [r7, #15]
 800772e:	e001      	b.n	8007734 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007730:	2302      	movs	r3, #2
 8007732:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007758:	78fa      	ldrb	r2, [r7, #3]
 800775a:	429a      	cmp	r2, r3
 800775c:	d204      	bcs.n	8007768 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007766:	e001      	b.n	800776c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007768:	2302      	movs	r3, #2
 800776a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800777a:	b480      	push	{r7}
 800777c:	b087      	sub	sp, #28
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	461a      	mov	r2, r3
 8007788:	4603      	mov	r3, r0
 800778a:	70fb      	strb	r3, [r7, #3]
 800778c:	460b      	mov	r3, r1
 800778e:	70bb      	strb	r3, [r7, #2]
 8007790:	4613      	mov	r3, r2
 8007792:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007798:	2300      	movs	r3, #0
 800779a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80077a2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077a4:	e025      	b.n	80077f2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	221a      	movs	r2, #26
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	3308      	adds	r3, #8
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4413      	add	r3, r2
 80077b4:	3302      	adds	r3, #2
 80077b6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	795b      	ldrb	r3, [r3, #5]
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d002      	beq.n	80077c8 <USBH_FindInterface+0x4e>
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	2bff      	cmp	r3, #255	@ 0xff
 80077c6:	d111      	bne.n	80077ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077cc:	78ba      	ldrb	r2, [r7, #2]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d002      	beq.n	80077d8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077d2:	78bb      	ldrb	r3, [r7, #2]
 80077d4:	2bff      	cmp	r3, #255	@ 0xff
 80077d6:	d109      	bne.n	80077ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077dc:	787a      	ldrb	r2, [r7, #1]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d002      	beq.n	80077e8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077e2:	787b      	ldrb	r3, [r7, #1]
 80077e4:	2bff      	cmp	r3, #255	@ 0xff
 80077e6:	d101      	bne.n	80077ec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	e006      	b.n	80077fa <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	3301      	adds	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d9d6      	bls.n	80077a6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077f8:	23ff      	movs	r3, #255	@ 0xff
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fcf4 	bl	80091fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007814:	2101      	movs	r1, #1
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fe0d 	bl	8009436 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af04      	add	r7, sp, #16
 800782e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d102      	bne.n	800784a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2203      	movs	r2, #3
 8007848:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b0b      	cmp	r3, #11
 8007852:	f200 81bb 	bhi.w	8007bcc <USBH_Process+0x3a4>
 8007856:	a201      	add	r2, pc, #4	@ (adr r2, 800785c <USBH_Process+0x34>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	0800788d 	.word	0x0800788d
 8007860:	080078bf 	.word	0x080078bf
 8007864:	08007927 	.word	0x08007927
 8007868:	08007b67 	.word	0x08007b67
 800786c:	08007bcd 	.word	0x08007bcd
 8007870:	080079c7 	.word	0x080079c7
 8007874:	08007b0d 	.word	0x08007b0d
 8007878:	080079fd 	.word	0x080079fd
 800787c:	08007a1d 	.word	0x08007a1d
 8007880:	08007a3b 	.word	0x08007a3b
 8007884:	08007a7f 	.word	0x08007a7f
 8007888:	08007b4f 	.word	0x08007b4f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 819b 	beq.w	8007bd0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80078a0:	20c8      	movs	r0, #200	@ 0xc8
 80078a2:	f001 fe12 	bl	80094ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fd05 	bl	80092b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078bc:	e188      	b.n	8007bd0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d107      	bne.n	80078d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078d6:	e18a      	b.n	8007bee <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80078de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078e2:	d914      	bls.n	800790e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078ea:	3301      	adds	r3, #1
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d903      	bls.n	8007906 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	220d      	movs	r2, #13
 8007902:	701a      	strb	r2, [r3, #0]
      break;
 8007904:	e173      	b.n	8007bee <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
      break;
 800790c:	e16f      	b.n	8007bee <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007914:	f103 020a 	add.w	r2, r3, #10
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800791e:	200a      	movs	r0, #10
 8007920:	f001 fdd3 	bl	80094ca <USBH_Delay>
      break;
 8007924:	e163      	b.n	8007bee <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007936:	2104      	movs	r1, #4
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800793c:	2064      	movs	r0, #100	@ 0x64
 800793e:	f001 fdc4 	bl	80094ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fc90 	bl	8009268 <USBH_LL_GetSpeed>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2205      	movs	r2, #5
 8007956:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007958:	2100      	movs	r1, #0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 fa9b 	bl	8008e96 <USBH_AllocPipe>
 8007960:	4603      	mov	r3, r0
 8007962:	461a      	mov	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007968:	2180      	movs	r1, #128	@ 0x80
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fa93 	bl	8008e96 <USBH_AllocPipe>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	7919      	ldrb	r1, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800798c:	9202      	str	r2, [sp, #8]
 800798e:	2200      	movs	r2, #0
 8007990:	9201      	str	r2, [sp, #4]
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	4603      	mov	r3, r0
 8007996:	2280      	movs	r2, #128	@ 0x80
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fa4d 	bl	8008e38 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7959      	ldrb	r1, [r3, #5]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079b2:	9202      	str	r2, [sp, #8]
 80079b4:	2200      	movs	r2, #0
 80079b6:	9201      	str	r2, [sp, #4]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4603      	mov	r3, r0
 80079bc:	2200      	movs	r2, #0
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 fa3a 	bl	8008e38 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079c4:	e113      	b.n	8007bee <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f916 	bl	8007bf8 <USBH_HandleEnum>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 80fd 	bne.w	8007bd4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d103      	bne.n	80079f4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2208      	movs	r2, #8
 80079f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079f2:	e0ef      	b.n	8007bd4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2207      	movs	r2, #7
 80079f8:	701a      	strb	r2, [r3, #0]
      break;
 80079fa:	e0eb      	b.n	8007bd4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80e8 	beq.w	8007bd8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a0e:	2101      	movs	r1, #1
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2208      	movs	r2, #8
 8007a18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007a1a:	e0dd      	b.n	8007bd8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fc3a 	bl	800829e <USBH_SetCfg>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 80d5 	bne.w	8007bdc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2209      	movs	r2, #9
 8007a36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a38:	e0d0      	b.n	8007bdc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d016      	beq.n	8007a76 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007a48:	2101      	movs	r1, #1
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fc4a 	bl	80082e4 <USBH_SetFeature>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	220a      	movs	r2, #10
 8007a60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a62:	e0bd      	b.n	8007be0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	f040 80b9 	bne.w	8007be0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	220a      	movs	r2, #10
 8007a72:	701a      	strb	r2, [r3, #0]
      break;
 8007a74:	e0b4      	b.n	8007be0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	220a      	movs	r2, #10
 8007a7a:	701a      	strb	r2, [r3, #0]
      break;
 8007a7c:	e0b0      	b.n	8007be0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80ad 	beq.w	8007be4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a92:	2300      	movs	r3, #0
 8007a94:	73fb      	strb	r3, [r7, #15]
 8007a96:	e016      	b.n	8007ac6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a98:	7bfa      	ldrb	r2, [r7, #15]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32de      	adds	r2, #222	@ 0xde
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	791a      	ldrb	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d108      	bne.n	8007ac0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007aae:	7bfa      	ldrb	r2, [r7, #15]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	32de      	adds	r2, #222	@ 0xde
 8007ab4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007abe:	e005      	b.n	8007acc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	73fb      	strb	r3, [r7, #15]
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0e5      	beq.n	8007a98 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d016      	beq.n	8007b04 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2206      	movs	r2, #6
 8007aec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007af4:	2103      	movs	r1, #3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007afa:	e073      	b.n	8007be4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	220d      	movs	r2, #13
 8007b00:	701a      	strb	r2, [r3, #0]
      break;
 8007b02:	e06f      	b.n	8007be4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	220d      	movs	r2, #13
 8007b08:	701a      	strb	r2, [r3, #0]
      break;
 8007b0a:	e06b      	b.n	8007be4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d017      	beq.n	8007b46 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	220b      	movs	r2, #11
 8007b32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b34:	e058      	b.n	8007be8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d154      	bne.n	8007be8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	220d      	movs	r2, #13
 8007b42:	701a      	strb	r2, [r3, #0]
      break;
 8007b44:	e050      	b.n	8007be8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	220d      	movs	r2, #13
 8007b4a:	701a      	strb	r2, [r3, #0]
      break;
 8007b4c:	e04c      	b.n	8007be8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d049      	beq.n	8007bec <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
      }
      break;
 8007b64:	e042      	b.n	8007bec <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff fd4a 	bl	8007608 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ba2:	2105      	movs	r1, #5
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d107      	bne.n	8007bc4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fe22 	bl	8007806 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bc2:	e014      	b.n	8007bee <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fb19 	bl	80091fc <USBH_LL_Start>
      break;
 8007bca:	e010      	b.n	8007bee <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007bcc:	bf00      	nop
 8007bce:	e00e      	b.n	8007bee <USBH_Process+0x3c6>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e00c      	b.n	8007bee <USBH_Process+0x3c6>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e00a      	b.n	8007bee <USBH_Process+0x3c6>
    break;
 8007bd8:	bf00      	nop
 8007bda:	e008      	b.n	8007bee <USBH_Process+0x3c6>
      break;
 8007bdc:	bf00      	nop
 8007bde:	e006      	b.n	8007bee <USBH_Process+0x3c6>
      break;
 8007be0:	bf00      	nop
 8007be2:	e004      	b.n	8007bee <USBH_Process+0x3c6>
      break;
 8007be4:	bf00      	nop
 8007be6:	e002      	b.n	8007bee <USBH_Process+0x3c6>
      break;
 8007be8:	bf00      	nop
 8007bea:	e000      	b.n	8007bee <USBH_Process+0x3c6>
      break;
 8007bec:	bf00      	nop
  }
  return USBH_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	2b07      	cmp	r3, #7
 8007c0e:	f200 81bd 	bhi.w	8007f8c <USBH_HandleEnum+0x394>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <USBH_HandleEnum+0x20>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007cf3 	.word	0x08007cf3
 8007c20:	08007d5d 	.word	0x08007d5d
 8007c24:	08007de7 	.word	0x08007de7
 8007c28:	08007e51 	.word	0x08007e51
 8007c2c:	08007ec1 	.word	0x08007ec1
 8007c30:	08007f07 	.word	0x08007f07
 8007c34:	08007f4d 	.word	0x08007f4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c38:	2108      	movs	r1, #8
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa4c 	bl	80080d8 <USBH_Get_DevDesc>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d12e      	bne.n	8007ca8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7919      	ldrb	r1, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c6e:	9202      	str	r2, [sp, #8]
 8007c70:	2200      	movs	r2, #0
 8007c72:	9201      	str	r2, [sp, #4]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4603      	mov	r3, r0
 8007c78:	2280      	movs	r2, #128	@ 0x80
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 f8dc 	bl	8008e38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7959      	ldrb	r1, [r3, #5]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c94:	9202      	str	r2, [sp, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	9201      	str	r2, [sp, #4]
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f8c9 	bl	8008e38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ca6:	e173      	b.n	8007f90 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	f040 8170 	bne.w	8007f90 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d903      	bls.n	8007cd2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	220d      	movs	r2, #13
 8007cce:	701a      	strb	r2, [r3, #0]
      break;
 8007cd0:	e15e      	b.n	8007f90 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	795b      	ldrb	r3, [r3, #5]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 f8fd 	bl	8008ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	791b      	ldrb	r3, [r3, #4]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 f8f7 	bl	8008ed8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
      break;
 8007cf0:	e14e      	b.n	8007f90 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007cf2:	2112      	movs	r1, #18
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f9ef 	bl	80080d8 <USBH_Get_DevDesc>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d0a:	e143      	b.n	8007f94 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	f040 8140 	bne.w	8007f94 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d903      	bls.n	8007d36 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	220d      	movs	r2, #13
 8007d32:	701a      	strb	r2, [r3, #0]
      break;
 8007d34:	e12e      	b.n	8007f94 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	795b      	ldrb	r3, [r3, #5]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 f8cb 	bl	8008ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	791b      	ldrb	r3, [r3, #4]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 f8c5 	bl	8008ed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
      break;
 8007d5a:	e11b      	b.n	8007f94 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa79 	bl	8008256 <USBH_SetAddress>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d130      	bne.n	8007dd0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007d6e:	2002      	movs	r0, #2
 8007d70:	f001 fbab 	bl	80094ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7919      	ldrb	r1, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d96:	9202      	str	r2, [sp, #8]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9201      	str	r2, [sp, #4]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2280      	movs	r2, #128	@ 0x80
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 f848 	bl	8008e38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	7959      	ldrb	r1, [r3, #5]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dbc:	9202      	str	r2, [sp, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	9201      	str	r2, [sp, #4]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 f835 	bl	8008e38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dce:	e0e3      	b.n	8007f98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	f040 80e0 	bne.w	8007f98 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	220d      	movs	r2, #13
 8007ddc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	705a      	strb	r2, [r3, #1]
      break;
 8007de4:	e0d8      	b.n	8007f98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007de6:	2109      	movs	r1, #9
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f9a1 	bl	8008130 <USBH_Get_CfgDesc>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d103      	bne.n	8007e00 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007dfe:	e0cd      	b.n	8007f9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	f040 80ca 	bne.w	8007f9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e0e:	3301      	adds	r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d903      	bls.n	8007e2a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	220d      	movs	r2, #13
 8007e26:	701a      	strb	r2, [r3, #0]
      break;
 8007e28:	e0b8      	b.n	8007f9c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	795b      	ldrb	r3, [r3, #5]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f851 	bl	8008ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	791b      	ldrb	r3, [r3, #4]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f84b 	bl	8008ed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
      break;
 8007e4e:	e0a5      	b.n	8007f9c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f969 	bl	8008130 <USBH_Get_CfgDesc>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2205      	movs	r2, #5
 8007e6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e6e:	e097      	b.n	8007fa0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	f040 8094 	bne.w	8007fa0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e7e:	3301      	adds	r3, #1
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d903      	bls.n	8007e9a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	220d      	movs	r2, #13
 8007e96:	701a      	strb	r2, [r3, #0]
      break;
 8007e98:	e082      	b.n	8007fa0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	795b      	ldrb	r3, [r3, #5]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 f819 	bl	8008ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	791b      	ldrb	r3, [r3, #4]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 f813 	bl	8008ed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
      break;
 8007ebe:	e06f      	b.n	8007fa0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d019      	beq.n	8007efe <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ed6:	23ff      	movs	r3, #255	@ 0xff
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f953 	bl	8008184 <USBH_Get_StringDesc>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2206      	movs	r2, #6
 8007eec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007eee:	e059      	b.n	8007fa4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d156      	bne.n	8007fa4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2206      	movs	r2, #6
 8007efa:	705a      	strb	r2, [r3, #1]
      break;
 8007efc:	e052      	b.n	8007fa4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2206      	movs	r2, #6
 8007f02:	705a      	strb	r2, [r3, #1]
      break;
 8007f04:	e04e      	b.n	8007fa4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d019      	beq.n	8007f44 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f1c:	23ff      	movs	r3, #255	@ 0xff
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f930 	bl	8008184 <USBH_Get_StringDesc>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2207      	movs	r2, #7
 8007f32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f34:	e038      	b.n	8007fa8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d135      	bne.n	8007fa8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2207      	movs	r2, #7
 8007f40:	705a      	strb	r2, [r3, #1]
      break;
 8007f42:	e031      	b.n	8007fa8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2207      	movs	r2, #7
 8007f48:	705a      	strb	r2, [r3, #1]
      break;
 8007f4a:	e02d      	b.n	8007fa8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d017      	beq.n	8007f86 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f62:	23ff      	movs	r3, #255	@ 0xff
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f90d 	bl	8008184 <USBH_Get_StringDesc>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f78:	e018      	b.n	8007fac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d115      	bne.n	8007fac <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	e012      	b.n	8007fac <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8a:	e00f      	b.n	8007fac <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007f8c:	bf00      	nop
 8007f8e:	e00e      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007f90:	bf00      	nop
 8007f92:	e00c      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007f94:	bf00      	nop
 8007f96:	e00a      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007f98:	bf00      	nop
 8007f9a:	e008      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007f9c:	bf00      	nop
 8007f9e:	e006      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007fa0:	bf00      	nop
 8007fa2:	e004      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <USBH_HandleEnum+0x3b6>
      break;
 8007fac:	bf00      	nop
  }
  return Status;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f804 	bl	8007ffa <USBH_HandleSof>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b0b      	cmp	r3, #11
 800800a:	d10a      	bne.n	8008022 <USBH_HandleSof+0x28>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
  }
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800803a:	bf00      	nop
}
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008056:	bf00      	nop
}
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f8be 	bl	8009232 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	791b      	ldrb	r3, [r3, #4]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 ff0b 	bl	8008ed8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	795b      	ldrb	r3, [r3, #5]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 ff05 	bl	8008ed8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af02      	add	r7, sp, #8
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80080e4:	887b      	ldrh	r3, [r7, #2]
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ea:	d901      	bls.n	80080f0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e01b      	b.n	8008128 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80080f6:	887b      	ldrh	r3, [r7, #2]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	4613      	mov	r3, r2
 80080fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008100:	2100      	movs	r1, #0
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f872 	bl	80081ec <USBH_GetDescriptor>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008118:	887a      	ldrh	r2, [r7, #2]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f929 	bl	8008374 <USBH_ParseDevDesc>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af02      	add	r7, sp, #8
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	331c      	adds	r3, #28
 8008140:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008142:	887b      	ldrh	r3, [r7, #2]
 8008144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008148:	d901      	bls.n	800814e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800814a:	2303      	movs	r3, #3
 800814c:	e016      	b.n	800817c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800814e:	887b      	ldrh	r3, [r7, #2]
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f846 	bl	80081ec <USBH_GetDescriptor>
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d107      	bne.n	800817a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800816a:	887b      	ldrh	r3, [r7, #2]
 800816c:	461a      	mov	r2, r3
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f9af 	bl	80084d4 <USBH_ParseCfgDesc>
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	461a      	mov	r2, r3
 8008190:	460b      	mov	r3, r1
 8008192:	72fb      	strb	r3, [r7, #11]
 8008194:	4613      	mov	r3, r2
 8008196:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008198:	893b      	ldrh	r3, [r7, #8]
 800819a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800819e:	d802      	bhi.n	80081a6 <USBH_Get_StringDesc+0x22>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e01c      	b.n	80081e4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80081b2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80081ba:	893b      	ldrh	r3, [r7, #8]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	460b      	mov	r3, r1
 80081c0:	2100      	movs	r1, #0
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f812 	bl	80081ec <USBH_GetDescriptor>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d107      	bne.n	80081e2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80081d8:	893a      	ldrh	r2, [r7, #8]
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fb8d 	bl	80088fc <USBH_ParseStringDesc>
  }

  return status;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	72fb      	strb	r3, [r7, #11]
 80081fa:	4613      	mov	r3, r2
 80081fc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	789b      	ldrb	r3, [r3, #2]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d11c      	bne.n	8008240 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008206:	7afb      	ldrb	r3, [r7, #11]
 8008208:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800820c:	b2da      	uxtb	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2206      	movs	r2, #6
 8008216:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	893a      	ldrh	r2, [r7, #8]
 800821c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800821e:	893b      	ldrh	r3, [r7, #8]
 8008220:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008228:	d104      	bne.n	8008234 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f240 4209 	movw	r2, #1033	@ 0x409
 8008230:	829a      	strh	r2, [r3, #20]
 8008232:	e002      	b.n	800823a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8b3a      	ldrh	r2, [r7, #24]
 800823e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008240:	8b3b      	ldrh	r3, [r7, #24]
 8008242:	461a      	mov	r2, r3
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fba5 	bl	8008996 <USBH_CtlReq>
 800824c:	4603      	mov	r3, r0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	789b      	ldrb	r3, [r3, #2]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d10f      	bne.n	800828a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2205      	movs	r2, #5
 8008274:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fb81 	bl	8008996 <USBH_CtlReq>
 8008294:	4603      	mov	r3, r0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	789b      	ldrb	r3, [r3, #2]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d10e      	bne.n	80082d0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2209      	movs	r2, #9
 80082bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	887a      	ldrh	r2, [r7, #2]
 80082c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80082d0:	2200      	movs	r2, #0
 80082d2:	2100      	movs	r1, #0
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fb5e 	bl	8008996 <USBH_CtlReq>
 80082da:	4603      	mov	r3, r0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	789b      	ldrb	r3, [r3, #2]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d10f      	bne.n	8008318 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2203      	movs	r2, #3
 8008302:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008318:	2200      	movs	r2, #0
 800831a:	2100      	movs	r1, #0
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb3a 	bl	8008996 <USBH_CtlReq>
 8008322:	4603      	mov	r3, r0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	789b      	ldrb	r3, [r3, #2]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d10f      	bne.n	8008360 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008360:	2200      	movs	r2, #0
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fb16 	bl	8008996 <USBH_CtlReq>
 800836a:	4603      	mov	r3, r0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008388:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008394:	2302      	movs	r3, #2
 8008396:	e094      	b.n	80084c2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	785a      	ldrb	r2, [r3, #1]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	3302      	adds	r3, #2
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	3303      	adds	r3, #3
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	791a      	ldrb	r2, [r3, #4]
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	795a      	ldrb	r2, [r3, #5]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	799a      	ldrb	r2, [r3, #6]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	79da      	ldrb	r2, [r3, #7]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d11b      	bne.n	800842e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	79db      	ldrb	r3, [r3, #7]
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	dc0f      	bgt.n	800841e <USBH_ParseDevDesc+0xaa>
 80083fe:	2b08      	cmp	r3, #8
 8008400:	db0f      	blt.n	8008422 <USBH_ParseDevDesc+0xae>
 8008402:	3b08      	subs	r3, #8
 8008404:	4a32      	ldr	r2, [pc, #200]	@ (80084d0 <USBH_ParseDevDesc+0x15c>)
 8008406:	fa22 f303 	lsr.w	r3, r2, r3
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	bf14      	ite	ne
 8008412:	2301      	movne	r3, #1
 8008414:	2300      	moveq	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <USBH_ParseDevDesc+0xb6>
 800841c:	e001      	b.n	8008422 <USBH_ParseDevDesc+0xae>
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d003      	beq.n	800842a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2208      	movs	r2, #8
 8008426:	71da      	strb	r2, [r3, #7]
        break;
 8008428:	e000      	b.n	800842c <USBH_ParseDevDesc+0xb8>
        break;
 800842a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800842c:	e00e      	b.n	800844c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008434:	2b02      	cmp	r3, #2
 8008436:	d107      	bne.n	8008448 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	79db      	ldrb	r3, [r3, #7]
 800843c:	2b08      	cmp	r3, #8
 800843e:	d005      	beq.n	800844c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2208      	movs	r2, #8
 8008444:	71da      	strb	r2, [r3, #7]
 8008446:	e001      	b.n	800844c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008448:	2303      	movs	r3, #3
 800844a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	2b08      	cmp	r3, #8
 8008450:	d936      	bls.n	80084c0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	3308      	adds	r3, #8
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	3309      	adds	r3, #9
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	b29b      	uxth	r3, r3
 8008464:	4313      	orrs	r3, r2
 8008466:	b29a      	uxth	r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	330a      	adds	r3, #10
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	330b      	adds	r3, #11
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	b29b      	uxth	r3, r3
 800847e:	4313      	orrs	r3, r2
 8008480:	b29a      	uxth	r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	330c      	adds	r3, #12
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	330d      	adds	r3, #13
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	b29b      	uxth	r3, r3
 8008498:	4313      	orrs	r3, r2
 800849a:	b29a      	uxth	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	7b9a      	ldrb	r2, [r3, #14]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	7bda      	ldrb	r2, [r3, #15]
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	7c1a      	ldrb	r2, [r3, #16]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	7c5a      	ldrb	r2, [r3, #17]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	01000101 	.word	0x01000101

080084d4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08c      	sub	sp, #48	@ 0x30
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80084e8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008502:	2302      	movs	r3, #2
 8008504:	e0da      	b.n	80086bc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b09      	cmp	r3, #9
 8008510:	d002      	beq.n	8008518 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	2209      	movs	r2, #9
 8008516:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	781a      	ldrb	r2, [r3, #0]
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	785a      	ldrb	r2, [r3, #1]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	3302      	adds	r3, #2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	3303      	adds	r3, #3
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	021b      	lsls	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	4313      	orrs	r3, r2
 800853c:	b29b      	uxth	r3, r3
 800853e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008542:	bf28      	it	cs
 8008544:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008548:	b29a      	uxth	r2, r3
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	791a      	ldrb	r2, [r3, #4]
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	795a      	ldrb	r2, [r3, #5]
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	799a      	ldrb	r2, [r3, #6]
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	79da      	ldrb	r2, [r3, #7]
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	7a1a      	ldrb	r2, [r3, #8]
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b09      	cmp	r3, #9
 800857a:	f240 809d 	bls.w	80086b8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800857e:	2309      	movs	r3, #9
 8008580:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008586:	e081      	b.n	800868c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008588:	f107 0316 	add.w	r3, r7, #22
 800858c:	4619      	mov	r1, r3
 800858e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008590:	f000 f9e7 	bl	8008962 <USBH_GetNextDesc>
 8008594:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	2b04      	cmp	r3, #4
 800859c:	d176      	bne.n	800868c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800859e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b09      	cmp	r3, #9
 80085a4:	d002      	beq.n	80085ac <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80085a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a8:	2209      	movs	r2, #9
 80085aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80085ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085b0:	221a      	movs	r2, #26
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
 80085b6:	3308      	adds	r3, #8
 80085b8:	6a3a      	ldr	r2, [r7, #32]
 80085ba:	4413      	add	r3, r2
 80085bc:	3302      	adds	r3, #2
 80085be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80085c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085c2:	69f8      	ldr	r0, [r7, #28]
 80085c4:	f000 f87e 	bl	80086c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80085d2:	e043      	b.n	800865c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085d4:	f107 0316 	add.w	r3, r7, #22
 80085d8:	4619      	mov	r1, r3
 80085da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085dc:	f000 f9c1 	bl	8008962 <USBH_GetNextDesc>
 80085e0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	d138      	bne.n	800865c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	795b      	ldrb	r3, [r3, #5]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d113      	bne.n	800861a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d003      	beq.n	8008602 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	799b      	ldrb	r3, [r3, #6]
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d10b      	bne.n	800861a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	79db      	ldrb	r3, [r3, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10b      	bne.n	8008622 <USBH_ParseCfgDesc+0x14e>
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b09      	cmp	r3, #9
 8008610:	d007      	beq.n	8008622 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008614:	2209      	movs	r2, #9
 8008616:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008618:	e003      	b.n	8008622 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861c:	2207      	movs	r2, #7
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	e000      	b.n	8008624 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008622:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008628:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800862c:	3201      	adds	r2, #1
 800862e:	00d2      	lsls	r2, r2, #3
 8008630:	211a      	movs	r1, #26
 8008632:	fb01 f303 	mul.w	r3, r1, r3
 8008636:	4413      	add	r3, r2
 8008638:	3308      	adds	r3, #8
 800863a:	6a3a      	ldr	r2, [r7, #32]
 800863c:	4413      	add	r3, r2
 800863e:	3304      	adds	r3, #4
 8008640:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f870 	bl	800872c <USBH_ParseEPDesc>
 800864c:	4603      	mov	r3, r0
 800864e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008652:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008656:	3301      	adds	r3, #1
 8008658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	791b      	ldrb	r3, [r3, #4]
 8008660:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008664:	429a      	cmp	r2, r3
 8008666:	d204      	bcs.n	8008672 <USBH_ParseCfgDesc+0x19e>
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	885a      	ldrh	r2, [r3, #2]
 800866c:	8afb      	ldrh	r3, [r7, #22]
 800866e:	429a      	cmp	r2, r3
 8008670:	d8b0      	bhi.n	80085d4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	791b      	ldrb	r3, [r3, #4]
 8008676:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800867a:	429a      	cmp	r2, r3
 800867c:	d201      	bcs.n	8008682 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800867e:	2303      	movs	r3, #3
 8008680:	e01c      	b.n	80086bc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008686:	3301      	adds	r3, #1
 8008688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800868c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008690:	2b01      	cmp	r3, #1
 8008692:	d805      	bhi.n	80086a0 <USBH_ParseCfgDesc+0x1cc>
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	885a      	ldrh	r2, [r3, #2]
 8008698:	8afb      	ldrh	r3, [r7, #22]
 800869a:	429a      	cmp	r2, r3
 800869c:	f63f af74 	bhi.w	8008588 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	bf28      	it	cs
 80086a8:	2302      	movcs	r3, #2
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d201      	bcs.n	80086b8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e001      	b.n	80086bc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80086b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3730      	adds	r7, #48	@ 0x30
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	785a      	ldrb	r2, [r3, #1]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	789a      	ldrb	r2, [r3, #2]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	78da      	ldrb	r2, [r3, #3]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	3304      	adds	r3, #4
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	bf28      	it	cs
 80086f8:	2302      	movcs	r3, #2
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	795a      	ldrb	r2, [r3, #5]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	799a      	ldrb	r2, [r3, #6]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	79da      	ldrb	r2, [r3, #7]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	7a1a      	ldrb	r2, [r3, #8]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	721a      	strb	r2, [r3, #8]
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	781a      	ldrb	r2, [r3, #0]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	785a      	ldrb	r2, [r3, #1]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	789a      	ldrb	r2, [r3, #2]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	78da      	ldrb	r2, [r3, #3]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3305      	adds	r3, #5
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	b29b      	uxth	r3, r3
 800876e:	4313      	orrs	r3, r2
 8008770:	b29a      	uxth	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	799a      	ldrb	r2, [r3, #6]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	889b      	ldrh	r3, [r3, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d009      	beq.n	800879a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800878a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800878e:	d804      	bhi.n	800879a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008798:	d901      	bls.n	800879e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800879a:	2303      	movs	r3, #3
 800879c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d136      	bne.n	8008816 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	78db      	ldrb	r3, [r3, #3]
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d108      	bne.n	80087c6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	889b      	ldrh	r3, [r3, #4]
 80087b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087bc:	f240 8097 	bls.w	80088ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087c0:	2303      	movs	r3, #3
 80087c2:	75fb      	strb	r3, [r7, #23]
 80087c4:	e093      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	78db      	ldrb	r3, [r3, #3]
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	889b      	ldrh	r3, [r3, #4]
 80087d6:	2b40      	cmp	r3, #64	@ 0x40
 80087d8:	f240 8089 	bls.w	80088ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087dc:	2303      	movs	r3, #3
 80087de:	75fb      	strb	r3, [r7, #23]
 80087e0:	e085      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	78db      	ldrb	r3, [r3, #3]
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d005      	beq.n	80087fa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	78db      	ldrb	r3, [r3, #3]
 80087f2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d10a      	bne.n	8008810 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	799b      	ldrb	r3, [r3, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <USBH_ParseEPDesc+0xde>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	799b      	ldrb	r3, [r3, #6]
 8008806:	2b10      	cmp	r3, #16
 8008808:	d970      	bls.n	80088ec <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800880a:	2303      	movs	r3, #3
 800880c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800880e:	e06d      	b.n	80088ec <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008810:	2303      	movs	r3, #3
 8008812:	75fb      	strb	r3, [r7, #23]
 8008814:	e06b      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800881c:	2b01      	cmp	r3, #1
 800881e:	d13c      	bne.n	800889a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	78db      	ldrb	r3, [r3, #3]
 8008824:	f003 0303 	and.w	r3, r3, #3
 8008828:	2b02      	cmp	r3, #2
 800882a:	d005      	beq.n	8008838 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	78db      	ldrb	r3, [r3, #3]
 8008830:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	889b      	ldrh	r3, [r3, #4]
 800883c:	2b40      	cmp	r3, #64	@ 0x40
 800883e:	d956      	bls.n	80088ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008840:	2303      	movs	r3, #3
 8008842:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008844:	e053      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	78db      	ldrb	r3, [r3, #3]
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10e      	bne.n	8008870 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	799b      	ldrb	r3, [r3, #6]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800885e:	2b10      	cmp	r3, #16
 8008860:	d803      	bhi.n	800886a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008866:	2b40      	cmp	r3, #64	@ 0x40
 8008868:	d941      	bls.n	80088ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800886a:	2303      	movs	r3, #3
 800886c:	75fb      	strb	r3, [r7, #23]
 800886e:	e03e      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	78db      	ldrb	r3, [r3, #3]
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	2b03      	cmp	r3, #3
 800887a:	d10b      	bne.n	8008894 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	799b      	ldrb	r3, [r3, #6]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <USBH_ParseEPDesc+0x162>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	889b      	ldrh	r3, [r3, #4]
 8008888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800888c:	d32f      	bcc.n	80088ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800888e:	2303      	movs	r3, #3
 8008890:	75fb      	strb	r3, [r7, #23]
 8008892:	e02c      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008894:	2303      	movs	r3, #3
 8008896:	75fb      	strb	r3, [r7, #23]
 8008898:	e029      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d120      	bne.n	80088e6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	78db      	ldrb	r3, [r3, #3]
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d106      	bne.n	80088be <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	889b      	ldrh	r3, [r3, #4]
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d01a      	beq.n	80088ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088b8:	2303      	movs	r3, #3
 80088ba:	75fb      	strb	r3, [r7, #23]
 80088bc:	e017      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	78db      	ldrb	r3, [r3, #3]
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d10a      	bne.n	80088e0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	799b      	ldrb	r3, [r3, #6]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <USBH_ParseEPDesc+0x1ae>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	889b      	ldrh	r3, [r3, #4]
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	d909      	bls.n	80088ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088da:	2303      	movs	r3, #3
 80088dc:	75fb      	strb	r3, [r7, #23]
 80088de:	e006      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80088e0:	2303      	movs	r3, #3
 80088e2:	75fb      	strb	r3, [r7, #23]
 80088e4:	e003      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80088e6:	2303      	movs	r3, #3
 80088e8:	75fb      	strb	r3, [r7, #23]
 80088ea:	e000      	b.n	80088ee <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088ec:	bf00      	nop
  }

  return status;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3301      	adds	r3, #1
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b03      	cmp	r3, #3
 8008912:	d120      	bne.n	8008956 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	1e9a      	subs	r2, r3, #2
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	4293      	cmp	r3, r2
 800891e:	bf28      	it	cs
 8008920:	4613      	movcs	r3, r2
 8008922:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3302      	adds	r3, #2
 8008928:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800892a:	2300      	movs	r3, #0
 800892c:	82fb      	strh	r3, [r7, #22]
 800892e:	e00b      	b.n	8008948 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008930:	8afb      	ldrh	r3, [r7, #22]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	781a      	ldrb	r2, [r3, #0]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	3301      	adds	r3, #1
 8008940:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008942:	8afb      	ldrh	r3, [r7, #22]
 8008944:	3302      	adds	r3, #2
 8008946:	82fb      	strh	r3, [r7, #22]
 8008948:	8afa      	ldrh	r2, [r7, #22]
 800894a:	8abb      	ldrh	r3, [r7, #20]
 800894c:	429a      	cmp	r2, r3
 800894e:	d3ef      	bcc.n	8008930 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
  }
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008962:	b480      	push	{r7}
 8008964:	b085      	sub	sp, #20
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	7812      	ldrb	r2, [r2, #0]
 8008974:	4413      	add	r3, r2
 8008976:	b29a      	uxth	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4413      	add	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008988:	68fb      	ldr	r3, [r7, #12]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b086      	sub	sp, #24
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80089a4:	2301      	movs	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	789b      	ldrb	r3, [r3, #2]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d002      	beq.n	80089b6 <USBH_CtlReq+0x20>
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d00f      	beq.n	80089d4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80089b4:	e027      	b.n	8008a06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	88fa      	ldrh	r2, [r7, #6]
 80089c0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2202      	movs	r2, #2
 80089cc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80089ce:	2301      	movs	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]
      break;
 80089d2:	e018      	b.n	8008a06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f81b 	bl	8008a10 <USBH_HandleControl>
 80089da:	4603      	mov	r3, r0
 80089dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <USBH_CtlReq+0x54>
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d106      	bne.n	80089f8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	761a      	strb	r2, [r3, #24]
      break;
 80089f6:	e005      	b.n	8008a04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d102      	bne.n	8008a04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	709a      	strb	r2, [r3, #2]
      break;
 8008a04:	bf00      	nop
  }
  return status;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7e1b      	ldrb	r3, [r3, #24]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	2b0a      	cmp	r3, #10
 8008a28:	f200 8156 	bhi.w	8008cd8 <USBH_HandleControl+0x2c8>
 8008a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a34 <USBH_HandleControl+0x24>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	08008a7b 	.word	0x08008a7b
 8008a3c:	08008ae5 	.word	0x08008ae5
 8008a40:	08008b0b 	.word	0x08008b0b
 8008a44:	08008b43 	.word	0x08008b43
 8008a48:	08008b6d 	.word	0x08008b6d
 8008a4c:	08008bbf 	.word	0x08008bbf
 8008a50:	08008be1 	.word	0x08008be1
 8008a54:	08008c1d 	.word	0x08008c1d
 8008a58:	08008c43 	.word	0x08008c43
 8008a5c:	08008c81 	.word	0x08008c81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 0110 	add.w	r1, r3, #16
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	795b      	ldrb	r3, [r3, #5]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f943 	bl	8008cf8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	761a      	strb	r2, [r3, #24]
      break;
 8008a78:	e139      	b.n	8008cee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	795b      	ldrb	r3, [r3, #5]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fcc5 	bl	8009410 <USBH_LL_GetURBState>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d11e      	bne.n	8008ace <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7c1b      	ldrb	r3, [r3, #16]
 8008a94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	8adb      	ldrh	r3, [r3, #22]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008aa2:	7b7b      	ldrb	r3, [r7, #13]
 8008aa4:	2b80      	cmp	r3, #128	@ 0x80
 8008aa6:	d103      	bne.n	8008ab0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008aae:	e115      	b.n	8008cdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2205      	movs	r2, #5
 8008ab4:	761a      	strb	r2, [r3, #24]
      break;
 8008ab6:	e111      	b.n	8008cdc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008ab8:	7b7b      	ldrb	r3, [r7, #13]
 8008aba:	2b80      	cmp	r3, #128	@ 0x80
 8008abc:	d103      	bne.n	8008ac6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2209      	movs	r2, #9
 8008ac2:	761a      	strb	r2, [r3, #24]
      break;
 8008ac4:	e10a      	b.n	8008cdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2207      	movs	r2, #7
 8008aca:	761a      	strb	r2, [r3, #24]
      break;
 8008acc:	e106      	b.n	8008cdc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d003      	beq.n	8008adc <USBH_HandleControl+0xcc>
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	f040 8100 	bne.w	8008cdc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	220b      	movs	r2, #11
 8008ae0:	761a      	strb	r2, [r3, #24]
      break;
 8008ae2:	e0fb      	b.n	8008cdc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6899      	ldr	r1, [r3, #8]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	899a      	ldrh	r2, [r3, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f93a 	bl	8008d76 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2204      	movs	r2, #4
 8008b06:	761a      	strb	r2, [r3, #24]
      break;
 8008b08:	e0f1      	b.n	8008cee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fc7d 	bl	8009410 <USBH_LL_GetURBState>
 8008b16:	4603      	mov	r3, r0
 8008b18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b1a:	7bbb      	ldrb	r3, [r7, #14]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d102      	bne.n	8008b26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2209      	movs	r2, #9
 8008b24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	d102      	bne.n	8008b32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b30:	e0d6      	b.n	8008ce0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	f040 80d3 	bne.w	8008ce0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	220b      	movs	r2, #11
 8008b3e:	761a      	strb	r2, [r3, #24]
      break;
 8008b40:	e0ce      	b.n	8008ce0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6899      	ldr	r1, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	899a      	ldrh	r2, [r3, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	795b      	ldrb	r3, [r3, #5]
 8008b4e:	2001      	movs	r0, #1
 8008b50:	9000      	str	r0, [sp, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f8ea 	bl	8008d2c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2206      	movs	r2, #6
 8008b68:	761a      	strb	r2, [r3, #24]
      break;
 8008b6a:	e0c0      	b.n	8008cee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	795b      	ldrb	r3, [r3, #5]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fc4c 	bl	8009410 <USBH_LL_GetURBState>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d103      	bne.n	8008b8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2207      	movs	r2, #7
 8008b86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b88:	e0ac      	b.n	8008ce4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	d105      	bne.n	8008b9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	220c      	movs	r2, #12
 8008b94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b96:	2303      	movs	r3, #3
 8008b98:	73fb      	strb	r3, [r7, #15]
      break;
 8008b9a:	e0a3      	b.n	8008ce4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d103      	bne.n	8008baa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	761a      	strb	r2, [r3, #24]
      break;
 8008ba8:	e09c      	b.n	8008ce4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	f040 8099 	bne.w	8008ce4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	220b      	movs	r2, #11
 8008bb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	e092      	b.n	8008ce4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	791b      	ldrb	r3, [r3, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f8d5 	bl	8008d76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2208      	movs	r2, #8
 8008bdc:	761a      	strb	r2, [r3, #24]

      break;
 8008bde:	e086      	b.n	8008cee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	791b      	ldrb	r3, [r3, #4]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fc12 	bl	8009410 <USBH_LL_GetURBState>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d105      	bne.n	8008c02 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	220d      	movs	r2, #13
 8008bfa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c00:	e072      	b.n	8008ce8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d103      	bne.n	8008c10 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	220b      	movs	r2, #11
 8008c0c:	761a      	strb	r2, [r3, #24]
      break;
 8008c0e:	e06b      	b.n	8008ce8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d168      	bne.n	8008ce8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008c16:	2303      	movs	r3, #3
 8008c18:	73fb      	strb	r3, [r7, #15]
      break;
 8008c1a:	e065      	b.n	8008ce8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	795b      	ldrb	r3, [r3, #5]
 8008c20:	2201      	movs	r2, #1
 8008c22:	9200      	str	r2, [sp, #0]
 8008c24:	2200      	movs	r2, #0
 8008c26:	2100      	movs	r1, #0
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f87f 	bl	8008d2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	220a      	movs	r2, #10
 8008c3e:	761a      	strb	r2, [r3, #24]
      break;
 8008c40:	e055      	b.n	8008cee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	795b      	ldrb	r3, [r3, #5]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fbe1 	bl	8009410 <USBH_LL_GetURBState>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d105      	bne.n	8008c64 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	220d      	movs	r2, #13
 8008c60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c62:	e043      	b.n	8008cec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d103      	bne.n	8008c72 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2209      	movs	r2, #9
 8008c6e:	761a      	strb	r2, [r3, #24]
      break;
 8008c70:	e03c      	b.n	8008cec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d139      	bne.n	8008cec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	220b      	movs	r2, #11
 8008c7c:	761a      	strb	r2, [r3, #24]
      break;
 8008c7e:	e035      	b.n	8008cec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	7e5b      	ldrb	r3, [r3, #25]
 8008c84:	3301      	adds	r3, #1
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	765a      	strb	r2, [r3, #25]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	7e5b      	ldrb	r3, [r3, #25]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d806      	bhi.n	8008ca2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ca0:	e025      	b.n	8008cee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ca8:	2106      	movs	r1, #6
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	795b      	ldrb	r3, [r3, #5]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f90c 	bl	8008ed8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	791b      	ldrb	r3, [r3, #4]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f906 	bl	8008ed8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd6:	e00a      	b.n	8008cee <USBH_HandleControl+0x2de>

    default:
      break;
 8008cd8:	bf00      	nop
 8008cda:	e008      	b.n	8008cee <USBH_HandleControl+0x2de>
      break;
 8008cdc:	bf00      	nop
 8008cde:	e006      	b.n	8008cee <USBH_HandleControl+0x2de>
      break;
 8008ce0:	bf00      	nop
 8008ce2:	e004      	b.n	8008cee <USBH_HandleControl+0x2de>
      break;
 8008ce4:	bf00      	nop
 8008ce6:	e002      	b.n	8008cee <USBH_HandleControl+0x2de>
      break;
 8008ce8:	bf00      	nop
 8008cea:	e000      	b.n	8008cee <USBH_HandleControl+0x2de>
      break;
 8008cec:	bf00      	nop
  }

  return status;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af04      	add	r7, sp, #16
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	4613      	mov	r3, r2
 8008d04:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d06:	79f9      	ldrb	r1, [r7, #7]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9303      	str	r3, [sp, #12]
 8008d0c:	2308      	movs	r3, #8
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	2300      	movs	r3, #0
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fb46 	bl	80093ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b088      	sub	sp, #32
 8008d30:	af04      	add	r7, sp, #16
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4611      	mov	r1, r2
 8008d38:	461a      	mov	r2, r3
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	80fb      	strh	r3, [r7, #6]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d50:	7979      	ldrb	r1, [r7, #5]
 8008d52:	7e3b      	ldrb	r3, [r7, #24]
 8008d54:	9303      	str	r3, [sp, #12]
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	2301      	movs	r3, #1
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	2200      	movs	r2, #0
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fb21 	bl	80093ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b088      	sub	sp, #32
 8008d7a:	af04      	add	r7, sp, #16
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	4611      	mov	r1, r2
 8008d82:	461a      	mov	r2, r3
 8008d84:	460b      	mov	r3, r1
 8008d86:	80fb      	strh	r3, [r7, #6]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d8c:	7979      	ldrb	r1, [r7, #5]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9303      	str	r3, [sp, #12]
 8008d92:	88fb      	ldrh	r3, [r7, #6]
 8008d94:	9302      	str	r3, [sp, #8]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2201      	movs	r2, #1
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fb03 	bl	80093ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008da8:	2300      	movs	r3, #0

}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b088      	sub	sp, #32
 8008db6:	af04      	add	r7, sp, #16
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	80fb      	strh	r3, [r7, #6]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dd6:	7979      	ldrb	r1, [r7, #5]
 8008dd8:	7e3b      	ldrb	r3, [r7, #24]
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	88fb      	ldrh	r3, [r7, #6]
 8008dde:	9302      	str	r3, [sp, #8]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	2301      	movs	r3, #1
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	2302      	movs	r3, #2
 8008dea:	2200      	movs	r2, #0
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 fade 	bl	80093ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af04      	add	r7, sp, #16
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4611      	mov	r1, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	80fb      	strh	r3, [r7, #6]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e12:	7979      	ldrb	r1, [r7, #5]
 8008e14:	2300      	movs	r3, #0
 8008e16:	9303      	str	r3, [sp, #12]
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	9302      	str	r3, [sp, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	2301      	movs	r3, #1
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	2302      	movs	r3, #2
 8008e26:	2201      	movs	r2, #1
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fac0 	bl	80093ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af04      	add	r7, sp, #16
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	4608      	mov	r0, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	461a      	mov	r2, r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	70fb      	strb	r3, [r7, #3]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70bb      	strb	r3, [r7, #2]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e52:	7878      	ldrb	r0, [r7, #1]
 8008e54:	78ba      	ldrb	r2, [r7, #2]
 8008e56:	78f9      	ldrb	r1, [r7, #3]
 8008e58:	8b3b      	ldrh	r3, [r7, #24]
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	7d3b      	ldrb	r3, [r7, #20]
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	7c3b      	ldrb	r3, [r7, #16]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	4603      	mov	r3, r0
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa53 	bl	8009312 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa72 	bl	8009370 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f836 	bl	8008f14 <USBH_GetFreePipe>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008eac:	89fb      	ldrh	r3, [r7, #14]
 8008eae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00a      	beq.n	8008ecc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	89fb      	ldrh	r3, [r7, #14]
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	33e0      	adds	r3, #224	@ 0xe0
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ecc:	89fb      	ldrh	r3, [r7, #14]
 8008ece:	b2db      	uxtb	r3, r3
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b0f      	cmp	r3, #15
 8008ee8:	d80d      	bhi.n	8008f06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	33e0      	adds	r3, #224	@ 0xe0
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	33e0      	adds	r3, #224	@ 0xe0
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
 8008f24:	e00f      	b.n	8008f46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	33e0      	adds	r3, #224	@ 0xe0
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d102      	bne.n	8008f40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	e007      	b.n	8008f50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	3301      	adds	r3, #1
 8008f44:	73fb      	strb	r3, [r7, #15]
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b0f      	cmp	r3, #15
 8008f4a:	d9ec      	bls.n	8008f26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008f60:	2201      	movs	r2, #1
 8008f62:	490e      	ldr	r1, [pc, #56]	@ (8008f9c <MX_USB_HOST_Init+0x40>)
 8008f64:	480e      	ldr	r0, [pc, #56]	@ (8008fa0 <MX_USB_HOST_Init+0x44>)
 8008f66:	f7fe fb15 	bl	8007594 <USBH_Init>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008f70:	f7f8 f99a 	bl	80012a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008f74:	490b      	ldr	r1, [pc, #44]	@ (8008fa4 <MX_USB_HOST_Init+0x48>)
 8008f76:	480a      	ldr	r0, [pc, #40]	@ (8008fa0 <MX_USB_HOST_Init+0x44>)
 8008f78:	f7fe fbb9 	bl	80076ee <USBH_RegisterClass>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008f82:	f7f8 f991 	bl	80012a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008f86:	4806      	ldr	r0, [pc, #24]	@ (8008fa0 <MX_USB_HOST_Init+0x44>)
 8008f88:	f7fe fc3d 	bl	8007806 <USBH_Start>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008f92:	f7f8 f989 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008f96:	bf00      	nop
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	08008fbd 	.word	0x08008fbd
 8008fa0:	200001cc 	.word	0x200001cc
 8008fa4:	2000000c 	.word	0x2000000c

08008fa8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008fac:	4802      	ldr	r0, [pc, #8]	@ (8008fb8 <MX_USB_HOST_Process+0x10>)
 8008fae:	f7fe fc3b 	bl	8007828 <USBH_Process>
}
 8008fb2:	bf00      	nop
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200001cc 	.word	0x200001cc

08008fbc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d819      	bhi.n	8009004 <USBH_UserProcess+0x48>
 8008fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd8 <USBH_UserProcess+0x1c>)
 8008fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd6:	bf00      	nop
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	08008ff5 	.word	0x08008ff5
 8008fe0:	08009005 	.word	0x08009005
 8008fe4:	08008ffd 	.word	0x08008ffd
 8008fe8:	08008fed 	.word	0x08008fed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008fec:	4b09      	ldr	r3, [pc, #36]	@ (8009014 <USBH_UserProcess+0x58>)
 8008fee:	2203      	movs	r2, #3
 8008ff0:	701a      	strb	r2, [r3, #0]
  break;
 8008ff2:	e008      	b.n	8009006 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ff4:	4b07      	ldr	r3, [pc, #28]	@ (8009014 <USBH_UserProcess+0x58>)
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	701a      	strb	r2, [r3, #0]
  break;
 8008ffa:	e004      	b.n	8009006 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ffc:	4b05      	ldr	r3, [pc, #20]	@ (8009014 <USBH_UserProcess+0x58>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	701a      	strb	r2, [r3, #0]
  break;
 8009002:	e000      	b.n	8009006 <USBH_UserProcess+0x4a>

  default:
  break;
 8009004:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	200005a4 	.word	0x200005a4

08009018 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08a      	sub	sp, #40	@ 0x28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009020:	f107 0314 	add.w	r3, r7, #20
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	609a      	str	r2, [r3, #8]
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009038:	d147      	bne.n	80090ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800903a:	2300      	movs	r3, #0
 800903c:	613b      	str	r3, [r7, #16]
 800903e:	4b25      	ldr	r3, [pc, #148]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009042:	4a24      	ldr	r2, [pc, #144]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 8009044:	f043 0301 	orr.w	r3, r3, #1
 8009048:	6313      	str	r3, [r2, #48]	@ 0x30
 800904a:	4b22      	ldr	r3, [pc, #136]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 800904c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800905a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800905c:	2300      	movs	r3, #0
 800905e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009060:	2300      	movs	r3, #0
 8009062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4619      	mov	r1, r3
 800906a:	481b      	ldr	r0, [pc, #108]	@ (80090d8 <HAL_HCD_MspInit+0xc0>)
 800906c:	f7f8 fc86 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009070:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009076:	2302      	movs	r3, #2
 8009078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800907a:	2300      	movs	r3, #0
 800907c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800907e:	2300      	movs	r3, #0
 8009080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009082:	230a      	movs	r3, #10
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009086:	f107 0314 	add.w	r3, r7, #20
 800908a:	4619      	mov	r1, r3
 800908c:	4812      	ldr	r0, [pc, #72]	@ (80090d8 <HAL_HCD_MspInit+0xc0>)
 800908e:	f7f8 fc75 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009092:	4b10      	ldr	r3, [pc, #64]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 8009094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009096:	4a0f      	ldr	r2, [pc, #60]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 8009098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800909c:	6353      	str	r3, [r2, #52]	@ 0x34
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	4b0c      	ldr	r3, [pc, #48]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 80090a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a6:	4a0b      	ldr	r2, [pc, #44]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 80090a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80090ae:	4b09      	ldr	r3, [pc, #36]	@ (80090d4 <HAL_HCD_MspInit+0xbc>)
 80090b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090ba:	2200      	movs	r2, #0
 80090bc:	2100      	movs	r1, #0
 80090be:	2043      	movs	r0, #67	@ 0x43
 80090c0:	f7f8 fc25 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090c4:	2043      	movs	r0, #67	@ 0x43
 80090c6:	f7f8 fc3e 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090ca:	bf00      	nop
 80090cc:	3728      	adds	r7, #40	@ 0x28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	40023800 	.word	0x40023800
 80090d8:	40020000 	.word	0x40020000

080090dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe ff73 	bl	8007fd6 <USBH_LL_IncTimer>
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe ffab 	bl	8008062 <USBH_LL_Connect>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe ffb4 	bl	8008090 <USBH_LL_Disconnect>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
 800913c:	4613      	mov	r3, r2
 800913e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe ff65 	bl	800802a <USBH_LL_PortEnabled>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe ff65 	bl	8008046 <USBH_LL_PortDisabled>
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009192:	2b01      	cmp	r3, #1
 8009194:	d12a      	bne.n	80091ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009196:	4a18      	ldr	r2, [pc, #96]	@ (80091f8 <USBH_LL_Init+0x74>)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a15      	ldr	r2, [pc, #84]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091a6:	4b14      	ldr	r3, [pc, #80]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80091ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80091ae:	4b12      	ldr	r3, [pc, #72]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091b0:	2208      	movs	r2, #8
 80091b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80091b4:	4b10      	ldr	r3, [pc, #64]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091ba:	4b0f      	ldr	r3, [pc, #60]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091bc:	2200      	movs	r2, #0
 80091be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80091c0:	4b0d      	ldr	r3, [pc, #52]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091c2:	2202      	movs	r2, #2
 80091c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80091cc:	480a      	ldr	r0, [pc, #40]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091ce:	f7f8 fd8a 	bl	8001ce6 <HAL_HCD_Init>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80091d8:	f7f8 f866 	bl	80012a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80091dc:	4806      	ldr	r0, [pc, #24]	@ (80091f8 <USBH_LL_Init+0x74>)
 80091de:	f7f9 f9eb 	bl	80025b8 <HAL_HCD_GetCurrentFrame>
 80091e2:	4603      	mov	r3, r0
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7fe fee6 	bl	8007fb8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	200005a8 	.word	0x200005a8

080091fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009212:	4618      	mov	r0, r3
 8009214:	f7f9 f958 	bl	80024c8 <HAL_HCD_Start>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f95e 	bl	80094e0 <USBH_Get_USB_Status>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009228:	7bbb      	ldrb	r3, [r7, #14]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009248:	4618      	mov	r0, r3
 800924a:	f7f9 f960 	bl	800250e <HAL_HCD_Stop>
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	4618      	mov	r0, r3
 8009256:	f000 f943 	bl	80094e0 <USBH_Get_USB_Status>
 800925a:	4603      	mov	r3, r0
 800925c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800927a:	4618      	mov	r0, r3
 800927c:	f7f9 f9aa 	bl	80025d4 <HAL_HCD_GetCurrentSpeed>
 8009280:	4603      	mov	r3, r0
 8009282:	2b02      	cmp	r3, #2
 8009284:	d00c      	beq.n	80092a0 <USBH_LL_GetSpeed+0x38>
 8009286:	2b02      	cmp	r3, #2
 8009288:	d80d      	bhi.n	80092a6 <USBH_LL_GetSpeed+0x3e>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <USBH_LL_GetSpeed+0x2c>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d003      	beq.n	800929a <USBH_LL_GetSpeed+0x32>
 8009292:	e008      	b.n	80092a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
    break;
 8009298:	e008      	b.n	80092ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800929a:	2301      	movs	r3, #1
 800929c:	73fb      	strb	r3, [r7, #15]
    break;
 800929e:	e005      	b.n	80092ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80092a0:	2302      	movs	r3, #2
 80092a2:	73fb      	strb	r3, [r7, #15]
    break;
 80092a4:	e002      	b.n	80092ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80092a6:	2301      	movs	r3, #1
 80092a8:	73fb      	strb	r3, [r7, #15]
    break;
 80092aa:	bf00      	nop
  }
  return  speed;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f9 f93b 	bl	8002548 <HAL_HCD_ResetPort>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 f901 	bl	80094e0 <USBH_Get_USB_Status>
 80092de:	4603      	mov	r3, r0
 80092e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f7f9 f943 	bl	800258e <HAL_HCD_HC_GetXferCount>
 8009308:	4603      	mov	r3, r0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009312:	b590      	push	{r4, r7, lr}
 8009314:	b089      	sub	sp, #36	@ 0x24
 8009316:	af04      	add	r7, sp, #16
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	4608      	mov	r0, r1
 800931c:	4611      	mov	r1, r2
 800931e:	461a      	mov	r2, r3
 8009320:	4603      	mov	r3, r0
 8009322:	70fb      	strb	r3, [r7, #3]
 8009324:	460b      	mov	r3, r1
 8009326:	70bb      	strb	r3, [r7, #2]
 8009328:	4613      	mov	r3, r2
 800932a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800933a:	787c      	ldrb	r4, [r7, #1]
 800933c:	78ba      	ldrb	r2, [r7, #2]
 800933e:	78f9      	ldrb	r1, [r7, #3]
 8009340:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009342:	9302      	str	r3, [sp, #8]
 8009344:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	4623      	mov	r3, r4
 8009352:	f7f8 fd2f 	bl	8001db4 <HAL_HCD_HC_Init>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f8bf 	bl	80094e0 <USBH_Get_USB_Status>
 8009362:	4603      	mov	r3, r0
 8009364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009366:	7bbb      	ldrb	r3, [r7, #14]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	bd90      	pop	{r4, r7, pc}

08009370 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f7f8 fdc8 	bl	8001f24 <HAL_HCD_HC_Halt>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f8a0 	bl	80094e0 <USBH_Get_USB_Status>
 80093a0:	4603      	mov	r3, r0
 80093a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80093ae:	b590      	push	{r4, r7, lr}
 80093b0:	b089      	sub	sp, #36	@ 0x24
 80093b2:	af04      	add	r7, sp, #16
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	4608      	mov	r0, r1
 80093b8:	4611      	mov	r1, r2
 80093ba:	461a      	mov	r2, r3
 80093bc:	4603      	mov	r3, r0
 80093be:	70fb      	strb	r3, [r7, #3]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70bb      	strb	r3, [r7, #2]
 80093c4:	4613      	mov	r3, r2
 80093c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80093d6:	787c      	ldrb	r4, [r7, #1]
 80093d8:	78ba      	ldrb	r2, [r7, #2]
 80093da:	78f9      	ldrb	r1, [r7, #3]
 80093dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80093e0:	9303      	str	r3, [sp, #12]
 80093e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093e4:	9302      	str	r3, [sp, #8]
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	4623      	mov	r3, r4
 80093f2:	f7f8 fdbb 	bl	8001f6c <HAL_HCD_HC_SubmitRequest>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 f86f 	bl	80094e0 <USBH_Get_USB_Status>
 8009402:	4603      	mov	r3, r0
 8009404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009406:	7bbb      	ldrb	r3, [r7, #14]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bd90      	pop	{r4, r7, pc}

08009410 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7f9 f89c 	bl	8002564 <HAL_HCD_HC_GetURBState>
 800942c:	4603      	mov	r3, r0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	460b      	mov	r3, r1
 8009440:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009448:	2b01      	cmp	r3, #1
 800944a:	d103      	bne.n	8009454 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f872 	bl	8009538 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009454:	20c8      	movs	r0, #200	@ 0xc8
 8009456:	f7f8 f95b 	bl	8001710 <HAL_Delay>
  return USBH_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
 8009470:	4613      	mov	r3, r2
 8009472:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800947a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800947c:	78fa      	ldrb	r2, [r7, #3]
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	4613      	mov	r3, r2
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	1a9b      	subs	r3, r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	3317      	adds	r3, #23
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	68f9      	ldr	r1, [r7, #12]
 8009496:	4613      	mov	r3, r2
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	333c      	adds	r3, #60	@ 0x3c
 80094a2:	78ba      	ldrb	r2, [r7, #2]
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	e009      	b.n	80094bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	4613      	mov	r3, r2
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	333d      	adds	r3, #61	@ 0x3d
 80094b8:	78ba      	ldrb	r2, [r7, #2]
 80094ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7f8 f91c 	bl	8001710 <HAL_Delay>
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d817      	bhi.n	8009524 <USBH_Get_USB_Status+0x44>
 80094f4:	a201      	add	r2, pc, #4	@ (adr r2, 80094fc <USBH_Get_USB_Status+0x1c>)
 80094f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fa:	bf00      	nop
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	08009513 	.word	0x08009513
 8009504:	08009519 	.word	0x08009519
 8009508:	0800951f 	.word	0x0800951f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
    break;
 8009510:	e00b      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009512:	2302      	movs	r3, #2
 8009514:	73fb      	strb	r3, [r7, #15]
    break;
 8009516:	e008      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009518:	2301      	movs	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
    break;
 800951c:	e005      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800951e:	2302      	movs	r3, #2
 8009520:	73fb      	strb	r3, [r7, #15]
    break;
 8009522:	e002      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009524:	2302      	movs	r3, #2
 8009526:	73fb      	strb	r3, [r7, #15]
    break;
 8009528:	bf00      	nop
  }
  return usb_status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
 8009550:	e001      	b.n	8009556 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009552:	2301      	movs	r3, #1
 8009554:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	461a      	mov	r2, r3
 800955a:	2101      	movs	r1, #1
 800955c:	4803      	ldr	r0, [pc, #12]	@ (800956c <MX_DriverVbusFS+0x34>)
 800955e:	f7f8 fba9 	bl	8001cb4 <HAL_GPIO_WritePin>
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40020800 	.word	0x40020800

08009570 <malloc>:
 8009570:	4b02      	ldr	r3, [pc, #8]	@ (800957c <malloc+0xc>)
 8009572:	4601      	mov	r1, r0
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	f000 b82d 	b.w	80095d4 <_malloc_r>
 800957a:	bf00      	nop
 800957c:	2000002c 	.word	0x2000002c

08009580 <free>:
 8009580:	4b02      	ldr	r3, [pc, #8]	@ (800958c <free+0xc>)
 8009582:	4601      	mov	r1, r0
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f000 b8f5 	b.w	8009774 <_free_r>
 800958a:	bf00      	nop
 800958c:	2000002c 	.word	0x2000002c

08009590 <sbrk_aligned>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4e0f      	ldr	r6, [pc, #60]	@ (80095d0 <sbrk_aligned+0x40>)
 8009594:	460c      	mov	r4, r1
 8009596:	6831      	ldr	r1, [r6, #0]
 8009598:	4605      	mov	r5, r0
 800959a:	b911      	cbnz	r1, 80095a2 <sbrk_aligned+0x12>
 800959c:	f000 f8ae 	bl	80096fc <_sbrk_r>
 80095a0:	6030      	str	r0, [r6, #0]
 80095a2:	4621      	mov	r1, r4
 80095a4:	4628      	mov	r0, r5
 80095a6:	f000 f8a9 	bl	80096fc <_sbrk_r>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d103      	bne.n	80095b6 <sbrk_aligned+0x26>
 80095ae:	f04f 34ff 	mov.w	r4, #4294967295
 80095b2:	4620      	mov	r0, r4
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	1cc4      	adds	r4, r0, #3
 80095b8:	f024 0403 	bic.w	r4, r4, #3
 80095bc:	42a0      	cmp	r0, r4
 80095be:	d0f8      	beq.n	80095b2 <sbrk_aligned+0x22>
 80095c0:	1a21      	subs	r1, r4, r0
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 f89a 	bl	80096fc <_sbrk_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d1f2      	bne.n	80095b2 <sbrk_aligned+0x22>
 80095cc:	e7ef      	b.n	80095ae <sbrk_aligned+0x1e>
 80095ce:	bf00      	nop
 80095d0:	20000988 	.word	0x20000988

080095d4 <_malloc_r>:
 80095d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	1ccd      	adds	r5, r1, #3
 80095da:	f025 0503 	bic.w	r5, r5, #3
 80095de:	3508      	adds	r5, #8
 80095e0:	2d0c      	cmp	r5, #12
 80095e2:	bf38      	it	cc
 80095e4:	250c      	movcc	r5, #12
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	4606      	mov	r6, r0
 80095ea:	db01      	blt.n	80095f0 <_malloc_r+0x1c>
 80095ec:	42a9      	cmp	r1, r5
 80095ee:	d904      	bls.n	80095fa <_malloc_r+0x26>
 80095f0:	230c      	movs	r3, #12
 80095f2:	6033      	str	r3, [r6, #0]
 80095f4:	2000      	movs	r0, #0
 80095f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096d0 <_malloc_r+0xfc>
 80095fe:	f000 f869 	bl	80096d4 <__malloc_lock>
 8009602:	f8d8 3000 	ldr.w	r3, [r8]
 8009606:	461c      	mov	r4, r3
 8009608:	bb44      	cbnz	r4, 800965c <_malloc_r+0x88>
 800960a:	4629      	mov	r1, r5
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff ffbf 	bl	8009590 <sbrk_aligned>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	4604      	mov	r4, r0
 8009616:	d158      	bne.n	80096ca <_malloc_r+0xf6>
 8009618:	f8d8 4000 	ldr.w	r4, [r8]
 800961c:	4627      	mov	r7, r4
 800961e:	2f00      	cmp	r7, #0
 8009620:	d143      	bne.n	80096aa <_malloc_r+0xd6>
 8009622:	2c00      	cmp	r4, #0
 8009624:	d04b      	beq.n	80096be <_malloc_r+0xea>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	4639      	mov	r1, r7
 800962a:	4630      	mov	r0, r6
 800962c:	eb04 0903 	add.w	r9, r4, r3
 8009630:	f000 f864 	bl	80096fc <_sbrk_r>
 8009634:	4581      	cmp	r9, r0
 8009636:	d142      	bne.n	80096be <_malloc_r+0xea>
 8009638:	6821      	ldr	r1, [r4, #0]
 800963a:	1a6d      	subs	r5, r5, r1
 800963c:	4629      	mov	r1, r5
 800963e:	4630      	mov	r0, r6
 8009640:	f7ff ffa6 	bl	8009590 <sbrk_aligned>
 8009644:	3001      	adds	r0, #1
 8009646:	d03a      	beq.n	80096be <_malloc_r+0xea>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	442b      	add	r3, r5
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	f8d8 3000 	ldr.w	r3, [r8]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	bb62      	cbnz	r2, 80096b0 <_malloc_r+0xdc>
 8009656:	f8c8 7000 	str.w	r7, [r8]
 800965a:	e00f      	b.n	800967c <_malloc_r+0xa8>
 800965c:	6822      	ldr	r2, [r4, #0]
 800965e:	1b52      	subs	r2, r2, r5
 8009660:	d420      	bmi.n	80096a4 <_malloc_r+0xd0>
 8009662:	2a0b      	cmp	r2, #11
 8009664:	d917      	bls.n	8009696 <_malloc_r+0xc2>
 8009666:	1961      	adds	r1, r4, r5
 8009668:	42a3      	cmp	r3, r4
 800966a:	6025      	str	r5, [r4, #0]
 800966c:	bf18      	it	ne
 800966e:	6059      	strne	r1, [r3, #4]
 8009670:	6863      	ldr	r3, [r4, #4]
 8009672:	bf08      	it	eq
 8009674:	f8c8 1000 	streq.w	r1, [r8]
 8009678:	5162      	str	r2, [r4, r5]
 800967a:	604b      	str	r3, [r1, #4]
 800967c:	4630      	mov	r0, r6
 800967e:	f000 f82f 	bl	80096e0 <__malloc_unlock>
 8009682:	f104 000b 	add.w	r0, r4, #11
 8009686:	1d23      	adds	r3, r4, #4
 8009688:	f020 0007 	bic.w	r0, r0, #7
 800968c:	1ac2      	subs	r2, r0, r3
 800968e:	bf1c      	itt	ne
 8009690:	1a1b      	subne	r3, r3, r0
 8009692:	50a3      	strne	r3, [r4, r2]
 8009694:	e7af      	b.n	80095f6 <_malloc_r+0x22>
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	42a3      	cmp	r3, r4
 800969a:	bf0c      	ite	eq
 800969c:	f8c8 2000 	streq.w	r2, [r8]
 80096a0:	605a      	strne	r2, [r3, #4]
 80096a2:	e7eb      	b.n	800967c <_malloc_r+0xa8>
 80096a4:	4623      	mov	r3, r4
 80096a6:	6864      	ldr	r4, [r4, #4]
 80096a8:	e7ae      	b.n	8009608 <_malloc_r+0x34>
 80096aa:	463c      	mov	r4, r7
 80096ac:	687f      	ldr	r7, [r7, #4]
 80096ae:	e7b6      	b.n	800961e <_malloc_r+0x4a>
 80096b0:	461a      	mov	r2, r3
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	d1fb      	bne.n	80096b0 <_malloc_r+0xdc>
 80096b8:	2300      	movs	r3, #0
 80096ba:	6053      	str	r3, [r2, #4]
 80096bc:	e7de      	b.n	800967c <_malloc_r+0xa8>
 80096be:	230c      	movs	r3, #12
 80096c0:	6033      	str	r3, [r6, #0]
 80096c2:	4630      	mov	r0, r6
 80096c4:	f000 f80c 	bl	80096e0 <__malloc_unlock>
 80096c8:	e794      	b.n	80095f4 <_malloc_r+0x20>
 80096ca:	6005      	str	r5, [r0, #0]
 80096cc:	e7d6      	b.n	800967c <_malloc_r+0xa8>
 80096ce:	bf00      	nop
 80096d0:	2000098c 	.word	0x2000098c

080096d4 <__malloc_lock>:
 80096d4:	4801      	ldr	r0, [pc, #4]	@ (80096dc <__malloc_lock+0x8>)
 80096d6:	f000 b84b 	b.w	8009770 <__retarget_lock_acquire_recursive>
 80096da:	bf00      	nop
 80096dc:	20000acc 	.word	0x20000acc

080096e0 <__malloc_unlock>:
 80096e0:	4801      	ldr	r0, [pc, #4]	@ (80096e8 <__malloc_unlock+0x8>)
 80096e2:	f000 b846 	b.w	8009772 <__retarget_lock_release_recursive>
 80096e6:	bf00      	nop
 80096e8:	20000acc 	.word	0x20000acc

080096ec <memset>:
 80096ec:	4402      	add	r2, r0
 80096ee:	4603      	mov	r3, r0
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d100      	bne.n	80096f6 <memset+0xa>
 80096f4:	4770      	bx	lr
 80096f6:	f803 1b01 	strb.w	r1, [r3], #1
 80096fa:	e7f9      	b.n	80096f0 <memset+0x4>

080096fc <_sbrk_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d06      	ldr	r5, [pc, #24]	@ (8009718 <_sbrk_r+0x1c>)
 8009700:	2300      	movs	r3, #0
 8009702:	4604      	mov	r4, r0
 8009704:	4608      	mov	r0, r1
 8009706:	602b      	str	r3, [r5, #0]
 8009708:	f7f7 ff1e 	bl	8001548 <_sbrk>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <_sbrk_r+0x1a>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	b103      	cbz	r3, 8009716 <_sbrk_r+0x1a>
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	20000ac8 	.word	0x20000ac8

0800971c <__errno>:
 800971c:	4b01      	ldr	r3, [pc, #4]	@ (8009724 <__errno+0x8>)
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	2000002c 	.word	0x2000002c

08009728 <__libc_init_array>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	4d0d      	ldr	r5, [pc, #52]	@ (8009760 <__libc_init_array+0x38>)
 800972c:	4c0d      	ldr	r4, [pc, #52]	@ (8009764 <__libc_init_array+0x3c>)
 800972e:	1b64      	subs	r4, r4, r5
 8009730:	10a4      	asrs	r4, r4, #2
 8009732:	2600      	movs	r6, #0
 8009734:	42a6      	cmp	r6, r4
 8009736:	d109      	bne.n	800974c <__libc_init_array+0x24>
 8009738:	4d0b      	ldr	r5, [pc, #44]	@ (8009768 <__libc_init_array+0x40>)
 800973a:	4c0c      	ldr	r4, [pc, #48]	@ (800976c <__libc_init_array+0x44>)
 800973c:	f000 f864 	bl	8009808 <_init>
 8009740:	1b64      	subs	r4, r4, r5
 8009742:	10a4      	asrs	r4, r4, #2
 8009744:	2600      	movs	r6, #0
 8009746:	42a6      	cmp	r6, r4
 8009748:	d105      	bne.n	8009756 <__libc_init_array+0x2e>
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009750:	4798      	blx	r3
 8009752:	3601      	adds	r6, #1
 8009754:	e7ee      	b.n	8009734 <__libc_init_array+0xc>
 8009756:	f855 3b04 	ldr.w	r3, [r5], #4
 800975a:	4798      	blx	r3
 800975c:	3601      	adds	r6, #1
 800975e:	e7f2      	b.n	8009746 <__libc_init_array+0x1e>
 8009760:	08009844 	.word	0x08009844
 8009764:	08009844 	.word	0x08009844
 8009768:	08009844 	.word	0x08009844
 800976c:	08009848 	.word	0x08009848

08009770 <__retarget_lock_acquire_recursive>:
 8009770:	4770      	bx	lr

08009772 <__retarget_lock_release_recursive>:
 8009772:	4770      	bx	lr

08009774 <_free_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4605      	mov	r5, r0
 8009778:	2900      	cmp	r1, #0
 800977a:	d041      	beq.n	8009800 <_free_r+0x8c>
 800977c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009780:	1f0c      	subs	r4, r1, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfb8      	it	lt
 8009786:	18e4      	addlt	r4, r4, r3
 8009788:	f7ff ffa4 	bl	80096d4 <__malloc_lock>
 800978c:	4a1d      	ldr	r2, [pc, #116]	@ (8009804 <_free_r+0x90>)
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	b933      	cbnz	r3, 80097a0 <_free_r+0x2c>
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	6014      	str	r4, [r2, #0]
 8009796:	4628      	mov	r0, r5
 8009798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800979c:	f7ff bfa0 	b.w	80096e0 <__malloc_unlock>
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d908      	bls.n	80097b6 <_free_r+0x42>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	1821      	adds	r1, r4, r0
 80097a8:	428b      	cmp	r3, r1
 80097aa:	bf01      	itttt	eq
 80097ac:	6819      	ldreq	r1, [r3, #0]
 80097ae:	685b      	ldreq	r3, [r3, #4]
 80097b0:	1809      	addeq	r1, r1, r0
 80097b2:	6021      	streq	r1, [r4, #0]
 80097b4:	e7ed      	b.n	8009792 <_free_r+0x1e>
 80097b6:	461a      	mov	r2, r3
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b10b      	cbz	r3, 80097c0 <_free_r+0x4c>
 80097bc:	42a3      	cmp	r3, r4
 80097be:	d9fa      	bls.n	80097b6 <_free_r+0x42>
 80097c0:	6811      	ldr	r1, [r2, #0]
 80097c2:	1850      	adds	r0, r2, r1
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d10b      	bne.n	80097e0 <_free_r+0x6c>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	4401      	add	r1, r0
 80097cc:	1850      	adds	r0, r2, r1
 80097ce:	4283      	cmp	r3, r0
 80097d0:	6011      	str	r1, [r2, #0]
 80097d2:	d1e0      	bne.n	8009796 <_free_r+0x22>
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	6053      	str	r3, [r2, #4]
 80097da:	4408      	add	r0, r1
 80097dc:	6010      	str	r0, [r2, #0]
 80097de:	e7da      	b.n	8009796 <_free_r+0x22>
 80097e0:	d902      	bls.n	80097e8 <_free_r+0x74>
 80097e2:	230c      	movs	r3, #12
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	e7d6      	b.n	8009796 <_free_r+0x22>
 80097e8:	6820      	ldr	r0, [r4, #0]
 80097ea:	1821      	adds	r1, r4, r0
 80097ec:	428b      	cmp	r3, r1
 80097ee:	bf04      	itt	eq
 80097f0:	6819      	ldreq	r1, [r3, #0]
 80097f2:	685b      	ldreq	r3, [r3, #4]
 80097f4:	6063      	str	r3, [r4, #4]
 80097f6:	bf04      	itt	eq
 80097f8:	1809      	addeq	r1, r1, r0
 80097fa:	6021      	streq	r1, [r4, #0]
 80097fc:	6054      	str	r4, [r2, #4]
 80097fe:	e7ca      	b.n	8009796 <_free_r+0x22>
 8009800:	bd38      	pop	{r3, r4, r5, pc}
 8009802:	bf00      	nop
 8009804:	2000098c 	.word	0x2000098c

08009808 <_init>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr

08009814 <_fini>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr
