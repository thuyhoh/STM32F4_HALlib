
010_timer_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005770  08005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005788  08005788  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005788  08005788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005790  08005790  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005794  08005794  00006794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005798  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000490  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbd6  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f88  00000000  00000000  00016c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00018ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3b  00000000  00000000  000199f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209cc  00000000  00000000  0001a52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103e5  00000000  00000000  0003aef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a6c  00000000  00000000  0004b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114d48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dc0  00000000  00000000  00114d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00118b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005758 	.word	0x08005758

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005758 	.word	0x08005758

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc50 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f81e 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f956 	bl	8000774 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 f888 	bl	80005dc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f906 	bl	80006dc <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 80004d0:	f000 f92e 	bl	8000730 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
  if( HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <main+0x44>)
 80004d6:	f003 fab8 	bl	8003a4a <HAL_TIM_PWM_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <main+0x2c>
  {
  	Error_Handler();
 80004e0:	f000 fa88 	bl	80009f4 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80004e4:	2100      	movs	r1, #0
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <main+0x44>)
 80004e8:	f003 fb08 	bl	8003afc <HAL_TIM_PWM_Start>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d002      	beq.n	80004f8 <main+0x40>
  {
	  Error_Handler();
 80004f2:	f000 fa7f 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <main+0x40>
 80004fc:	20000028 	.word	0x20000028

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	@ 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	@ 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f005 f8f6 	bl	8005700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b2a      	ldr	r3, [pc, #168]	@ (80005d4 <SystemClock_Config+0xd4>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	4a29      	ldr	r2, [pc, #164]	@ (80005d4 <SystemClock_Config+0xd4>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	@ 0x40
 8000534:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <SystemClock_Config+0xd4>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b24      	ldr	r3, [pc, #144]	@ (80005d8 <SystemClock_Config+0xd8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a23      	ldr	r2, [pc, #140]	@ (80005d8 <SystemClock_Config+0xd8>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <SystemClock_Config+0xd8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800055c:	2303      	movs	r3, #3
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800057c:	2348      	movs	r3, #72	@ 0x48
 800057e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000580:	2308      	movs	r3, #8
 8000582:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000584:	2303      	movs	r3, #3
 8000586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f002 fd75 	bl	800307c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000598:	f000 fa2c 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 ffd6 	bl	800356c <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005c6:	f000 fa15 	bl	80009f4 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	@ 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	@ 0x38
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800060c:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 800060e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000614:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 8000616:	2210      	movs	r2, #16
 8000618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8000620:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 8000622:	4a2d      	ldr	r2, [pc, #180]	@ (80006d8 <MX_TIM2_Init+0xfc>)
 8000624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 800062e:	2280      	movs	r2, #128	@ 0x80
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000632:	4828      	ldr	r0, [pc, #160]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 8000634:	f003 f9ba 	bl	80039ac <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800063e:	f000 f9d9 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800064c:	4619      	mov	r1, r3
 800064e:	4821      	ldr	r0, [pc, #132]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 8000650:	f003 fcce 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800065a:	f000 f9cb 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 8000660:	f003 f9f3 	bl	8003a4a <HAL_TIM_PWM_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800066a:	f000 f9c3 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4619      	mov	r1, r3
 800067c:	4815      	ldr	r0, [pc, #84]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 800067e:	f004 f8cd 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000688:	f000 f9b4 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068c:	2360      	movs	r3, #96	@ 0x60
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 40000;
 8000690:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8000694:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 80006a6:	f003 fbe1 	bl	8003e6c <HAL_TIM_PWM_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006b0:	f000 f9a0 	bl	80009f4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f022 0208 	bic.w	r2, r2, #8
 80006c2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <MX_TIM2_Init+0xf8>)
 80006c6:	f000 f9e9 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 80006ca:	bf00      	nop
 80006cc:	3738      	adds	r7, #56	@ 0x38
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f004 f912 	bl	800493c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f969 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000070 	.word	0x20000070
 800072c:	40004400 	.word	0x40004400

08000730 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000736:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800073a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800073e:	2208      	movs	r2, #8
 8000740:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000744:	2201      	movs	r2, #1
 8000746:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000750:	2202      	movs	r2, #2
 8000752:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800075c:	f000 fe5d 	bl	800141a <HAL_HCD_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000766:	f000 f945 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000b8 	.word	0x200000b8

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4b93      	ldr	r3, [pc, #588]	@ (80009dc <MX_GPIO_Init+0x268>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a92      	ldr	r2, [pc, #584]	@ (80009dc <MX_GPIO_Init+0x268>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b90      	ldr	r3, [pc, #576]	@ (80009dc <MX_GPIO_Init+0x268>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b8c      	ldr	r3, [pc, #560]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a8b      	ldr	r2, [pc, #556]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b89      	ldr	r3, [pc, #548]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b85      	ldr	r3, [pc, #532]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a84      	ldr	r2, [pc, #528]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b82      	ldr	r3, [pc, #520]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b7e      	ldr	r3, [pc, #504]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a7d      	ldr	r2, [pc, #500]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b7b      	ldr	r3, [pc, #492]	@ (80009dc <MX_GPIO_Init+0x268>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b77      	ldr	r3, [pc, #476]	@ (80009dc <MX_GPIO_Init+0x268>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a76      	ldr	r2, [pc, #472]	@ (80009dc <MX_GPIO_Init+0x268>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b74      	ldr	r3, [pc, #464]	@ (80009dc <MX_GPIO_Init+0x268>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b70      	ldr	r3, [pc, #448]	@ (80009dc <MX_GPIO_Init+0x268>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a6f      	ldr	r2, [pc, #444]	@ (80009dc <MX_GPIO_Init+0x268>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b6d      	ldr	r3, [pc, #436]	@ (80009dc <MX_GPIO_Init+0x268>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	486a      	ldr	r0, [pc, #424]	@ (80009e0 <MX_GPIO_Init+0x26c>)
 8000838:	f000 fdd6 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4868      	ldr	r0, [pc, #416]	@ (80009e4 <MX_GPIO_Init+0x270>)
 8000842:	f000 fdd1 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000846:	2200      	movs	r2, #0
 8000848:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800084c:	4866      	ldr	r0, [pc, #408]	@ (80009e8 <MX_GPIO_Init+0x274>)
 800084e:	f000 fdcb 	bl	80013e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000852:	2308      	movs	r3, #8
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	485d      	ldr	r0, [pc, #372]	@ (80009e0 <MX_GPIO_Init+0x26c>)
 800086a:	f000 fc21 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4857      	ldr	r0, [pc, #348]	@ (80009e4 <MX_GPIO_Init+0x270>)
 8000886:	f000 fc13 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	484f      	ldr	r0, [pc, #316]	@ (80009e4 <MX_GPIO_Init+0x270>)
 80008a6:	f000 fc03 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	484b      	ldr	r0, [pc, #300]	@ (80009ec <MX_GPIO_Init+0x278>)
 80008c0:	f000 fbf6 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c4:	2310      	movs	r3, #16
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d4:	2306      	movs	r3, #6
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4843      	ldr	r0, [pc, #268]	@ (80009ec <MX_GPIO_Init+0x278>)
 80008e0:	f000 fbe6 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e4:	23e0      	movs	r3, #224	@ 0xe0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f4:	2305      	movs	r3, #5
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	483b      	ldr	r0, [pc, #236]	@ (80009ec <MX_GPIO_Init+0x278>)
 8000900:	f000 fbd6 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000904:	2304      	movs	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4836      	ldr	r0, [pc, #216]	@ (80009f0 <MX_GPIO_Init+0x27c>)
 8000918:	f000 fbca 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800091c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	482d      	ldr	r0, [pc, #180]	@ (80009f0 <MX_GPIO_Init+0x27c>)
 800093a:	f000 fbb9 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800093e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000942:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <MX_GPIO_Init+0x274>)
 8000958:	f000 fbaa 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800095c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096e:	2306      	movs	r3, #6
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	481a      	ldr	r0, [pc, #104]	@ (80009e4 <MX_GPIO_Init+0x270>)
 800097a:	f000 fb99 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800097e:	2320      	movs	r3, #32
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4815      	ldr	r0, [pc, #84]	@ (80009e8 <MX_GPIO_Init+0x274>)
 8000992:	f000 fb8d 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000996:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a8:	2304      	movs	r3, #4
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480f      	ldr	r0, [pc, #60]	@ (80009f0 <MX_GPIO_Init+0x27c>)
 80009b4:	f000 fb7c 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009bc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_GPIO_Init+0x26c>)
 80009ce:	f000 fb6f 	bl	80010b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a60:	d115      	bne.n	8000a8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_TIM_Base_MspInit+0x48>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_TIM_Base_MspInit+0x48>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_TIM_Base_MspInit+0x48>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210f      	movs	r1, #15
 8000a82:	201c      	movs	r0, #28
 8000a84:	f000 fadd 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a88:	201c      	movs	r0, #28
 8000a8a:	f000 faf6 	bl	800107a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000abc:	d11e      	bne.n	8000afc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_TIM_MspPostInit+0x68>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <HAL_TIM_MspPostInit+0x68>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_TIM_MspPostInit+0x68>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <HAL_TIM_MspPostInit+0x6c>)
 8000af8:	f000 fada 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	@ (8000b90 <HAL_UART_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a17      	ldr	r2, [pc, #92]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b82:	f000 fa95 	bl	80010b0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	@ 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bbc:	d147      	bne.n	8000c4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a24      	ldr	r2, [pc, #144]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000bda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	481b      	ldr	r0, [pc, #108]	@ (8000c5c <HAL_HCD_MspInit+0xc0>)
 8000bf0:	f000 fa5e 	bl	80010b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000bf4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c06:	230a      	movs	r3, #10
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4812      	ldr	r0, [pc, #72]	@ (8000c5c <HAL_HCD_MspInit+0xc0>)
 8000c12:	f000 fa4d 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c20:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_HCD_MspInit+0xbc>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2043      	movs	r0, #67	@ 0x43
 8000c44:	f000 f9fd 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000c48:	2043      	movs	r0, #67	@ 0x43
 8000c4a:	f000 fa16 	bl	800107a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	@ 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb6:	f000 f8a5 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <TIM2_IRQHandler+0x10>)
 8000cc6:	f002 ffe1 	bl	8003c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000028 	.word	0x20000028

08000cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <OTG_FS_IRQHandler+0x10>)
 8000cda:	f000 fc05 	bl	80014e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000b8 	.word	0x200000b8

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f004 fce9 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fbbb 	bl	80004b8 <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d50:	08005798 	.word	0x08005798
  ldr r2, =_sbss
 8000d54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d58:	2000049c 	.word	0x2000049c

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f94f 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe34 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f967 	bl	8001096 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f92f 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000498 	.word	0x20000498

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000498 	.word	0x20000498

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff8e 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff29 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff3e 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff8e 	bl	8000f80 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff31 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffa2 	bl	8000fe8 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e16b      	b.n	80013a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 815a 	bne.w	800139e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80b4 	beq.w	800139e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b60      	ldr	r3, [pc, #384]	@ (80013bc <HAL_GPIO_Init+0x30c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	4a5f      	ldr	r2, [pc, #380]	@ (80013bc <HAL_GPIO_Init+0x30c>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001244:	6453      	str	r3, [r2, #68]	@ 0x44
 8001246:	4b5d      	ldr	r3, [pc, #372]	@ (80013bc <HAL_GPIO_Init+0x30c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a5b      	ldr	r2, [pc, #364]	@ (80013c0 <HAL_GPIO_Init+0x310>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a52      	ldr	r2, [pc, #328]	@ (80013c4 <HAL_GPIO_Init+0x314>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d02b      	beq.n	80012d6 <HAL_GPIO_Init+0x226>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a51      	ldr	r2, [pc, #324]	@ (80013c8 <HAL_GPIO_Init+0x318>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d025      	beq.n	80012d2 <HAL_GPIO_Init+0x222>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a50      	ldr	r2, [pc, #320]	@ (80013cc <HAL_GPIO_Init+0x31c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d01f      	beq.n	80012ce <HAL_GPIO_Init+0x21e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4f      	ldr	r2, [pc, #316]	@ (80013d0 <HAL_GPIO_Init+0x320>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x21a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4e      	ldr	r2, [pc, #312]	@ (80013d4 <HAL_GPIO_Init+0x324>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x216>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4d      	ldr	r2, [pc, #308]	@ (80013d8 <HAL_GPIO_Init+0x328>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x212>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	@ (80013dc <HAL_GPIO_Init+0x32c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x20e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4b      	ldr	r2, [pc, #300]	@ (80013e0 <HAL_GPIO_Init+0x330>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x20a>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e00e      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012ba:	2308      	movs	r3, #8
 80012bc:	e00c      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012be:	2306      	movs	r3, #6
 80012c0:	e00a      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012c2:	2305      	movs	r3, #5
 80012c4:	e008      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012c6:	2304      	movs	r3, #4
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x228>
 80012d6:	2300      	movs	r3, #0
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	f002 0203 	and.w	r2, r2, #3
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e8:	4935      	ldr	r1, [pc, #212]	@ (80013c0 <HAL_GPIO_Init+0x310>)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131a:	4a32      	ldr	r2, [pc, #200]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001320:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001344:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136e:	4a1d      	ldr	r2, [pc, #116]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001398:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	f67f ae90 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3724      	adds	r7, #36	@ 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40021400 	.word	0x40021400
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40021c00 	.word	0x40021c00
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af02      	add	r7, sp, #8
 8001420:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e059      	b.n	80014e0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fba8 	bl	8000b9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800145a:	d102      	bne.n	8001462 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fd90 	bl	8004f8c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7c1a      	ldrb	r2, [r3, #16]
 8001474:	f88d 2000 	strb.w	r2, [sp]
 8001478:	3304      	adds	r3, #4
 800147a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147c:	f003 fd22 	bl	8004ec4 <USB_CoreInit>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e026      	b.n	80014e0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2101      	movs	r1, #1
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fd88 	bl	8004fae <USB_SetCurrentMode>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e017      	b.n	80014e0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7c1a      	ldrb	r2, [r3, #16]
 80014b8:	f88d 2000 	strb.w	r2, [sp]
 80014bc:	3304      	adds	r3, #4
 80014be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c0:	f003 feec 	bl	800529c <USB_HostInit>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2202      	movs	r2, #2
 80014ce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e004      	b.n	80014e0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fe8d 	bl	800521e <USB_GetMode>
 8001504:	4603      	mov	r3, r0
 8001506:	2b01      	cmp	r3, #1
 8001508:	f040 80fb 	bne.w	8001702 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 fe50 	bl	80051b6 <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80f1 	beq.w	8001700 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fe47 	bl	80051b6 <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001532:	d104      	bne.n	800153e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800153c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f003 fe37 	bl	80051b6 <USB_ReadInterrupts>
 8001548:	4603      	mov	r3, r0
 800154a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001552:	d104      	bne.n	800155e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800155c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fe27 	bl	80051b6 <USB_ReadInterrupts>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800156e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001572:	d104      	bne.n	800157e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800157c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fe17 	bl	80051b6 <USB_ReadInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b02      	cmp	r3, #2
 8001590:	d103      	bne.n	800159a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2202      	movs	r2, #2
 8001598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fe09 	bl	80051b6 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015ae:	d120      	bne.n	80015f2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80015b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d113      	bne.n	80015f2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80015ca:	2110      	movs	r1, #16
 80015cc:	6938      	ldr	r0, [r7, #16]
 80015ce:	f003 fd3a 	bl	8005046 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015d2:	6938      	ldr	r0, [r7, #16]
 80015d4:	f003 fd69 	bl	80050aa <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7a5b      	ldrb	r3, [r3, #9]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d105      	bne.n	80015ec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 ff1c 	bl	8005424 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f89f 	bl	8001730 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fddd 	bl	80051b6 <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001606:	d102      	bne.n	800160e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f001 fcc4 	bl	8002f96 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fdcf 	bl	80051b6 <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b08      	cmp	r3, #8
 8001620:	d106      	bne.n	8001630 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f870 	bl	8001708 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2208      	movs	r2, #8
 800162e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 fdbe 	bl	80051b6 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001644:	d139      	bne.n	80016ba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f003 ff27 	bl	800549e <USB_HC_ReadInterrupt>
 8001650:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e025      	b.n	80016a4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d018      	beq.n	800169e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800167e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001682:	d106      	bne.n	8001692 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f87c 	bl	8001788 <HCD_HC_IN_IRQHandler>
 8001690:	e005      	b.n	800169e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fede 	bl	800245a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	795b      	ldrb	r3, [r3, #5]
 80016a8:	461a      	mov	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d3d3      	bcc.n	8001658 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fd79 	bl	80051b6 <USB_ReadInterrupts>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d101      	bne.n	80016d2 <HAL_HCD_IRQHandler+0x1ea>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_HCD_IRQHandler+0x1ec>
 80016d2:	2300      	movs	r3, #0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d014      	beq.n	8001702 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0210 	bic.w	r2, r2, #16
 80016e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f001 fb75 	bl	8002dd8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0210 	orr.w	r2, r2, #16
 80016fc:	619a      	str	r2, [r3, #24]
 80016fe:	e000      	b.n	8001702 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001700:	bf00      	nop
    }
  }
}
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
 8001778:	4613      	mov	r3, r2
 800177a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 fd18 	bl	80051dc <USB_ReadChInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d11a      	bne.n	80017ec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017c2:	461a      	mov	r2, r3
 80017c4:	2304      	movs	r3, #4
 80017c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	334d      	adds	r3, #77	@ 0x4d
 80017d8:	2207      	movs	r2, #7
 80017da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fe6b 	bl	80054c0 <USB_HC_Halt>
 80017ea:	e09e      	b.n	800192a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fcf1 	bl	80051dc <USB_ReadChInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001804:	d11b      	bne.n	800183e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001812:	461a      	mov	r2, r3
 8001814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001818:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	334d      	adds	r3, #77	@ 0x4d
 800182a:	2208      	movs	r2, #8
 800182c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fe42 	bl	80054c0 <USB_HC_Halt>
 800183c:	e075      	b.n	800192a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f003 fcc8 	bl	80051dc <USB_ReadChInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b08      	cmp	r3, #8
 8001854:	d11a      	bne.n	800188c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001862:	461a      	mov	r2, r3
 8001864:	2308      	movs	r3, #8
 8001866:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	334d      	adds	r3, #77	@ 0x4d
 8001878:	2206      	movs	r2, #6
 800187a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f003 fe1b 	bl	80054c0 <USB_HC_Halt>
 800188a:	e04e      	b.n	800192a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fca1 	bl	80051dc <USB_ReadChInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a4:	d11b      	bne.n	80018de <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018b2:	461a      	mov	r2, r3
 80018b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	334d      	adds	r3, #77	@ 0x4d
 80018ca:	2209      	movs	r2, #9
 80018cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fdf2 	bl	80054c0 <USB_HC_Halt>
 80018dc:	e025      	b.n	800192a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fc78 	bl	80051dc <USB_ReadChInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f2:	2b80      	cmp	r3, #128	@ 0x80
 80018f4:	d119      	bne.n	800192a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001902:	461a      	mov	r2, r3
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	334d      	adds	r3, #77	@ 0x4d
 8001918:	2207      	movs	r2, #7
 800191a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fdcb 	bl	80054c0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fc52 	bl	80051dc <USB_ReadChInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800193e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001942:	d112      	bne.n	800196a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fdb7 	bl	80054c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4413      	add	r3, r2
 800195a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800195e:	461a      	mov	r2, r3
 8001960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001964:	6093      	str	r3, [r2, #8]
 8001966:	f000 bd75 	b.w	8002454 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fc32 	bl	80051dc <USB_ReadChInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	f040 8128 	bne.w	8001bd4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001990:	461a      	mov	r2, r3
 8001992:	2320      	movs	r3, #32
 8001994:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	331b      	adds	r3, #27
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d119      	bne.n	80019e0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	331b      	adds	r3, #27
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	0151      	lsls	r1, r2, #5
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	440a      	add	r2, r1
 80019d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019de:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	799b      	ldrb	r3, [r3, #6]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01b      	beq.n	8001a20 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	3330      	adds	r3, #48	@ 0x30
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	1ac9      	subs	r1, r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4403      	add	r3, r0
 8001a1c:	3338      	adds	r3, #56	@ 0x38
 8001a1e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	334d      	adds	r3, #77	@ 0x4d
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3344      	adds	r3, #68	@ 0x44
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a54:	461a      	mov	r2, r3
 8001a56:	2301      	movs	r3, #1
 8001a58:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	3326      	adds	r3, #38	@ 0x26
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00a      	beq.n	8001a86 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3326      	adds	r3, #38	@ 0x26
 8001a80:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d110      	bne.n	8001aa8 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fd16 	bl	80054c0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	6093      	str	r3, [r2, #8]
 8001aa6:	e03d      	b.n	8001b24 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3326      	adds	r3, #38	@ 0x26
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d00a      	beq.n	8001ad4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	3326      	adds	r3, #38	@ 0x26
 8001ace:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d127      	bne.n	8001b24 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	0151      	lsls	r1, r2, #5
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	440a      	add	r2, r1
 8001aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001aee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001af2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	334c      	adds	r3, #76	@ 0x4c
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	334c      	adds	r3, #76	@ 0x4c
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe24 	bl	800176c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	799b      	ldrb	r3, [r3, #6]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d13b      	bne.n	8001ba4 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	3338      	adds	r3, #56	@ 0x38
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4403      	add	r3, r0
 8001b4c:	3328      	adds	r3, #40	@ 0x28
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	440b      	add	r3, r1
 8001b52:	1e59      	subs	r1, r3, #1
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4403      	add	r3, r0
 8001b62:	3328      	adds	r3, #40	@ 0x28
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8470 	beq.w	8002454 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	333c      	adds	r3, #60	@ 0x3c
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2d8      	uxtb	r0, r3
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	333c      	adds	r3, #60	@ 0x3c
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	f000 bc58 	b.w	8002454 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	333c      	adds	r3, #60	@ 0x3c
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	f083 0301 	eor.w	r3, r3, #1
 8001bbc:	b2d8      	uxtb	r0, r3
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	333c      	adds	r3, #60	@ 0x3c
 8001bcc:	4602      	mov	r2, r0
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	f000 bc40 	b.w	8002454 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 fafd 	bl	80051dc <USB_ReadChInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d131      	bne.n	8001c50 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	331a      	adds	r3, #26
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f040 841f 	bne.w	8002454 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	331b      	adds	r3, #27
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	334d      	adds	r3, #77	@ 0x4d
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fc3a 	bl	80054c0 <USB_HC_Halt>
 8001c4c:	f000 bc02 	b.w	8002454 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fabf 	bl	80051dc <USB_ReadChInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 8305 	bne.w	8002274 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c76:	461a      	mov	r2, r3
 8001c78:	2302      	movs	r3, #2
 8001c7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	334d      	adds	r3, #77	@ 0x4d
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d114      	bne.n	8001cbc <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	334d      	adds	r3, #77	@ 0x4d
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	334c      	adds	r3, #76	@ 0x4c
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e2cc      	b.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	334d      	adds	r3, #77	@ 0x4d
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d114      	bne.n	8001cfc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	334d      	adds	r3, #77	@ 0x4d
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	334c      	adds	r3, #76	@ 0x4c
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e2ac      	b.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	334d      	adds	r3, #77	@ 0x4d
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b07      	cmp	r3, #7
 8001d10:	d00b      	beq.n	8001d2a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	334d      	adds	r3, #77	@ 0x4d
 8001d22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	f040 80a6 	bne.w	8001e76 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	334d      	adds	r3, #77	@ 0x4d
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3344      	adds	r3, #68	@ 0x44
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	1c59      	adds	r1, r3, #1
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4403      	add	r3, r0
 8001d5e:	3344      	adds	r3, #68	@ 0x44
 8001d60:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3344      	adds	r3, #68	@ 0x44
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d943      	bls.n	8001e00 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3344      	adds	r3, #68	@ 0x44
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	331a      	adds	r3, #26
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d123      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	331b      	adds	r3, #27
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	331c      	adds	r3, #28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	334c      	adds	r3, #76	@ 0x4c
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001dfe:	e229      	b.n	8002254 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	334c      	adds	r3, #76	@ 0x4c
 8001e10:	2202      	movs	r2, #2
 8001e12:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3326      	adds	r3, #38	@ 0x26
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	3326      	adds	r3, #38	@ 0x26
 8001e3a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	f040 8209 	bne.w	8002254 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e58:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e60:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e74:	e1ee      	b.n	8002254 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	334d      	adds	r3, #77	@ 0x4d
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	f040 80c8 	bne.w	800201e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	334d      	adds	r3, #77	@ 0x4d
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	331b      	adds	r3, #27
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	f040 81ce 	bne.w	8002256 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3326      	adds	r3, #38	@ 0x26
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d16b      	bne.n	8001fa8 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3348      	adds	r3, #72	@ 0x48
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	1c59      	adds	r1, r3, #1
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4403      	add	r3, r0
 8001ef0:	3348      	adds	r3, #72	@ 0x48
 8001ef2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3348      	adds	r3, #72	@ 0x48
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d943      	bls.n	8001f92 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3348      	adds	r3, #72	@ 0x48
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	331b      	adds	r3, #27
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3344      	adds	r3, #68	@ 0x44
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d809      	bhi.n	8001f5c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	331c      	adds	r3, #28
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	0151      	lsls	r1, r2, #5
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	440a      	add	r2, r1
 8001f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	334c      	adds	r3, #76	@ 0x4c
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e014      	b.n	8001fbc <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	334c      	adds	r3, #76	@ 0x4c
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e009      	b.n	8001fbc <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	334c      	adds	r3, #76	@ 0x4c
 8001fb8:	2202      	movs	r2, #2
 8001fba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3326      	adds	r3, #38	@ 0x26
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3326      	adds	r3, #38	@ 0x26
 8001fe2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	f040 8136 	bne.w	8002256 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002000:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002008:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e11b      	b.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	334d      	adds	r3, #77	@ 0x4d
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b03      	cmp	r3, #3
 8002032:	f040 8081 	bne.w	8002138 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	334d      	adds	r3, #77	@ 0x4d
 8002046:	2202      	movs	r2, #2
 8002048:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	331b      	adds	r3, #27
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 80fa 	bne.w	8002256 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	334c      	adds	r3, #76	@ 0x4c
 8002072:	2202      	movs	r2, #2
 8002074:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	0151      	lsls	r1, r2, #5
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	440a      	add	r2, r1
 800208c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	0151      	lsls	r1, r2, #5
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	440a      	add	r2, r1
 80020ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	0151      	lsls	r1, r2, #5
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	440a      	add	r2, r1
 80020cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020d0:	f023 0320 	bic.w	r3, r3, #32
 80020d4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3326      	adds	r3, #38	@ 0x26
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3326      	adds	r3, #38	@ 0x26
 80020fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020fe:	2b02      	cmp	r3, #2
 8002100:	f040 80a9 	bne.w	8002256 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800211a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002122:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e08e      	b.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	334d      	adds	r3, #77	@ 0x4d
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d143      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	334d      	adds	r3, #77	@ 0x4d
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	334c      	adds	r3, #76	@ 0x4c
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3326      	adds	r3, #38	@ 0x26
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3326      	adds	r3, #38	@ 0x26
 800219c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d159      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80021b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e03f      	b.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	334d      	adds	r3, #77	@ 0x4d
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d126      	bne.n	800223a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	334d      	adds	r3, #77	@ 0x4d
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3344      	adds	r3, #68	@ 0x44
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4403      	add	r3, r0
 8002220:	3344      	adds	r3, #68	@ 0x44
 8002222:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	334c      	adds	r3, #76	@ 0x4c
 8002234:	2204      	movs	r2, #4
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e00d      	b.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	334d      	adds	r3, #77	@ 0x4d
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	f000 8100 	beq.w	8002452 <HCD_HC_IN_IRQHandler+0xcca>
 8002252:	e000      	b.n	8002256 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002254:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	334c      	adds	r3, #76	@ 0x4c
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fa7d 	bl	800176c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002272:	e0ef      	b.n	8002454 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f002 ffad 	bl	80051dc <USB_ReadChInterrupts>
 8002282:	4603      	mov	r3, r0
 8002284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002288:	2b40      	cmp	r3, #64	@ 0x40
 800228a:	d12f      	bne.n	80022ec <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2340      	movs	r3, #64	@ 0x40
 800229c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	334d      	adds	r3, #77	@ 0x4d
 80022ae:	2205      	movs	r2, #5
 80022b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	331a      	adds	r3, #26
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3344      	adds	r3, #68	@ 0x44
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 f8eb 	bl	80054c0 <USB_HC_Halt>
 80022ea:	e0b3      	b.n	8002454 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 ff71 	bl	80051dc <USB_ReadChInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b10      	cmp	r3, #16
 8002302:	f040 80a7 	bne.w	8002454 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3326      	adds	r3, #38	@ 0x26
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d11b      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3344      	adds	r3, #68	@ 0x44
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	334d      	adds	r3, #77	@ 0x4d
 8002340:	2204      	movs	r2, #4
 8002342:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f8b7 	bl	80054c0 <USB_HC_Halt>
 8002352:	e03f      	b.n	80023d4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3326      	adds	r3, #38	@ 0x26
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3326      	adds	r3, #38	@ 0x26
 800237a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800237c:	2b02      	cmp	r3, #2
 800237e:	d129      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3344      	adds	r3, #68	@ 0x44
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	799b      	ldrb	r3, [r3, #6]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HCD_HC_IN_IRQHandler+0xc2a>
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	331b      	adds	r3, #27
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d110      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334d      	adds	r3, #77	@ 0x4d
 80023c2:	2204      	movs	r2, #4
 80023c4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 f876 	bl	80054c0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	331b      	adds	r3, #27
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d129      	bne.n	800243e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	331b      	adds	r3, #27
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	0151      	lsls	r1, r2, #5
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	440a      	add	r2, r1
 8002414:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	0151      	lsls	r1, r2, #5
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	440a      	add	r2, r1
 8002434:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800244a:	461a      	mov	r2, r3
 800244c:	2310      	movs	r3, #16
 800244e:	6093      	str	r3, [r2, #8]
 8002450:	e000      	b.n	8002454 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002452:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f002 feaf 	bl	80051dc <USB_ReadChInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11b      	bne.n	80024c0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002494:	461a      	mov	r2, r3
 8002496:	2304      	movs	r3, #4
 8002498:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	334d      	adds	r3, #77	@ 0x4d
 80024aa:	2207      	movs	r2, #7
 80024ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f802 	bl	80054c0 <USB_HC_Halt>
 80024bc:	f000 bc89 	b.w	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 fe87 	bl	80051dc <USB_ReadChInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	f040 8082 	bne.w	80025de <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e6:	461a      	mov	r2, r3
 80024e8:	2320      	movs	r3, #32
 80024ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3319      	adds	r3, #25
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d124      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3319      	adds	r3, #25
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	334c      	adds	r3, #76	@ 0x4c
 8002526:	2202      	movs	r2, #2
 8002528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	334d      	adds	r3, #77	@ 0x4d
 800253a:	2203      	movs	r2, #3
 800253c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f002 ffba 	bl	80054c0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	331a      	adds	r3, #26
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 8437 	bne.w	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	331b      	adds	r3, #27
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 842b 	bne.w	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3326      	adds	r3, #38	@ 0x26
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d009      	beq.n	80025a6 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	331b      	adds	r3, #27
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	334d      	adds	r3, #77	@ 0x4d
 80025b6:	2203      	movs	r2, #3
 80025b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 ff7c 	bl	80054c0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3344      	adds	r3, #68	@ 0x44
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e3f9      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fdf8 	bl	80051dc <USB_ReadChInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f6:	d111      	bne.n	800261c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002604:	461a      	mov	r2, r3
 8002606:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800260a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f002 ff53 	bl	80054c0 <USB_HC_Halt>
 800261a:	e3da      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f002 fdd9 	bl	80051dc <USB_ReadChInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d168      	bne.n	8002706 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3344      	adds	r3, #68	@ 0x44
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fdc3 	bl	80051dc <USB_ReadChInterrupts>
 8002656:	4603      	mov	r3, r0
 8002658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265c:	2b40      	cmp	r3, #64	@ 0x40
 800265e:	d112      	bne.n	8002686 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3319      	adds	r3, #25
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2340      	movs	r3, #64	@ 0x40
 8002684:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	331b      	adds	r3, #27
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d019      	beq.n	80026d0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	331b      	adds	r3, #27
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	0151      	lsls	r1, r2, #5
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	440a      	add	r2, r1
 80026c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ce:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2301      	movs	r3, #1
 80026e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	334d      	adds	r3, #77	@ 0x4d
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fede 	bl	80054c0 <USB_HC_Halt>
 8002704:	e365      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fd64 	bl	80051dc <USB_ReadChInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b40      	cmp	r3, #64	@ 0x40
 800271c:	d139      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	334d      	adds	r3, #77	@ 0x4d
 800272e:	2205      	movs	r2, #5
 8002730:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	331a      	adds	r3, #26
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3319      	adds	r3, #25
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3344      	adds	r3, #68	@ 0x44
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fea1 	bl	80054c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2340      	movs	r3, #64	@ 0x40
 800278e:	6093      	str	r3, [r2, #8]
 8002790:	e31f      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fd1e 	bl	80051dc <USB_ReadChInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11a      	bne.n	80027e0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	2308      	movs	r3, #8
 80027ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	334d      	adds	r3, #77	@ 0x4d
 80027cc:	2206      	movs	r2, #6
 80027ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 fe71 	bl	80054c0 <USB_HC_Halt>
 80027de:	e2f8      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fcf7 	bl	80051dc <USB_ReadChInterrupts>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d144      	bne.n	8002882 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3344      	adds	r3, #68	@ 0x44
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334d      	adds	r3, #77	@ 0x4d
 800281c:	2204      	movs	r2, #4
 800281e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3319      	adds	r3, #25
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d114      	bne.n	8002860 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3318      	adds	r3, #24
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3319      	adds	r3, #25
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fe29 	bl	80054c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287a:	461a      	mov	r2, r3
 800287c:	2310      	movs	r3, #16
 800287e:	6093      	str	r3, [r2, #8]
 8002880:	e2a7      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f002 fca6 	bl	80051dc <USB_ReadChInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002896:	2b80      	cmp	r3, #128	@ 0x80
 8002898:	f040 8083 	bne.w	80029a2 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	799b      	ldrb	r3, [r3, #6]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d111      	bne.n	80028c8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334d      	adds	r3, #77	@ 0x4d
 80028b4:	2207      	movs	r2, #7
 80028b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fdfd 	bl	80054c0 <USB_HC_Halt>
 80028c6:	e062      	b.n	800298e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3344      	adds	r3, #68	@ 0x44
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1c59      	adds	r1, r3, #1
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4403      	add	r3, r0
 80028e8:	3344      	adds	r3, #68	@ 0x44
 80028ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3344      	adds	r3, #68	@ 0x44
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d922      	bls.n	8002948 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3344      	adds	r3, #68	@ 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	334c      	adds	r3, #76	@ 0x4c
 8002926:	2204      	movs	r2, #4
 8002928:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	334c      	adds	r3, #76	@ 0x4c
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe ff13 	bl	800176c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002946:	e022      	b.n	800298e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	334c      	adds	r3, #76	@ 0x4c
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002972:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800297a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	6093      	str	r3, [r2, #8]
 80029a0:	e217      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 fc16 	bl	80051dc <USB_ReadChInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ba:	d11b      	bne.n	80029f4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	@ 0x4d
 80029cc:	2209      	movs	r2, #9
 80029ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fd71 	bl	80054c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f0:	6093      	str	r3, [r2, #8]
 80029f2:	e1ee      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fbed 	bl	80051dc <USB_ReadChInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f040 81df 	bne.w	8002dcc <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334d      	adds	r3, #77	@ 0x4d
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f040 8093 	bne.w	8002b5e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	334d      	adds	r3, #77	@ 0x4d
 8002a48:	2202      	movs	r2, #2
 8002a4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	334c      	adds	r3, #76	@ 0x4c
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3326      	adds	r3, #38	@ 0x26
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d00b      	beq.n	8002a8e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3326      	adds	r3, #38	@ 0x26
 8002a86:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	f040 8190 	bne.w	8002dae <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	333d      	adds	r3, #61	@ 0x3d
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2d8      	uxtb	r0, r3
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	333d      	adds	r3, #61	@ 0x3d
 8002abe:	4602      	mov	r2, r0
 8002ac0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	799b      	ldrb	r3, [r3, #6]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	f040 8171 	bne.w	8002dae <HCD_HC_OUT_IRQHandler+0x954>
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3334      	adds	r3, #52	@ 0x34
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8165 	beq.w	8002dae <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3334      	adds	r3, #52	@ 0x34
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4403      	add	r3, r0
 8002b04:	3328      	adds	r3, #40	@ 0x28
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	440b      	add	r3, r1
 8002b0a:	1e59      	subs	r1, r3, #1
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4403      	add	r3, r0
 8002b1a:	3328      	adds	r3, #40	@ 0x28
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b22:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 813f 	beq.w	8002dae <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	333d      	adds	r3, #61	@ 0x3d
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	b2d8      	uxtb	r0, r3
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	333d      	adds	r3, #61	@ 0x3d
 8002b58:	4602      	mov	r2, r0
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e127      	b.n	8002dae <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	334d      	adds	r3, #77	@ 0x4d
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d120      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334d      	adds	r3, #77	@ 0x4d
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	331b      	adds	r3, #27
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	f040 8107 	bne.w	8002dae <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	334c      	adds	r3, #76	@ 0x4c
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e0fb      	b.n	8002dae <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	334d      	adds	r3, #77	@ 0x4d
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d13a      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	334d      	adds	r3, #77	@ 0x4d
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	334c      	adds	r3, #76	@ 0x4c
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	331b      	adds	r3, #27
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	f040 80d1 	bne.w	8002dae <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	331b      	adds	r3, #27
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	0151      	lsls	r1, r2, #5
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	440a      	add	r2, r1
 8002c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3e:	6053      	str	r3, [r2, #4]
 8002c40:	e0b5      	b.n	8002dae <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	334d      	adds	r3, #77	@ 0x4d
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d114      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	334d      	adds	r3, #77	@ 0x4d
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	334c      	adds	r3, #76	@ 0x4c
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e095      	b.n	8002dae <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	334d      	adds	r3, #77	@ 0x4d
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d114      	bne.n	8002cc2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	334d      	adds	r3, #77	@ 0x4d
 8002ca8:	2202      	movs	r2, #2
 8002caa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	334c      	adds	r3, #76	@ 0x4c
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e075      	b.n	8002dae <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	334d      	adds	r3, #77	@ 0x4d
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b07      	cmp	r3, #7
 8002cd6:	d00a      	beq.n	8002cee <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	d170      	bne.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	334d      	adds	r3, #77	@ 0x4d
 8002cfe:	2202      	movs	r2, #2
 8002d00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3344      	adds	r3, #68	@ 0x44
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c59      	adds	r1, r3, #1
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4403      	add	r3, r0
 8002d22:	3344      	adds	r3, #68	@ 0x44
 8002d24:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3344      	adds	r3, #68	@ 0x44
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d914      	bls.n	8002d66 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3344      	adds	r3, #68	@ 0x44
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	334c      	adds	r3, #76	@ 0x4c
 8002d60:	2204      	movs	r2, #4
 8002d62:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d64:	e022      	b.n	8002dac <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	334c      	adds	r3, #76	@ 0x4c
 8002d76:	2202      	movs	r2, #2
 8002d78:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d90:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d98:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dac:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	334c      	adds	r3, #76	@ 0x4c
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fe fcd1 	bl	800176c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002dca:	e002      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002dd0:	bf00      	nop
  }
}
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	0c5b      	lsrs	r3, r3, #17
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d004      	beq.n	8002e1e <HCD_RXQLVL_IRQHandler+0x46>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	f000 80b6 	beq.w	8002f88 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e1c:	e0b7      	b.n	8002f8e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80b3 	beq.w	8002f8c <HCD_RXQLVL_IRQHandler+0x1b4>
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	332c      	adds	r3, #44	@ 0x2c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a7 	beq.w	8002f8c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3338      	adds	r3, #56	@ 0x38
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	18d1      	adds	r1, r2, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4403      	add	r3, r0
 8002e62:	3334      	adds	r3, #52	@ 0x34
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4299      	cmp	r1, r3
 8002e68:	f200 8083 	bhi.w	8002f72 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	332c      	adds	r3, #44	@ 0x2c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	b292      	uxth	r2, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f002 f93d 	bl	8005106 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	332c      	adds	r3, #44	@ 0x2c
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	18d1      	adds	r1, r2, r3
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4403      	add	r3, r0
 8002eb0:	332c      	adds	r3, #44	@ 0x2c
 8002eb2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3338      	adds	r3, #56	@ 0x38
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	18d1      	adds	r1, r2, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4403      	add	r3, r0
 8002ed8:	3338      	adds	r3, #56	@ 0x38
 8002eda:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	0cdb      	lsrs	r3, r3, #19
 8002eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3328      	adds	r3, #40	@ 0x28
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d13f      	bne.n	8002f8c <HCD_RXQLVL_IRQHandler+0x1b4>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03c      	beq.n	8002f8c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f28:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f30:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	333c      	adds	r3, #60	@ 0x3c
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2d8      	uxtb	r0, r3
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	333c      	adds	r3, #60	@ 0x3c
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	701a      	strb	r2, [r3, #0]
      break;
 8002f70:	e00c      	b.n	8002f8c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334c      	adds	r3, #76	@ 0x4c
 8002f82:	2204      	movs	r2, #4
 8002f84:	701a      	strb	r2, [r3, #0]
      break;
 8002f86:	e001      	b.n	8002f8c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002f8c:	bf00      	nop
  }
}
 8002f8e:	bf00      	nop
 8002f90:	3728      	adds	r7, #40	@ 0x28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002fc2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d10b      	bne.n	8002fe6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fe fb9f 	bl	800171c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d132      	bne.n	8003056 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d126      	bne.n	8003050 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7a5b      	ldrb	r3, [r3, #9]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d113      	bne.n	8003032 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003010:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003014:	d106      	bne.n	8003024 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2102      	movs	r1, #2
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fa01 	bl	8005424 <USB_InitFSLSPClkSel>
 8003022:	e011      	b.n	8003048 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f002 f9fa 	bl	8005424 <USB_InitFSLSPClkSel>
 8003030:	e00a      	b.n	8003048 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	79db      	ldrb	r3, [r3, #7]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d106      	bne.n	8003048 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003040:	461a      	mov	r2, r3
 8003042:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003046:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fe fb7b 	bl	8001744 <HAL_HCD_PortEnabled_Callback>
 800304e:	e002      	b.n	8003056 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fe fb81 	bl	8001758 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d103      	bne.n	8003068 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f043 0320 	orr.w	r3, r3, #32
 8003066:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e267      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d075      	beq.n	8003186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800309a:	4b88      	ldr	r3, [pc, #544]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d00c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b85      	ldr	r3, [pc, #532]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d112      	bne.n	80030d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b82      	ldr	r3, [pc, #520]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030be:	d10b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	4b7e      	ldr	r3, [pc, #504]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05b      	beq.n	8003184 <HAL_RCC_OscConfig+0x108>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d157      	bne.n	8003184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e242      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e0:	d106      	bne.n	80030f0 <HAL_RCC_OscConfig+0x74>
 80030e2:	4b76      	ldr	r3, [pc, #472]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a75      	ldr	r2, [pc, #468]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e01d      	b.n	800312c <HAL_RCC_OscConfig+0xb0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x98>
 80030fa:	4b70      	ldr	r3, [pc, #448]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6f      	ldr	r2, [pc, #444]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b6d      	ldr	r3, [pc, #436]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6c      	ldr	r2, [pc, #432]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0xb0>
 8003114:	4b69      	ldr	r3, [pc, #420]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a68      	ldr	r2, [pc, #416]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b66      	ldr	r3, [pc, #408]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a65      	ldr	r2, [pc, #404]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fd fe7a 	bl	8000e2c <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fd fe76 	bl	8000e2c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	@ 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e207      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b5b      	ldr	r3, [pc, #364]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0xc0>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd fe66 	bl	8000e2c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd fe62 	bl	8000e2c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	@ 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1f3      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	4b51      	ldr	r3, [pc, #324]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0xe8>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d063      	beq.n	800325a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003192:	4b4a      	ldr	r3, [pc, #296]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319e:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d11c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b44      	ldr	r3, [pc, #272]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x152>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e1c7      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4937      	ldr	r1, [pc, #220]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	e03a      	b.n	800325a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b34      	ldr	r3, [pc, #208]	@ (80032c0 <HAL_RCC_OscConfig+0x244>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fd fe1b 	bl	8000e2c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fa:	f7fd fe17 	bl	8000e2c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1a8      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	4b2b      	ldr	r3, [pc, #172]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b28      	ldr	r3, [pc, #160]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4925      	ldr	r1, [pc, #148]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322e:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <HAL_RCC_OscConfig+0x244>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fd fdfa 	bl	8000e2c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323c:	f7fd fdf6 	bl	8000e2c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e187      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d036      	beq.n	80032d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_RCC_OscConfig+0x248>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fd fdda 	bl	8000e2c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327c:	f7fd fdd6 	bl	8000e2c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e167      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_RCC_OscConfig+0x240>)
 8003290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x200>
 800329a:	e01b      	b.n	80032d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_RCC_OscConfig+0x248>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fdc3 	bl	8000e2c <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	e00e      	b.n	80032c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fd fdbf 	bl	8000e2c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d907      	bls.n	80032c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e150      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
 80032bc:	40023800 	.word	0x40023800
 80032c0:	42470000 	.word	0x42470000
 80032c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	4b88      	ldr	r3, [pc, #544]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ea      	bne.n	80032aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8097 	beq.w	8003410 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e6:	4b81      	ldr	r3, [pc, #516]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	4b7d      	ldr	r3, [pc, #500]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a7c      	ldr	r2, [pc, #496]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b7a      	ldr	r3, [pc, #488]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b77      	ldr	r3, [pc, #476]	@ (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331e:	4b74      	ldr	r3, [pc, #464]	@ (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a73      	ldr	r2, [pc, #460]	@ (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7fd fd7f 	bl	8000e2c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003332:	f7fd fd7b 	bl	8000e2c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e10c      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	4b6a      	ldr	r3, [pc, #424]	@ (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x2ea>
 8003358:	4b64      	ldr	r3, [pc, #400]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a63      	ldr	r2, [pc, #396]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
 8003364:	e01c      	b.n	80033a0 <HAL_RCC_OscConfig+0x324>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b05      	cmp	r3, #5
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x30c>
 800336e:	4b5f      	ldr	r3, [pc, #380]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003372:	4a5e      	ldr	r2, [pc, #376]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003374:	f043 0304 	orr.w	r3, r3, #4
 8003378:	6713      	str	r3, [r2, #112]	@ 0x70
 800337a:	4b5c      	ldr	r3, [pc, #368]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	4a5b      	ldr	r2, [pc, #364]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	@ 0x70
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0x324>
 8003388:	4b58      	ldr	r3, [pc, #352]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	4a57      	ldr	r2, [pc, #348]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	@ 0x70
 8003394:	4b55      	ldr	r3, [pc, #340]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a54      	ldr	r2, [pc, #336]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 0304 	bic.w	r3, r3, #4
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fd fd40 	bl	8000e2c <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fd fd3c 	bl	8000e2c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0cb      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	4b49      	ldr	r3, [pc, #292]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0ee      	beq.n	80033b0 <HAL_RCC_OscConfig+0x334>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d4:	f7fd fd2a 	bl	8000e2c <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033dc:	f7fd fd26 	bl	8000e2c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0b5      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	4b3e      	ldr	r3, [pc, #248]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ee      	bne.n	80033dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003404:	4b39      	ldr	r3, [pc, #228]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	4a38      	ldr	r2, [pc, #224]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800340a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800340e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a1 	beq.w	800355c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800341a:	4b34      	ldr	r3, [pc, #208]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b08      	cmp	r3, #8
 8003424:	d05c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d141      	bne.n	80034b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <HAL_RCC_OscConfig+0x478>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd fcfa 	bl	8000e2c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fd fcf6 	bl	8000e2c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e087      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	3b01      	subs	r3, #1
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	491b      	ldr	r1, [pc, #108]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_RCC_OscConfig+0x478>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd fccf 	bl	8000e2c <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003492:	f7fd fccb 	bl	8000e2c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e05c      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x416>
 80034b0:	e054      	b.n	800355c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <HAL_RCC_OscConfig+0x478>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fd fcb8 	bl	8000e2c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fd fcb4 	bl	8000e2c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e045      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_RCC_OscConfig+0x470>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x444>
 80034de:	e03d      	b.n	800355c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e038      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000
 80034f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCC_OscConfig+0x4ec>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d028      	beq.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d121      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d11a      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800352e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	3b01      	subs	r3, #1
 8003542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800

0800356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0cc      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b68      	ldr	r3, [pc, #416]	@ (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d90c      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b65      	ldr	r3, [pc, #404]	@ (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b63      	ldr	r3, [pc, #396]	@ (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b8      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c0:	4b59      	ldr	r3, [pc, #356]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a58      	ldr	r2, [pc, #352]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d8:	4b53      	ldr	r3, [pc, #332]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a52      	ldr	r2, [pc, #328]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b50      	ldr	r3, [pc, #320]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	494d      	ldr	r1, [pc, #308]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d044      	beq.n	800368c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b47      	ldr	r3, [pc, #284]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d119      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07f      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d003      	beq.n	800362a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	2b03      	cmp	r3, #3
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	4b3f      	ldr	r3, [pc, #252]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06f      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363a:	4b3b      	ldr	r3, [pc, #236]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e067      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364a:	4b37      	ldr	r3, [pc, #220]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4934      	ldr	r1, [pc, #208]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800365c:	f7fd fbe6 	bl	8000e2c <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	e00a      	b.n	800367a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003664:	f7fd fbe2 	bl	8000e2c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e04f      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 020c 	and.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1eb      	bne.n	8003664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800368c:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d20c      	bcs.n	80036b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b22      	ldr	r3, [pc, #136]	@ (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e032      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c0:	4b19      	ldr	r3, [pc, #100]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4916      	ldr	r1, [pc, #88]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036de:	4b12      	ldr	r3, [pc, #72]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	490e      	ldr	r1, [pc, #56]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036f2:	f000 f821 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	490a      	ldr	r1, [pc, #40]	@ (800372c <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	5ccb      	ldrb	r3, [r1, r3]
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	4a09      	ldr	r2, [pc, #36]	@ (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800370e:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fb46 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023c00 	.word	0x40023c00
 8003728:	40023800 	.word	0x40023800
 800372c:	08005770 	.word	0x08005770
 8003730:	20000000 	.word	0x20000000
 8003734:	20000004 	.word	0x20000004

08003738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800373c:	b094      	sub	sp, #80	@ 0x50
 800373e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003750:	4b79      	ldr	r3, [pc, #484]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d00d      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x40>
 800375c:	2b08      	cmp	r3, #8
 800375e:	f200 80e1 	bhi.w	8003924 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x34>
 8003766:	2b04      	cmp	r3, #4
 8003768:	d003      	beq.n	8003772 <HAL_RCC_GetSysClockFreq+0x3a>
 800376a:	e0db      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b73      	ldr	r3, [pc, #460]	@ (800393c <HAL_RCC_GetSysClockFreq+0x204>)
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003770:	e0db      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003772:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x208>)
 8003774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003776:	e0d8      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003778:	4b6f      	ldr	r3, [pc, #444]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003780:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003782:	4b6d      	ldr	r3, [pc, #436]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d063      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378e:	4b6a      	ldr	r3, [pc, #424]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	099b      	lsrs	r3, r3, #6
 8003794:	2200      	movs	r2, #0
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003798:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a2:	2300      	movs	r3, #0
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037aa:	4622      	mov	r2, r4
 80037ac:	462b      	mov	r3, r5
 80037ae:	f04f 0000 	mov.w	r0, #0
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	0159      	lsls	r1, r3, #5
 80037b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037bc:	0150      	lsls	r0, r2, #5
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4621      	mov	r1, r4
 80037c4:	1a51      	subs	r1, r2, r1
 80037c6:	6139      	str	r1, [r7, #16]
 80037c8:	4629      	mov	r1, r5
 80037ca:	eb63 0301 	sbc.w	r3, r3, r1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037dc:	4659      	mov	r1, fp
 80037de:	018b      	lsls	r3, r1, #6
 80037e0:	4651      	mov	r1, sl
 80037e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e6:	4651      	mov	r1, sl
 80037e8:	018a      	lsls	r2, r1, #6
 80037ea:	4651      	mov	r1, sl
 80037ec:	ebb2 0801 	subs.w	r8, r2, r1
 80037f0:	4659      	mov	r1, fp
 80037f2:	eb63 0901 	sbc.w	r9, r3, r1
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380a:	4690      	mov	r8, r2
 800380c:	4699      	mov	r9, r3
 800380e:	4623      	mov	r3, r4
 8003810:	eb18 0303 	adds.w	r3, r8, r3
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	462b      	mov	r3, r5
 8003818:	eb49 0303 	adc.w	r3, r9, r3
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800382a:	4629      	mov	r1, r5
 800382c:	024b      	lsls	r3, r1, #9
 800382e:	4621      	mov	r1, r4
 8003830:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003834:	4621      	mov	r1, r4
 8003836:	024a      	lsls	r2, r1, #9
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800383e:	2200      	movs	r2, #0
 8003840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003848:	f7fc fcbe 	bl	80001c8 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003854:	e058      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003856:	4b38      	ldr	r3, [pc, #224]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	2200      	movs	r2, #0
 800385e:	4618      	mov	r0, r3
 8003860:	4611      	mov	r1, r2
 8003862:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	2300      	movs	r3, #0
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
 800386c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	0159      	lsls	r1, r3, #5
 800387e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003882:	0150      	lsls	r0, r2, #5
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4641      	mov	r1, r8
 800388a:	ebb2 0a01 	subs.w	sl, r2, r1
 800388e:	4649      	mov	r1, r9
 8003890:	eb63 0b01 	sbc.w	fp, r3, r1
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038a8:	ebb2 040a 	subs.w	r4, r2, sl
 80038ac:	eb63 050b 	sbc.w	r5, r3, fp
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	00eb      	lsls	r3, r5, #3
 80038ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038be:	00e2      	lsls	r2, r4, #3
 80038c0:	4614      	mov	r4, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	18e3      	adds	r3, r4, r3
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	464b      	mov	r3, r9
 80038cc:	eb45 0303 	adc.w	r3, r5, r3
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038de:	4629      	mov	r1, r5
 80038e0:	028b      	lsls	r3, r1, #10
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e8:	4621      	mov	r1, r4
 80038ea:	028a      	lsls	r2, r1, #10
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f2:	2200      	movs	r2, #0
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	61fa      	str	r2, [r7, #28]
 80038f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fc:	f7fc fc64 	bl	80001c8 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4613      	mov	r3, r2
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	3301      	adds	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003918:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003922:	e002      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCC_GetSysClockFreq+0x204>)
 8003926:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800392c:	4618      	mov	r0, r3
 800392e:	3750      	adds	r7, #80	@ 0x50
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	00f42400 	.word	0x00f42400
 8003940:	007a1200 	.word	0x007a1200

08003944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003960:	f7ff fff0 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0a9b      	lsrs	r3, r3, #10
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	08005780 	.word	0x08005780

08003984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003988:	f7ff ffdc 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0b5b      	lsrs	r3, r3, #13
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08005780 	.word	0x08005780

080039ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e041      	b.n	8003a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd f83c 	bl	8000a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f000 fbfa 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e041      	b.n	8003ae0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f839 	bl	8003ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f000 fbab 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <HAL_TIM_PWM_Start+0x24>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e022      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d109      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x3e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e015      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d109      	bne.n	8003b54 <HAL_TIM_PWM_Start+0x58>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e008      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07c      	b.n	8003c68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x82>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b7c:	e013      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x92>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b8c:	e00b      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_PWM_Start+0xa2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b9c:	e003      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fe0e 	bl	80047d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c70 <HAL_TIM_PWM_Start+0x174>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0xcc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c74 <HAL_TIM_PWM_Start+0x178>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_PWM_Start+0xd0>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_TIM_PWM_Start+0xd2>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <HAL_TIM_PWM_Start+0x174>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf4:	d01d      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <HAL_TIM_PWM_Start+0x17c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_TIM_PWM_Start+0x180>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_TIM_PWM_Start+0x184>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a16      	ldr	r2, [pc, #88]	@ (8003c74 <HAL_TIM_PWM_Start+0x178>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a18      	ldr	r2, [pc, #96]	@ (8003c84 <HAL_TIM_PWM_Start+0x188>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a16      	ldr	r2, [pc, #88]	@ (8003c88 <HAL_TIM_PWM_Start+0x18c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d010      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	e007      	b.n	8003c66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40001800 	.word	0x40001800

08003c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d020      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01b      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0202 	mvn.w	r2, #2
 8003cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa65 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa57 	bl	8004192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fa68 	bl	80041ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0204 	mvn.w	r2, #4
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa3f 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa31 	bl	8004192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fa42 	bl	80041ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0208 	mvn.w	r2, #8
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fa19 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa0b 	bl	8004192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa1c 	bl	80041ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d020      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01b      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0210 	mvn.w	r2, #16
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2208      	movs	r2, #8
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9f3 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9e5 	bl	8004192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f9f6 	bl	80041ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0201 	mvn.w	r2, #1
 8003df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f9c3 	bl	800417e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fd86 	bl	8004928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00c      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9c7 	bl	80041ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0220 	mvn.w	r2, #32
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fd58 	bl	8004914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0ae      	b.n	8003fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	f200 809f 	bhi.w	8003fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003fd9 	.word	0x08003fd9
 8003ea8:	08003fd9 	.word	0x08003fd9
 8003eac:	08003fd9 	.word	0x08003fd9
 8003eb0:	08003f15 	.word	0x08003f15
 8003eb4:	08003fd9 	.word	0x08003fd9
 8003eb8:	08003fd9 	.word	0x08003fd9
 8003ebc:	08003fd9 	.word	0x08003fd9
 8003ec0:	08003f57 	.word	0x08003f57
 8003ec4:	08003fd9 	.word	0x08003fd9
 8003ec8:	08003fd9 	.word	0x08003fd9
 8003ecc:	08003fd9 	.word	0x08003fd9
 8003ed0:	08003f97 	.word	0x08003f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fa2e 	bl	800433c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0208 	orr.w	r2, r2, #8
 8003eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0204 	bic.w	r2, r2, #4
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6999      	ldr	r1, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	619a      	str	r2, [r3, #24]
      break;
 8003f12:	e064      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fa7e 	bl	800441c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6999      	ldr	r1, [r3, #24]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	021a      	lsls	r2, r3, #8
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	619a      	str	r2, [r3, #24]
      break;
 8003f54:	e043      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fad3 	bl	8004508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0208 	orr.w	r2, r2, #8
 8003f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0204 	bic.w	r2, r2, #4
 8003f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69d9      	ldr	r1, [r3, #28]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	61da      	str	r2, [r3, #28]
      break;
 8003f94:	e023      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fb27 	bl	80045f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69d9      	ldr	r1, [r3, #28]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	61da      	str	r2, [r3, #28]
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x1c>
 8004008:	2302      	movs	r3, #2
 800400a:	e0b4      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x186>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004044:	d03e      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404a:	f200 8087 	bhi.w	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004052:	f000 8086 	beq.w	8004162 <HAL_TIM_ConfigClockSource+0x172>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405a:	d87f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b70      	cmp	r3, #112	@ 0x70
 800405e:	d01a      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xa6>
 8004060:	2b70      	cmp	r3, #112	@ 0x70
 8004062:	d87b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b60      	cmp	r3, #96	@ 0x60
 8004066:	d050      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x11a>
 8004068:	2b60      	cmp	r3, #96	@ 0x60
 800406a:	d877      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b50      	cmp	r3, #80	@ 0x50
 800406e:	d03c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xfa>
 8004070:	2b50      	cmp	r3, #80	@ 0x50
 8004072:	d873      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b40      	cmp	r3, #64	@ 0x40
 8004076:	d058      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x13a>
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d86f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b30      	cmp	r3, #48	@ 0x30
 800407e:	d064      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b30      	cmp	r3, #48	@ 0x30
 8004082:	d86b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d060      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d867      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b10      	cmp	r3, #16
 8004092:	d05a      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	e062      	b.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a6:	f000 fb73 	bl	8004790 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e04f      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040d4:	f000 fb5c 	bl	8004790 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e6:	609a      	str	r2, [r3, #8]
      break;
 80040e8:	e03c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fad0 	bl	800469c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2150      	movs	r1, #80	@ 0x50
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fb29 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 8004108:	e02c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004116:	461a      	mov	r2, r3
 8004118:	f000 faef 	bl	80046fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2160      	movs	r1, #96	@ 0x60
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fb19 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 8004128:	e01c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	461a      	mov	r2, r3
 8004138:	f000 fab0 	bl	800469c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fb09 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 8004148:	e00c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 fb00 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 800415a:	e003      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e000      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a46      	ldr	r2, [pc, #280]	@ (8004310 <TIM_Base_SetConfig+0x12c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d00f      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a43      	ldr	r2, [pc, #268]	@ (8004314 <TIM_Base_SetConfig+0x130>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00b      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a42      	ldr	r2, [pc, #264]	@ (8004318 <TIM_Base_SetConfig+0x134>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a41      	ldr	r2, [pc, #260]	@ (800431c <TIM_Base_SetConfig+0x138>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a40      	ldr	r2, [pc, #256]	@ (8004320 <TIM_Base_SetConfig+0x13c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d108      	bne.n	8004236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a35      	ldr	r2, [pc, #212]	@ (8004310 <TIM_Base_SetConfig+0x12c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004244:	d027      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <TIM_Base_SetConfig+0x130>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d023      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <TIM_Base_SetConfig+0x134>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a30      	ldr	r2, [pc, #192]	@ (800431c <TIM_Base_SetConfig+0x138>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2f      	ldr	r2, [pc, #188]	@ (8004320 <TIM_Base_SetConfig+0x13c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d017      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2e      	ldr	r2, [pc, #184]	@ (8004324 <TIM_Base_SetConfig+0x140>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2d      	ldr	r2, [pc, #180]	@ (8004328 <TIM_Base_SetConfig+0x144>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00f      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <TIM_Base_SetConfig+0x148>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2b      	ldr	r2, [pc, #172]	@ (8004330 <TIM_Base_SetConfig+0x14c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2a      	ldr	r2, [pc, #168]	@ (8004334 <TIM_Base_SetConfig+0x150>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a29      	ldr	r2, [pc, #164]	@ (8004338 <TIM_Base_SetConfig+0x154>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a10      	ldr	r2, [pc, #64]	@ (8004310 <TIM_Base_SetConfig+0x12c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_Base_SetConfig+0xf8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a12      	ldr	r2, [pc, #72]	@ (8004320 <TIM_Base_SetConfig+0x13c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]
  }
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40010400 	.word	0x40010400
 8004324:	40014000 	.word	0x40014000
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800
 8004330:	40001800 	.word	0x40001800
 8004334:	40001c00 	.word	0x40001c00
 8004338:	40002000 	.word	0x40002000

0800433c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f023 0201 	bic.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 0302 	bic.w	r3, r3, #2
 8004384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a20      	ldr	r2, [pc, #128]	@ (8004414 <TIM_OC1_SetConfig+0xd8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_OC1_SetConfig+0x64>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a1f      	ldr	r2, [pc, #124]	@ (8004418 <TIM_OC1_SetConfig+0xdc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10c      	bne.n	80043ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0308 	bic.w	r3, r3, #8
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 0304 	bic.w	r3, r3, #4
 80043b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a15      	ldr	r2, [pc, #84]	@ (8004414 <TIM_OC1_SetConfig+0xd8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_OC1_SetConfig+0x8e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a14      	ldr	r2, [pc, #80]	@ (8004418 <TIM_OC1_SetConfig+0xdc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d111      	bne.n	80043ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40010000 	.word	0x40010000
 8004418:	40010400 	.word	0x40010400

0800441c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f023 0210 	bic.w	r2, r3, #16
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0320 	bic.w	r3, r3, #32
 8004466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a22      	ldr	r2, [pc, #136]	@ (8004500 <TIM_OC2_SetConfig+0xe4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_OC2_SetConfig+0x68>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a21      	ldr	r2, [pc, #132]	@ (8004504 <TIM_OC2_SetConfig+0xe8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10d      	bne.n	80044a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800448a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800449e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a17      	ldr	r2, [pc, #92]	@ (8004500 <TIM_OC2_SetConfig+0xe4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_OC2_SetConfig+0x94>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a16      	ldr	r2, [pc, #88]	@ (8004504 <TIM_OC2_SetConfig+0xe8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d113      	bne.n	80044d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40010400 	.word	0x40010400

08004508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a21      	ldr	r2, [pc, #132]	@ (80045e8 <TIM_OC3_SetConfig+0xe0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_OC3_SetConfig+0x66>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a20      	ldr	r2, [pc, #128]	@ (80045ec <TIM_OC3_SetConfig+0xe4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10d      	bne.n	800458a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a16      	ldr	r2, [pc, #88]	@ (80045e8 <TIM_OC3_SetConfig+0xe0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_OC3_SetConfig+0x92>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a15      	ldr	r2, [pc, #84]	@ (80045ec <TIM_OC3_SetConfig+0xe4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d113      	bne.n	80045c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40010400 	.word	0x40010400

080045f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800463a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a12      	ldr	r2, [pc, #72]	@ (8004694 <TIM_OC4_SetConfig+0xa4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC4_SetConfig+0x68>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a11      	ldr	r2, [pc, #68]	@ (8004698 <TIM_OC4_SetConfig+0xa8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d109      	bne.n	800466c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800465e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	019b      	lsls	r3, r3, #6
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	40010400 	.word	0x40010400

0800469c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f023 030a 	bic.w	r3, r3, #10
 80046d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	621a      	str	r2, [r3, #32]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b087      	sub	sp, #28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f023 0210 	bic.w	r2, r3, #16
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	031b      	lsls	r3, r3, #12
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	f043 0307 	orr.w	r3, r3, #7
 800477c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	021a      	lsls	r2, r3, #8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2201      	movs	r2, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	401a      	ands	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004830:	2302      	movs	r3, #2
 8004832:	e05a      	b.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a21      	ldr	r2, [pc, #132]	@ (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004880:	d01d      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1d      	ldr	r2, [pc, #116]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1b      	ldr	r2, [pc, #108]	@ (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1a      	ldr	r2, [pc, #104]	@ (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a18      	ldr	r2, [pc, #96]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a17      	ldr	r2, [pc, #92]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a15      	ldr	r2, [pc, #84]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10c      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800
 8004904:	40000c00 	.word	0x40000c00
 8004908:	40010400 	.word	0x40010400
 800490c:	40014000 	.word	0x40014000
 8004910:	40001800 	.word	0x40001800

08004914 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e042      	b.n	80049d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc f8d2 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2224      	movs	r2, #36	@ 0x24
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800497e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f82b 	bl	80049dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e0:	b0c0      	sub	sp, #256	@ 0x100
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	68d9      	ldr	r1, [r3, #12]
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	ea40 0301 	orr.w	r3, r0, r1
 8004a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a34:	f021 010c 	bic.w	r1, r1, #12
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a42:	430b      	orrs	r3, r1
 8004a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a56:	6999      	ldr	r1, [r3, #24]
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	ea40 0301 	orr.w	r3, r0, r1
 8004a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b8f      	ldr	r3, [pc, #572]	@ (8004ca8 <UART_SetConfig+0x2cc>)
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d005      	beq.n	8004a7c <UART_SetConfig+0xa0>
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b8d      	ldr	r3, [pc, #564]	@ (8004cac <UART_SetConfig+0x2d0>)
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d104      	bne.n	8004a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7fe ff82 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8004a80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a84:	e003      	b.n	8004a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a86:	f7fe ff69 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a98:	f040 810c 	bne.w	8004cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004abe:	4621      	mov	r1, r4
 8004ac0:	eb12 0801 	adds.w	r8, r2, r1
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	eb43 0901 	adc.w	r9, r3, r1
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ade:	4690      	mov	r8, r2
 8004ae0:	4699      	mov	r9, r3
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	eb18 0303 	adds.w	r3, r8, r3
 8004ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004aec:	462b      	mov	r3, r5
 8004aee:	eb49 0303 	adc.w	r3, r9, r3
 8004af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	18db      	adds	r3, r3, r3
 8004b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b10:	4613      	mov	r3, r2
 8004b12:	eb42 0303 	adc.w	r3, r2, r3
 8004b16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b20:	f7fb fb52 	bl	80001c8 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4b61      	ldr	r3, [pc, #388]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	011c      	lsls	r4, r3, #4
 8004b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b44:	4642      	mov	r2, r8
 8004b46:	464b      	mov	r3, r9
 8004b48:	1891      	adds	r1, r2, r2
 8004b4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b4c:	415b      	adcs	r3, r3
 8004b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b54:	4641      	mov	r1, r8
 8004b56:	eb12 0a01 	adds.w	sl, r2, r1
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b74:	4692      	mov	sl, r2
 8004b76:	469b      	mov	fp, r3
 8004b78:	4643      	mov	r3, r8
 8004b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b82:	464b      	mov	r3, r9
 8004b84:	eb4b 0303 	adc.w	r3, fp, r3
 8004b88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	18db      	adds	r3, r3, r3
 8004ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	eb42 0303 	adc.w	r3, r2, r3
 8004bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bb6:	f7fb fb07 	bl	80001c8 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2264      	movs	r2, #100	@ 0x64
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	1acb      	subs	r3, r1, r3
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bd6:	4b36      	ldr	r3, [pc, #216]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004be4:	441c      	add	r4, r3
 8004be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	1891      	adds	r1, r2, r2
 8004bfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c00:	415b      	adcs	r3, r3
 8004c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c08:	4641      	mov	r1, r8
 8004c0a:	1851      	adds	r1, r2, r1
 8004c0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c0e:	4649      	mov	r1, r9
 8004c10:	414b      	adcs	r3, r1
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c20:	4659      	mov	r1, fp
 8004c22:	00cb      	lsls	r3, r1, #3
 8004c24:	4651      	mov	r1, sl
 8004c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	00ca      	lsls	r2, r1, #3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4619      	mov	r1, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	4642      	mov	r2, r8
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c3c:	464b      	mov	r3, r9
 8004c3e:	460a      	mov	r2, r1
 8004c40:	eb42 0303 	adc.w	r3, r2, r3
 8004c44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	18db      	adds	r3, r3, r3
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c62:	4613      	mov	r3, r2
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c72:	f7fb faa9 	bl	80001c8 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	2164      	movs	r1, #100	@ 0x64
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	3332      	adds	r3, #50	@ 0x32
 8004c8e:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <UART_SetConfig+0x2d4>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	f003 0207 	and.w	r2, r3, #7
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4422      	add	r2, r4
 8004ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ca4:	e106      	b.n	8004eb4 <UART_SetConfig+0x4d8>
 8004ca6:	bf00      	nop
 8004ca8:	40011000 	.word	0x40011000
 8004cac:	40011400 	.word	0x40011400
 8004cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	464b      	mov	r3, r9
 8004cca:	1891      	adds	r1, r2, r2
 8004ccc:	6239      	str	r1, [r7, #32]
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	1854      	adds	r4, r2, r1
 8004cda:	4649      	mov	r1, r9
 8004cdc:	eb43 0501 	adc.w	r5, r3, r1
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	00eb      	lsls	r3, r5, #3
 8004cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cee:	00e2      	lsls	r2, r4, #3
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	461d      	mov	r5, r3
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	18e3      	adds	r3, r4, r3
 8004cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	eb45 0303 	adc.w	r3, r5, r3
 8004d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d22:	4629      	mov	r1, r5
 8004d24:	008b      	lsls	r3, r1, #2
 8004d26:	4621      	mov	r1, r4
 8004d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	008a      	lsls	r2, r1, #2
 8004d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d34:	f7fb fa48 	bl	80001c8 <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4b60      	ldr	r3, [pc, #384]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	011c      	lsls	r4, r3, #4
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	61b9      	str	r1, [r7, #24]
 8004d60:	415b      	adcs	r3, r3
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d68:	4641      	mov	r1, r8
 8004d6a:	1851      	adds	r1, r2, r1
 8004d6c:	6139      	str	r1, [r7, #16]
 8004d6e:	4649      	mov	r1, r9
 8004d70:	414b      	adcs	r3, r1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d80:	4659      	mov	r1, fp
 8004d82:	00cb      	lsls	r3, r1, #3
 8004d84:	4651      	mov	r1, sl
 8004d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	00ca      	lsls	r2, r1, #3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	4642      	mov	r2, r8
 8004d96:	189b      	adds	r3, r3, r2
 8004d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	460a      	mov	r2, r1
 8004da0:	eb42 0303 	adc.w	r3, r2, r3
 8004da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004db2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	008b      	lsls	r3, r1, #2
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dca:	4641      	mov	r1, r8
 8004dcc:	008a      	lsls	r2, r1, #2
 8004dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dd2:	f7fb f9f9 	bl	80001c8 <__aeabi_uldivmod>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004dde:	fba3 2301 	umull	r2, r3, r3, r1
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2264      	movs	r2, #100	@ 0x64
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	1acb      	subs	r3, r1, r3
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	3332      	adds	r3, #50	@ 0x32
 8004df0:	4a33      	ldr	r2, [pc, #204]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dfc:	441c      	add	r4, r3
 8004dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e02:	2200      	movs	r2, #0
 8004e04:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e06:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	415b      	adcs	r3, r3
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	1851      	adds	r1, r2, r1
 8004e20:	6039      	str	r1, [r7, #0]
 8004e22:	4649      	mov	r1, r9
 8004e24:	414b      	adcs	r3, r1
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e34:	4659      	mov	r1, fp
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3e:	4651      	mov	r1, sl
 8004e40:	00ca      	lsls	r2, r1, #3
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e4e:	464b      	mov	r3, r9
 8004e50:	460a      	mov	r2, r1
 8004e52:	eb42 0303 	adc.w	r3, r2, r3
 8004e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e62:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e70:	4649      	mov	r1, r9
 8004e72:	008b      	lsls	r3, r1, #2
 8004e74:	4641      	mov	r1, r8
 8004e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	008a      	lsls	r2, r1, #2
 8004e7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e82:	f7fb f9a1 	bl	80001c8 <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2164      	movs	r1, #100	@ 0x64
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	3332      	adds	r3, #50	@ 0x32
 8004e9e:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <UART_SetConfig+0x4e4>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f003 020f 	and.w	r2, r3, #15
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4422      	add	r2, r4
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec0:	51eb851f 	.word	0x51eb851f

08004ec4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	f107 001c 	add.w	r0, r7, #28
 8004ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ed6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d123      	bne.n	8004f26 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d105      	bne.n	8004f1a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f98d 	bl	800523a <USB_CoreReset>
 8004f20:	4603      	mov	r3, r0
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	e01b      	b.n	8004f5e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f981 	bl	800523a <USB_CoreReset>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f50:	e005      	b.n	8004f5e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f5e:	7fbb      	ldrb	r3, [r7, #30]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d10b      	bne.n	8004f7c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f043 0206 	orr.w	r2, r3, #6
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f88:	b004      	add	sp, #16
 8004f8a:	4770      	bx	lr

08004f8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f023 0201 	bic.w	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d115      	bne.n	8004ffc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fdc:	200a      	movs	r0, #10
 8004fde:	f7fb ff31 	bl	8000e44 <HAL_Delay>
      ms += 10U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	330a      	adds	r3, #10
 8004fe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f918 	bl	800521e <USB_GetMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d01e      	beq.n	8005032 <USB_SetCurrentMode+0x84>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ff8:	d9f0      	bls.n	8004fdc <USB_SetCurrentMode+0x2e>
 8004ffa:	e01a      	b.n	8005032 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d115      	bne.n	800502e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800500e:	200a      	movs	r0, #10
 8005010:	f7fb ff18 	bl	8000e44 <HAL_Delay>
      ms += 10U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	330a      	adds	r3, #10
 8005018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f8ff 	bl	800521e <USB_GetMode>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <USB_SetCurrentMode+0x84>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2bc7      	cmp	r3, #199	@ 0xc7
 800502a:	d9f0      	bls.n	800500e <USB_SetCurrentMode+0x60>
 800502c:	e001      	b.n	8005032 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e005      	b.n	800503e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2bc8      	cmp	r3, #200	@ 0xc8
 8005036:	d101      	bne.n	800503c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005060:	d901      	bls.n	8005066 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e01b      	b.n	800509e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	daf2      	bge.n	8005054 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800508a:	d901      	bls.n	8005090 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e006      	b.n	800509e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b20      	cmp	r3, #32
 800509a:	d0f0      	beq.n	800507e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050c2:	d901      	bls.n	80050c8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e018      	b.n	80050fa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	daf2      	bge.n	80050b6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2210      	movs	r2, #16
 80050d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050e6:	d901      	bls.n	80050ec <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d0f0      	beq.n	80050da <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005106:	b480      	push	{r7}
 8005108:	b08b      	sub	sp, #44	@ 0x2c
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	4613      	mov	r3, r2
 8005112:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	089b      	lsrs	r3, r3, #2
 8005120:	b29b      	uxth	r3, r3
 8005122:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	e014      	b.n	800515c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	601a      	str	r2, [r3, #0]
    pDest++;
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	3301      	adds	r3, #1
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	3301      	adds	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	3301      	adds	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	3301      	adds	r3, #1
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	429a      	cmp	r2, r3
 8005162:	d3e6      	bcc.n	8005132 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005164:	8bfb      	ldrh	r3, [r7, #30]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01e      	beq.n	80051a8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005174:	461a      	mov	r2, r3
 8005176:	f107 0310 	add.w	r3, r7, #16
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	fa22 f303 	lsr.w	r3, r2, r3
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	701a      	strb	r2, [r3, #0]
      i++;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	3301      	adds	r3, #1
 8005194:	623b      	str	r3, [r7, #32]
      pDest++;
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	3301      	adds	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800519c:	8bfb      	ldrh	r3, [r7, #30]
 800519e:	3b01      	subs	r3, #1
 80051a0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051a2:	8bfb      	ldrh	r3, [r7, #30]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ea      	bne.n	800517e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	372c      	adds	r7, #44	@ 0x2c
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4013      	ands	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ce:	68fb      	ldr	r3, [r7, #12]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005210:	68bb      	ldr	r3, [r7, #8]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0301 	and.w	r3, r3, #1
}
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005252:	d901      	bls.n	8005258 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e01b      	b.n	8005290 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	daf2      	bge.n	8005246 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f043 0201 	orr.w	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800527c:	d901      	bls.n	8005282 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e006      	b.n	8005290 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	d0f0      	beq.n	8005270 <USB_CoreReset+0x36>

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800529c:	b084      	sub	sp, #16
 800529e:	b580      	push	{r7, lr}
 80052a0:	b086      	sub	sp, #24
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d119      	bne.n	8005326 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10a      	bne.n	8005310 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005308:	f043 0304 	orr.w	r3, r3, #4
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e014      	b.n	800533a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800531e:	f023 0304 	bic.w	r3, r3, #4
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e009      	b.n	800533a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005334:	f023 0304 	bic.w	r3, r3, #4
 8005338:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800533a:	2110      	movs	r1, #16
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff fe82 	bl	8005046 <USB_FlushTxFifo>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff feac 	bl	80050aa <USB_FlushRxFifo>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e015      	b.n	800538e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536e:	461a      	mov	r2, r3
 8005370:	f04f 33ff 	mov.w	r3, #4294967295
 8005374:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005382:	461a      	mov	r2, r3
 8005384:	2300      	movs	r3, #0
 8005386:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3301      	adds	r3, #1
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005392:	461a      	mov	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4293      	cmp	r3, r2
 8005398:	d3e3      	bcc.n	8005362 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f04f 32ff 	mov.w	r2, #4294967295
 80053a6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a18      	ldr	r2, [pc, #96]	@ (800540c <USB_HostInit+0x170>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10b      	bne.n	80053c8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053b6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a15      	ldr	r2, [pc, #84]	@ (8005410 <USB_HostInit+0x174>)
 80053bc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a14      	ldr	r2, [pc, #80]	@ (8005414 <USB_HostInit+0x178>)
 80053c2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80053c6:	e009      	b.n	80053dc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2280      	movs	r2, #128	@ 0x80
 80053cc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a11      	ldr	r2, [pc, #68]	@ (8005418 <USB_HostInit+0x17c>)
 80053d2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a11      	ldr	r2, [pc, #68]	@ (800541c <USB_HostInit+0x180>)
 80053d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f043 0210 	orr.w	r2, r3, #16
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005420 <USB_HostInit+0x184>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005408:	b004      	add	sp, #16
 800540a:	4770      	bx	lr
 800540c:	40040000 	.word	0x40040000
 8005410:	01000200 	.word	0x01000200
 8005414:	00e00300 	.word	0x00e00300
 8005418:	00600080 	.word	0x00600080
 800541c:	004000e0 	.word	0x004000e0
 8005420:	a3200008 	.word	0xa3200008

08005424 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d107      	bne.n	8005476 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800546c:	461a      	mov	r2, r3
 800546e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005472:	6053      	str	r3, [r2, #4]
 8005474:	e00c      	b.n	8005490 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d107      	bne.n	800548c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005482:	461a      	mov	r2, r3
 8005484:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005488:	6053      	str	r3, [r2, #4]
 800548a:	e001      	b.n	8005490 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	b29b      	uxth	r3, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b089      	sub	sp, #36	@ 0x24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	0c9b      	lsrs	r3, r3, #18
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	0fdb      	lsrs	r3, r3, #31
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	0fdb      	lsrs	r3, r3, #31
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b20      	cmp	r3, #32
 8005524:	d10d      	bne.n	8005542 <USB_HC_Halt+0x82>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <USB_HC_Halt+0x82>
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d002      	beq.n	800553e <USB_HC_Halt+0x7e>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b03      	cmp	r3, #3
 800553c:	d101      	bne.n	8005542 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e0d8      	b.n	80056f4 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <USB_HC_Halt+0x8e>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d173      	bne.n	8005636 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800556c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d14a      	bne.n	8005610 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d133      	bne.n	80055ee <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055d2:	d82e      	bhi.n	8005632 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ea:	d0ec      	beq.n	80055c6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055ec:	e081      	b.n	80056f2 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	440a      	add	r2, r1
 8005604:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005608:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800560c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800560e:	e070      	b.n	80056f2 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	440a      	add	r2, r1
 8005626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800562a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800562e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005630:	e05f      	b.n	80056f2 <USB_HC_Halt+0x232>
            break;
 8005632:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005634:	e05d      	b.n	80056f2 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	440a      	add	r2, r1
 800564c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005650:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005654:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d133      	bne.n	80056ce <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	440a      	add	r2, r1
 800567c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005684:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056a4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056b2:	d81d      	bhi.n	80056f0 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ca:	d0ec      	beq.n	80056a6 <USB_HC_Halt+0x1e6>
 80056cc:	e011      	b.n	80056f2 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e000      	b.n	80056f2 <USB_HC_Halt+0x232>
          break;
 80056f0:	bf00      	nop
    }
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3724      	adds	r7, #36	@ 0x24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <memset>:
 8005700:	4402      	add	r2, r0
 8005702:	4603      	mov	r3, r0
 8005704:	4293      	cmp	r3, r2
 8005706:	d100      	bne.n	800570a <memset+0xa>
 8005708:	4770      	bx	lr
 800570a:	f803 1b01 	strb.w	r1, [r3], #1
 800570e:	e7f9      	b.n	8005704 <memset+0x4>

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4d0d      	ldr	r5, [pc, #52]	@ (8005748 <__libc_init_array+0x38>)
 8005714:	4c0d      	ldr	r4, [pc, #52]	@ (800574c <__libc_init_array+0x3c>)
 8005716:	1b64      	subs	r4, r4, r5
 8005718:	10a4      	asrs	r4, r4, #2
 800571a:	2600      	movs	r6, #0
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	4d0b      	ldr	r5, [pc, #44]	@ (8005750 <__libc_init_array+0x40>)
 8005722:	4c0c      	ldr	r4, [pc, #48]	@ (8005754 <__libc_init_array+0x44>)
 8005724:	f000 f818 	bl	8005758 <_init>
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	2600      	movs	r6, #0
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f855 3b04 	ldr.w	r3, [r5], #4
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	08005790 	.word	0x08005790
 800574c:	08005790 	.word	0x08005790
 8005750:	08005790 	.word	0x08005790
 8005754:	08005794 	.word	0x08005794

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
