
023_RTC_AlarmA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002754  08002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800276c  0800276c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800276c  0800276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002774  08002774  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002774  08002774  00003774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002778  08002778  00003778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800277c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000088  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008dee  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000171b  00000000  00000000  0000ce2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  0000e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d3  00000000  00000000  0000ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff5a  00000000  00000000  0000f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009749  00000000  00000000  0002f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d94  00000000  00000000  0003895e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd6f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e70  00000000  00000000  000fd738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000ff5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800273c 	.word	0x0800273c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800273c 	.word	0x0800273c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa74 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f808 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f928 	bl	8000718 <MX_GPIO_Init>
  MX_RTC_Init();
 80004c8:	f000 f870 	bl	80005ac <MX_RTC_Init>
  MX_USART1_UART_Init();
 80004cc:	f000 f8fa 	bl	80006c4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <main+0x18>

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	@ 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0320 	add.w	r3, r7, #32
 80004de:	2230      	movs	r2, #48	@ 0x30
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 f8fe 	bl	80026e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	4b29      	ldr	r3, [pc, #164]	@ (80005a4 <SystemClock_Config+0xd0>)
 80004fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000500:	4a28      	ldr	r2, [pc, #160]	@ (80005a4 <SystemClock_Config+0xd0>)
 8000502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000506:	6413      	str	r3, [r2, #64]	@ 0x40
 8000508:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <SystemClock_Config+0xd0>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <SystemClock_Config+0xd4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a22      	ldr	r2, [pc, #136]	@ (80005a8 <SystemClock_Config+0xd4>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <SystemClock_Config+0xd4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000530:	2309      	movs	r3, #9
 8000532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000538:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000548:	2308      	movs	r3, #8
 800054a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800054c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000550:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000556:	2307      	movs	r3, #7
 8000558:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fd16 	bl	8000f90 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800056a:	f000 f911 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000584:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2105      	movs	r1, #5
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff77 	bl	8001480 <HAL_RCC_ClockConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000598:	f000 f8fa 	bl	8000790 <Error_Handler>
  }
}
 800059c:	bf00      	nop
 800059e:	3750      	adds	r7, #80	@ 0x50
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40007000 	.word	0x40007000

080005ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b090      	sub	sp, #64	@ 0x40
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005c2:	2300      	movs	r3, #0
 80005c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2228      	movs	r2, #40	@ 0x28
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 f889 	bl	80026e4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005d2:	4b3a      	ldr	r3, [pc, #232]	@ (80006bc <MX_RTC_Init+0x110>)
 80005d4:	4a3a      	ldr	r2, [pc, #232]	@ (80006c0 <MX_RTC_Init+0x114>)
 80005d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005d8:	4b38      	ldr	r3, [pc, #224]	@ (80006bc <MX_RTC_Init+0x110>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005de:	4b37      	ldr	r3, [pc, #220]	@ (80006bc <MX_RTC_Init+0x110>)
 80005e0:	227f      	movs	r2, #127	@ 0x7f
 80005e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005e4:	4b35      	ldr	r3, [pc, #212]	@ (80006bc <MX_RTC_Init+0x110>)
 80005e6:	22ff      	movs	r2, #255	@ 0xff
 80005e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005ea:	4b34      	ldr	r3, [pc, #208]	@ (80006bc <MX_RTC_Init+0x110>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005f0:	4b32      	ldr	r3, [pc, #200]	@ (80006bc <MX_RTC_Init+0x110>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005f6:	4b31      	ldr	r3, [pc, #196]	@ (80006bc <MX_RTC_Init+0x110>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005fc:	482f      	ldr	r0, [pc, #188]	@ (80006bc <MX_RTC_Init+0x110>)
 80005fe:	f001 fa41 	bl	8001a84 <HAL_RTC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000608:	f000 f8c2 	bl	8000790 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800061e:	2300      	movs	r3, #0
 8000620:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	4823      	ldr	r0, [pc, #140]	@ (80006bc <MX_RTC_Init+0x110>)
 8000630:	f001 faab 	bl	8001b8a <HAL_RTC_SetTime>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800063a:	f000 f8a9 	bl	8000790 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800063e:	2301      	movs	r3, #1
 8000640:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000644:	2301      	movs	r3, #1
 8000646:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000656:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	4817      	ldr	r0, [pc, #92]	@ (80006bc <MX_RTC_Init+0x110>)
 8000660:	f001 fb2d 	bl	8001cbe <HAL_RTC_SetDate>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800066a:	f000 f891 	bl	8000790 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 12;
 800066e:	230c      	movs	r3, #12
 8000670:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_RTC_Init+0x110>)
 80006a6:	f001 fb8e 	bl	8001dc6 <HAL_RTC_SetAlarm>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80006b0:	f000 f86e 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3740      	adds	r7, #64	@ 0x40
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40002800 	.word	0x40002800

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f001 fd2e 	bl	800215c <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f843 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000048 	.word	0x20000048
 8000714:	40011000 	.word	0x40011000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_GPIO_Init+0x70>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <MX_GPIO_Init+0x70>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_GPIO_Init+0x70>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_GPIO_Init+0x70>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <MX_GPIO_Init+0x70>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_GPIO_Init+0x70>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_GPIO_Init+0x74>)
 800077c:	f000 fa6c 	bl	8000c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <Error_Handler+0x8>

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007aa:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007da:	2007      	movs	r0, #7
 80007dc:	f000 fa08 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <HAL_RTC_MspInit+0x4c>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d111      	bne.n	8000830 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800080c:	2302      	movs	r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000814:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f850 	bl	80018c0 <HAL_RCCEx_PeriphCLKConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000826:	f7ff ffb3 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800082a:	4b04      	ldr	r3, [pc, #16]	@ (800083c <HAL_RTC_MspInit+0x50>)
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40002800 	.word	0x40002800
 800083c:	42470e3c 	.word	0x42470e3c

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_UART_MspInit+0x84>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d12c      	bne.n	80008bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800089a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ac:	2307      	movs	r3, #7
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 80008b8:	f000 f9ce 	bl	8000c58 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40011000 	.word	0x40011000
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f000 f891 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800098c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000958:	f7ff ffea 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	@ (8000994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	@ (8000998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000982:	f001 feb7 	bl	80026f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fd97 	bl	80004b8 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800098c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	0800277c 	.word	0x0800277c
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	20000094 	.word	0x20000094

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f90d 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fede 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f917 	bl	8000c3e <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f8ed 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000090 	.word	0x20000090

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000090 	.word	0x20000090

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	@ (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	@ (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	@ 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	@ 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff47 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff5c 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffb0 	bl	8000bac <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e16b      	b.n	8000f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 815a 	bne.w	8000f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d130      	bne.n	8000d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	f003 0201 	and.w	r2, r3, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d017      	beq.n	8000d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80b4 	beq.w	8000f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b60      	ldr	r3, [pc, #384]	@ (8000f64 <HAL_GPIO_Init+0x30c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f64 <HAL_GPIO_Init+0x30c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b5d      	ldr	r3, [pc, #372]	@ (8000f64 <HAL_GPIO_Init+0x30c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8000f68 <HAL_GPIO_Init+0x310>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a52      	ldr	r2, [pc, #328]	@ (8000f6c <HAL_GPIO_Init+0x314>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d02b      	beq.n	8000e7e <HAL_GPIO_Init+0x226>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a51      	ldr	r2, [pc, #324]	@ (8000f70 <HAL_GPIO_Init+0x318>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d025      	beq.n	8000e7a <HAL_GPIO_Init+0x222>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a50      	ldr	r2, [pc, #320]	@ (8000f74 <HAL_GPIO_Init+0x31c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d01f      	beq.n	8000e76 <HAL_GPIO_Init+0x21e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4f      	ldr	r2, [pc, #316]	@ (8000f78 <HAL_GPIO_Init+0x320>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d019      	beq.n	8000e72 <HAL_GPIO_Init+0x21a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4e      	ldr	r2, [pc, #312]	@ (8000f7c <HAL_GPIO_Init+0x324>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x216>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4d      	ldr	r2, [pc, #308]	@ (8000f80 <HAL_GPIO_Init+0x328>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x212>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4c      	ldr	r2, [pc, #304]	@ (8000f84 <HAL_GPIO_Init+0x32c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x20e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	@ (8000f88 <HAL_GPIO_Init+0x330>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x20a>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00e      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e62:	2308      	movs	r3, #8
 8000e64:	e00c      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00a      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e008      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e004      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	f002 0203 	and.w	r2, r2, #3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e90:	4935      	ldr	r1, [pc, #212]	@ (8000f68 <HAL_GPIO_Init+0x310>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ec2:	4a32      	ldr	r2, [pc, #200]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eec:	4a27      	ldr	r2, [pc, #156]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f16:	4a1d      	ldr	r2, [pc, #116]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f40:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	f67f ae90 	bls.w	8000c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3724      	adds	r7, #36	@ 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40021400 	.word	0x40021400
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40021c00 	.word	0x40021c00
 8000f8c:	40013c00 	.word	0x40013c00

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e267      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d075      	beq.n	800109a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fae:	4b88      	ldr	r3, [pc, #544]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fba:	4b85      	ldr	r3, [pc, #532]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d112      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc6:	4b82      	ldr	r3, [pc, #520]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fd2:	d10b      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d05b      	beq.n	8001098 <HAL_RCC_OscConfig+0x108>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d157      	bne.n	8001098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e242      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff4:	d106      	bne.n	8001004 <HAL_RCC_OscConfig+0x74>
 8000ff6:	4b76      	ldr	r3, [pc, #472]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a75      	ldr	r2, [pc, #468]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b70      	ldr	r3, [pc, #448]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a6f      	ldr	r2, [pc, #444]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b6d      	ldr	r3, [pc, #436]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a6c      	ldr	r2, [pc, #432]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001028:	4b69      	ldr	r3, [pc, #420]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a68      	ldr	r2, [pc, #416]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b66      	ldr	r3, [pc, #408]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a65      	ldr	r2, [pc, #404]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800103e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fd14 	bl	8000a74 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fd10 	bl	8000a74 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	@ 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e207      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b5b      	ldr	r3, [pc, #364]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xc0>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fd00 	bl	8000a74 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fcfc 	bl	8000a74 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	@ 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1f3      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b51      	ldr	r3, [pc, #324]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0xe8>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010a6:	4b4a      	ldr	r3, [pc, #296]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b2:	4b47      	ldr	r3, [pc, #284]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1c7      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4937      	ldr	r1, [pc, #220]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <HAL_RCC_OscConfig+0x244>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fcb5 	bl	8000a74 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fcb1 	bl	8000a74 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1a8      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4925      	ldr	r1, [pc, #148]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <HAL_RCC_OscConfig+0x244>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fc94 	bl	8000a74 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fc90 	bl	8000a74 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e187      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d036      	beq.n	80011e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d016      	beq.n	80011b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_RCC_OscConfig+0x248>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fc74 	bl	8000a74 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fc70 	bl	8000a74 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e167      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_RCC_OscConfig+0x240>)
 80011a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x200>
 80011ae:	e01b      	b.n	80011e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_RCC_OscConfig+0x248>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fc5d 	bl	8000a74 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	e00e      	b.n	80011dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fc59 	bl	8000a74 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d907      	bls.n	80011dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e150      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
 80011d0:	40023800 	.word	0x40023800
 80011d4:	42470000 	.word	0x42470000
 80011d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b88      	ldr	r3, [pc, #544]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80011de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1ea      	bne.n	80011be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8097 	beq.w	8001324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b81      	ldr	r3, [pc, #516]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10f      	bne.n	8001226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b7d      	ldr	r3, [pc, #500]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a7c      	ldr	r2, [pc, #496]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b7a      	ldr	r3, [pc, #488]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001222:	2301      	movs	r3, #1
 8001224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001226:	4b77      	ldr	r3, [pc, #476]	@ (8001404 <HAL_RCC_OscConfig+0x474>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d118      	bne.n	8001264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001232:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <HAL_RCC_OscConfig+0x474>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a73      	ldr	r2, [pc, #460]	@ (8001404 <HAL_RCC_OscConfig+0x474>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123e:	f7ff fc19 	bl	8000a74 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001246:	f7ff fc15 	bl	8000a74 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e10c      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <HAL_RCC_OscConfig+0x474>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x2ea>
 800126c:	4b64      	ldr	r3, [pc, #400]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001270:	4a63      	ldr	r2, [pc, #396]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6713      	str	r3, [r2, #112]	@ 0x70
 8001278:	e01c      	b.n	80012b4 <HAL_RCC_OscConfig+0x324>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b05      	cmp	r3, #5
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x30c>
 8001282:	4b5f      	ldr	r3, [pc, #380]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001286:	4a5e      	ldr	r2, [pc, #376]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6713      	str	r3, [r2, #112]	@ 0x70
 800128e:	4b5c      	ldr	r3, [pc, #368]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001292:	4a5b      	ldr	r2, [pc, #364]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6713      	str	r3, [r2, #112]	@ 0x70
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0x324>
 800129c:	4b58      	ldr	r3, [pc, #352]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 800129e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a0:	4a57      	ldr	r2, [pc, #348]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80012a8:	4b55      	ldr	r3, [pc, #340]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80012aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ac:	4a54      	ldr	r2, [pc, #336]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80012ae:	f023 0304 	bic.w	r3, r3, #4
 80012b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d015      	beq.n	80012e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff fbda 	bl	8000a74 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f7ff fbd6 	bl	8000a74 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e0cb      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012da:	4b49      	ldr	r3, [pc, #292]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0ee      	beq.n	80012c4 <HAL_RCC_OscConfig+0x334>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fbc4 	bl	8000a74 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f0:	f7ff fbc0 	bl	8000a74 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0b5      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001306:	4b3e      	ldr	r3, [pc, #248]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1ee      	bne.n	80012f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001318:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	4a38      	ldr	r2, [pc, #224]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 800131e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a1 	beq.w	8001470 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800132e:	4b34      	ldr	r3, [pc, #208]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b08      	cmp	r3, #8
 8001338:	d05c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d141      	bne.n	80013c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b31      	ldr	r3, [pc, #196]	@ (8001408 <HAL_RCC_OscConfig+0x478>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fb94 	bl	8000a74 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff fb90 	bl	8000a74 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e087      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001362:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69da      	ldr	r2, [r3, #28]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	3b01      	subs	r3, #1
 8001388:	041b      	lsls	r3, r3, #16
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001390:	061b      	lsls	r3, r3, #24
 8001392:	491b      	ldr	r1, [pc, #108]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <HAL_RCC_OscConfig+0x478>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fb69 	bl	8000a74 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fb65 	bl	8000a74 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e05c      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x416>
 80013c4:	e054      	b.n	8001470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_RCC_OscConfig+0x478>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb52 	bl	8000a74 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fb4e 	bl	8000a74 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e045      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_RCC_OscConfig+0x470>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x444>
 80013f2:	e03d      	b.n	8001470 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e038      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000
 8001408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_RCC_OscConfig+0x4ec>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d028      	beq.n	800146c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d121      	bne.n	800146c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	429a      	cmp	r2, r3
 8001434:	d11a      	bne.n	800146c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001444:	4293      	cmp	r3, r2
 8001446:	d111      	bne.n	800146c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	3b01      	subs	r3, #1
 8001456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001458:	429a      	cmp	r2, r3
 800145a:	d107      	bne.n	800146c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0cc      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b68      	ldr	r3, [pc, #416]	@ (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d90c      	bls.n	80014bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b65      	ldr	r3, [pc, #404]	@ (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b63      	ldr	r3, [pc, #396]	@ (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0b8      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d4:	4b59      	ldr	r3, [pc, #356]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a58      	ldr	r2, [pc, #352]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ec:	4b53      	ldr	r3, [pc, #332]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a52      	ldr	r2, [pc, #328]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b50      	ldr	r3, [pc, #320]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	494d      	ldr	r1, [pc, #308]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d044      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b47      	ldr	r3, [pc, #284]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d119      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e07f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d003      	beq.n	800153e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153a:	2b03      	cmp	r3, #3
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e06f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	4b3b      	ldr	r3, [pc, #236]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e067      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155e:	4b37      	ldr	r3, [pc, #220]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f023 0203 	bic.w	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4934      	ldr	r1, [pc, #208]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff fa80 	bl	8000a74 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	e00a      	b.n	800158e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff fa7c 	bl	8000a74 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e04f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 020c 	and.w	r2, r3, #12
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	429a      	cmp	r2, r3
 800159e:	d1eb      	bne.n	8001578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a0:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d20c      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e032      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4916      	ldr	r1, [pc, #88]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	490e      	ldr	r1, [pc, #56]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001606:	f000 f821 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800160a:	4602      	mov	r2, r0
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	490a      	ldr	r1, [pc, #40]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_RCC_ClockConfig+0x1c8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f9e0 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00
 800163c:	40023800 	.word	0x40023800
 8001640:	08002754 	.word	0x08002754
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001650:	b094      	sub	sp, #80	@ 0x50
 8001652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001664:	4b79      	ldr	r3, [pc, #484]	@ (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d00d      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x40>
 8001670:	2b08      	cmp	r3, #8
 8001672:	f200 80e1 	bhi.w	8001838 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x34>
 800167a:	2b04      	cmp	r3, #4
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x3a>
 800167e:	e0db      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b73      	ldr	r3, [pc, #460]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x204>)
 8001682:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001684:	e0db      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001686:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x208>)
 8001688:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800168a:	e0d8      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	4b6f      	ldr	r3, [pc, #444]	@ (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001694:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	4b6d      	ldr	r3, [pc, #436]	@ (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a2:	4b6a      	ldr	r3, [pc, #424]	@ (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	2200      	movs	r2, #0
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016b6:	2300      	movs	r3, #0
 80016b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80016ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016be:	4622      	mov	r2, r4
 80016c0:	462b      	mov	r3, r5
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	0159      	lsls	r1, r3, #5
 80016cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d0:	0150      	lsls	r0, r2, #5
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4621      	mov	r1, r4
 80016d8:	1a51      	subs	r1, r2, r1
 80016da:	6139      	str	r1, [r7, #16]
 80016dc:	4629      	mov	r1, r5
 80016de:	eb63 0301 	sbc.w	r3, r3, r1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016f0:	4659      	mov	r1, fp
 80016f2:	018b      	lsls	r3, r1, #6
 80016f4:	4651      	mov	r1, sl
 80016f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016fa:	4651      	mov	r1, sl
 80016fc:	018a      	lsls	r2, r1, #6
 80016fe:	4651      	mov	r1, sl
 8001700:	ebb2 0801 	subs.w	r8, r2, r1
 8001704:	4659      	mov	r1, fp
 8001706:	eb63 0901 	sbc.w	r9, r3, r1
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800171a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800171e:	4690      	mov	r8, r2
 8001720:	4699      	mov	r9, r3
 8001722:	4623      	mov	r3, r4
 8001724:	eb18 0303 	adds.w	r3, r8, r3
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	462b      	mov	r3, r5
 800172c:	eb49 0303 	adc.w	r3, r9, r3
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800173e:	4629      	mov	r1, r5
 8001740:	024b      	lsls	r3, r1, #9
 8001742:	4621      	mov	r1, r4
 8001744:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001748:	4621      	mov	r1, r4
 800174a:	024a      	lsls	r2, r1, #9
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001752:	2200      	movs	r2, #0
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800175c:	f7fe fd34 	bl	80001c8 <__aeabi_uldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4613      	mov	r3, r2
 8001766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001768:	e058      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176a:	4b38      	ldr	r3, [pc, #224]	@ (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	2200      	movs	r2, #0
 8001772:	4618      	mov	r0, r3
 8001774:	4611      	mov	r1, r2
 8001776:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001780:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001784:	4642      	mov	r2, r8
 8001786:	464b      	mov	r3, r9
 8001788:	f04f 0000 	mov.w	r0, #0
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	0159      	lsls	r1, r3, #5
 8001792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001796:	0150      	lsls	r0, r2, #5
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4641      	mov	r1, r8
 800179e:	ebb2 0a01 	subs.w	sl, r2, r1
 80017a2:	4649      	mov	r1, r9
 80017a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017bc:	ebb2 040a 	subs.w	r4, r2, sl
 80017c0:	eb63 050b 	sbc.w	r5, r3, fp
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	00eb      	lsls	r3, r5, #3
 80017ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d2:	00e2      	lsls	r2, r4, #3
 80017d4:	4614      	mov	r4, r2
 80017d6:	461d      	mov	r5, r3
 80017d8:	4643      	mov	r3, r8
 80017da:	18e3      	adds	r3, r4, r3
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	464b      	mov	r3, r9
 80017e0:	eb45 0303 	adc.w	r3, r5, r3
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017f2:	4629      	mov	r1, r5
 80017f4:	028b      	lsls	r3, r1, #10
 80017f6:	4621      	mov	r1, r4
 80017f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017fc:	4621      	mov	r1, r4
 80017fe:	028a      	lsls	r2, r1, #10
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001806:	2200      	movs	r2, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	61fa      	str	r2, [r7, #28]
 800180c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001810:	f7fe fcda 	bl	80001c8 <__aeabi_uldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4613      	mov	r3, r2
 800181a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	3301      	adds	r3, #1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800182c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800182e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x204>)
 800183a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800183c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001840:	4618      	mov	r0, r3
 8001842:	3750      	adds	r7, #80	@ 0x50
 8001844:	46bd      	mov	sp, r7
 8001846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	00f42400 	.word	0x00f42400
 8001854:	007a1200 	.word	0x007a1200

08001858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <HAL_RCC_GetHCLKFreq+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001874:	f7ff fff0 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	0a9b      	lsrs	r3, r3, #10
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	4903      	ldr	r1, [pc, #12]	@ (8001894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	08002764 	.word	0x08002764

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800189c:	f7ff ffdc 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0b5b      	lsrs	r3, r3, #13
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4903      	ldr	r1, [pc, #12]	@ (80018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	08002764 	.word	0x08002764

080018c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d035      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80018e8:	4b62      	ldr	r3, [pc, #392]	@ (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80018ee:	f7ff f8c1 	bl	8000a74 <HAL_GetTick>
 80018f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80018f6:	f7ff f8bd 	bl	8000a74 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0b0      	b.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001908:	4b5b      	ldr	r3, [pc, #364]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	019a      	lsls	r2, r3, #6
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	071b      	lsls	r3, r3, #28
 8001920:	4955      	ldr	r1, [pc, #340]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001922:	4313      	orrs	r3, r2
 8001924:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001928:	4b52      	ldr	r3, [pc, #328]	@ (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800192e:	f7ff f8a1 	bl	8000a74 <HAL_GetTick>
 8001932:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001936:	f7ff f89d 	bl	8000a74 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e090      	b.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001948:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 8083 	beq.w	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a43      	ldr	r2, [pc, #268]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a3e      	ldr	r2, [pc, #248]	@ (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800198a:	f7ff f873 	bl	8000a74 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff f86f 	bl	8000a74 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e062      	b.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80019a4:	4b35      	ldr	r3, [pc, #212]	@ (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019b0:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019b8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d02f      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d028      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019d8:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019de:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80019e4:	4a24      	ldr	r2, [pc, #144]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d114      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff f83d 	bl	8000a74 <HAL_GetTick>
 80019fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff f839 	bl	8000a74 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e02a      	b.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a2c:	d10d      	bne.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a42:	490d      	ldr	r1, [pc, #52]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
 8001a48:	e005      	b.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a50:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001a54:	6093      	str	r3, [r2, #8]
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a62:	4905      	ldr	r1, [pc, #20]	@ (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	42470068 	.word	0x42470068
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	42470e40 	.word	0x42470e40

08001a84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e073      	b.n	8001b82 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7f5b      	ldrb	r3, [r3, #29]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fe9e 	bl	80007ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d055      	beq.n	8001b70 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	22ca      	movs	r2, #202	@ 0xca
 8001aca:	625a      	str	r2, [r3, #36]	@ 0x24
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2253      	movs	r2, #83	@ 0x53
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fac7 	bl	8002068 <RTC_EnterInitMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d12c      	bne.n	8001b3e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001af6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68d2      	ldr	r2, [r2, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	041a      	lsls	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 face 	bl	80020d6 <RTC_ExitInitMode>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d110      	bne.n	8001b66 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	22ff      	movs	r2, #255	@ 0xff
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b6e:	e001      	b.n	8001b74 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b8a:	b590      	push	{r4, r7, lr}
 8001b8c:	b087      	sub	sp, #28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	7f1b      	ldrb	r3, [r3, #28]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RTC_SetTime+0x1c>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e087      	b.n	8001cb6 <HAL_RTC_SetTime+0x12c>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d126      	bne.n	8001c06 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 faa5 	bl	8002120 <RTC_ByteToBcd2>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fa9e 	bl	8002120 <RTC_ByteToBcd2>
 8001be4:	4603      	mov	r3, r0
 8001be6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001be8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	789b      	ldrb	r3, [r3, #2]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fa96 	bl	8002120 <RTC_ByteToBcd2>
 8001bf4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001bf6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	78db      	ldrb	r3, [r3, #3]
 8001bfe:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001c00:	4313      	orrs	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e018      	b.n	8001c38 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2200      	movs	r2, #0
 8001c18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001c26:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001c2c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	22ca      	movs	r2, #202	@ 0xca
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2253      	movs	r2, #83	@ 0x53
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fa0d 	bl	8002068 <RTC_EnterInitMode>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001c52:	7cfb      	ldrb	r3, [r7, #19]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d120      	bne.n	8001c9a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001c62:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001c66:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 fa20 	bl	80020d6 <RTC_ExitInitMode>
 8001c96:	4603      	mov	r3, r0
 8001c98:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001c9a:	7cfb      	ldrb	r3, [r7, #19]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	22ff      	movs	r2, #255	@ 0xff
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]

  return status;
 8001cb4:	7cfb      	ldrb	r3, [r7, #19]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}

08001cbe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cbe:	b590      	push	{r4, r7, lr}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	7f1b      	ldrb	r3, [r3, #28]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_RTC_SetDate+0x1c>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e071      	b.n	8001dbe <HAL_RTC_SetDate+0x100>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10e      	bne.n	8001d0a <HAL_RTC_SetDate+0x4c>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	f023 0310 	bic.w	r3, r3, #16
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	330a      	adds	r3, #10
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11c      	bne.n	8001d4a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	78db      	ldrb	r3, [r3, #3]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fa03 	bl	8002120 <RTC_ByteToBcd2>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	785b      	ldrb	r3, [r3, #1]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f9fc 	bl	8002120 <RTC_ByteToBcd2>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001d2c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	789b      	ldrb	r3, [r3, #2]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f9f4 	bl	8002120 <RTC_ByteToBcd2>
 8001d38:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001d3a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e00e      	b.n	8001d68 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	78db      	ldrb	r3, [r3, #3]
 8001d4e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001d56:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001d5c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	22ca      	movs	r2, #202	@ 0xca
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2253      	movs	r2, #83	@ 0x53
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 f975 	bl	8002068 <RTC_EnterInitMode>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001d82:	7cfb      	ldrb	r3, [r7, #19]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10c      	bne.n	8001da2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001d92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001d96:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f99c 	bl	80020d6 <RTC_ExitInitMode>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001da2:	7cfb      	ldrb	r3, [r7, #19]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	22ff      	movs	r2, #255	@ 0xff
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]

  return status;
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}

08001dc6 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b089      	sub	sp, #36	@ 0x24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_RTC_SetAlarm+0x24>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e113      	b.n	8002012 <HAL_RTC_SetAlarm+0x24c>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2202      	movs	r2, #2
 8001df4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d137      	bne.n	8001e6c <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 f983 	bl	8002120 <RTC_ByteToBcd2>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	785b      	ldrb	r3, [r3, #1]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f97c 	bl	8002120 <RTC_ByteToBcd2>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001e2c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	789b      	ldrb	r3, [r3, #2]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f974 	bl	8002120 <RTC_ByteToBcd2>
 8001e38:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001e3a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001e44:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f966 	bl	8002120 <RTC_ByteToBcd2>
 8001e54:	4603      	mov	r3, r0
 8001e56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8001e58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001e60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e023      	b.n	8001eb4 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001e8c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8001e92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8001e9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8001ea4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8001eaa:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	22ca      	movs	r2, #202	@ 0xca
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2253      	movs	r2, #83	@ 0x53
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ed8:	d148      	bne.n	8001f6c <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ee8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ef8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8001f0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fdb2 	bl	8000a74 <HAL_GetTick>
 8001f10:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001f12:	e013      	b.n	8001f3c <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f14:	f7fe fdae 	bl	8000a74 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f22:	d90b      	bls.n	8001f3c <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	22ff      	movs	r2, #255	@ 0xff
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e06a      	b.n	8002012 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0e4      	beq.n	8001f14 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	e047      	b.n	8001ffc <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f7a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f8a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8001f9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f9e:	f7fe fd69 	bl	8000a74 <HAL_GetTick>
 8001fa2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001fa4:	e013      	b.n	8001fce <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fa6:	f7fe fd65 	bl	8000a74 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fb4:	d90b      	bls.n	8001fce <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	22ff      	movs	r2, #255	@ 0xff
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e021      	b.n	8002012 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0e4      	beq.n	8001fa6 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffa:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	22ff      	movs	r2, #255	@ 0xff
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
	...

0800201c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <HAL_RTC_WaitForSynchro+0x48>)
 800202e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002030:	f7fe fd20 	bl	8000a74 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002036:	e009      	b.n	800204c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002038:	f7fe fd1c 	bl	8000a74 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002046:	d901      	bls.n	800204c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e007      	b.n	800205c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0ee      	beq.n	8002038 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	00017f5f 	.word	0x00017f5f

08002068 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d122      	bne.n	80020cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002094:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002096:	f7fe fced 	bl	8000a74 <HAL_GetTick>
 800209a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800209c:	e00c      	b.n	80020b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800209e:	f7fe fce9 	bl	8000a74 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020ac:	d904      	bls.n	80020b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2204      	movs	r2, #4
 80020b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <RTC_EnterInitMode+0x64>
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d1e8      	bne.n	800209e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff8b 	bl	800201c <HAL_RTC_WaitForSynchro>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2204      	movs	r2, #4
 8002110:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800212e:	e005      	b.n	800213c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	3b0a      	subs	r3, #10
 800213a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b09      	cmp	r3, #9
 8002140:	d8f6      	bhi.n	8002130 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	b2da      	uxtb	r2, r3
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4313      	orrs	r3, r2
 800214e:	b2db      	uxtb	r3, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e042      	b.n	80021f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fb5c 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	@ 0x24
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800219e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f82b 	bl	80021fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002200:	b0c0      	sub	sp, #256	@ 0x100
 8002202:	af00      	add	r7, sp, #0
 8002204:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002218:	68d9      	ldr	r1, [r3, #12]
 800221a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	ea40 0301 	orr.w	r3, r0, r1
 8002224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	431a      	orrs	r2, r3
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	431a      	orrs	r2, r3
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002254:	f021 010c 	bic.w	r1, r1, #12
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002262:	430b      	orrs	r3, r1
 8002264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002276:	6999      	ldr	r1, [r3, #24]
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	ea40 0301 	orr.w	r3, r0, r1
 8002282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b8f      	ldr	r3, [pc, #572]	@ (80024c8 <UART_SetConfig+0x2cc>)
 800228c:	429a      	cmp	r2, r3
 800228e:	d005      	beq.n	800229c <UART_SetConfig+0xa0>
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b8d      	ldr	r3, [pc, #564]	@ (80024cc <UART_SetConfig+0x2d0>)
 8002298:	429a      	cmp	r2, r3
 800229a:	d104      	bne.n	80022a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800229c:	f7ff fafc 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 80022a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80022a4:	e003      	b.n	80022ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022a6:	f7ff fae3 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 80022aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022b8:	f040 810c 	bne.w	80024d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022c0:	2200      	movs	r2, #0
 80022c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022ce:	4622      	mov	r2, r4
 80022d0:	462b      	mov	r3, r5
 80022d2:	1891      	adds	r1, r2, r2
 80022d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80022d6:	415b      	adcs	r3, r3
 80022d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022de:	4621      	mov	r1, r4
 80022e0:	eb12 0801 	adds.w	r8, r2, r1
 80022e4:	4629      	mov	r1, r5
 80022e6:	eb43 0901 	adc.w	r9, r3, r1
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022fe:	4690      	mov	r8, r2
 8002300:	4699      	mov	r9, r3
 8002302:	4623      	mov	r3, r4
 8002304:	eb18 0303 	adds.w	r3, r8, r3
 8002308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800230c:	462b      	mov	r3, r5
 800230e:	eb49 0303 	adc.w	r3, r9, r3
 8002312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002322:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800232a:	460b      	mov	r3, r1
 800232c:	18db      	adds	r3, r3, r3
 800232e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002330:	4613      	mov	r3, r2
 8002332:	eb42 0303 	adc.w	r3, r2, r3
 8002336:	657b      	str	r3, [r7, #84]	@ 0x54
 8002338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800233c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002340:	f7fd ff42 	bl	80001c8 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4b61      	ldr	r3, [pc, #388]	@ (80024d0 <UART_SetConfig+0x2d4>)
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	011c      	lsls	r4, r3, #4
 8002352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800235c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	1891      	adds	r1, r2, r2
 800236a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800236c:	415b      	adcs	r3, r3
 800236e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002374:	4641      	mov	r1, r8
 8002376:	eb12 0a01 	adds.w	sl, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb43 0b01 	adc.w	fp, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800238c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002394:	4692      	mov	sl, r2
 8002396:	469b      	mov	fp, r3
 8002398:	4643      	mov	r3, r8
 800239a:	eb1a 0303 	adds.w	r3, sl, r3
 800239e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023a2:	464b      	mov	r3, r9
 80023a4:	eb4b 0303 	adc.w	r3, fp, r3
 80023a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023c0:	460b      	mov	r3, r1
 80023c2:	18db      	adds	r3, r3, r3
 80023c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80023c6:	4613      	mov	r3, r2
 80023c8:	eb42 0303 	adc.w	r3, r2, r3
 80023cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80023d6:	f7fd fef7 	bl	80001c8 <__aeabi_uldivmod>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <UART_SetConfig+0x2d4>)
 80023e2:	fba3 2301 	umull	r2, r3, r3, r1
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2264      	movs	r2, #100	@ 0x64
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	1acb      	subs	r3, r1, r3
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023f6:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <UART_SetConfig+0x2d4>)
 80023f8:	fba3 2302 	umull	r2, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002404:	441c      	add	r4, r3
 8002406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002410:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002418:	4642      	mov	r2, r8
 800241a:	464b      	mov	r3, r9
 800241c:	1891      	adds	r1, r2, r2
 800241e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002420:	415b      	adcs	r3, r3
 8002422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002428:	4641      	mov	r1, r8
 800242a:	1851      	adds	r1, r2, r1
 800242c:	6339      	str	r1, [r7, #48]	@ 0x30
 800242e:	4649      	mov	r1, r9
 8002430:	414b      	adcs	r3, r1
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002440:	4659      	mov	r1, fp
 8002442:	00cb      	lsls	r3, r1, #3
 8002444:	4651      	mov	r1, sl
 8002446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244a:	4651      	mov	r1, sl
 800244c:	00ca      	lsls	r2, r1, #3
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	4603      	mov	r3, r0
 8002454:	4642      	mov	r2, r8
 8002456:	189b      	adds	r3, r3, r2
 8002458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800245c:	464b      	mov	r3, r9
 800245e:	460a      	mov	r2, r1
 8002460:	eb42 0303 	adc.w	r3, r2, r3
 8002464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002474:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800247c:	460b      	mov	r3, r1
 800247e:	18db      	adds	r3, r3, r3
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002482:	4613      	mov	r3, r2
 8002484:	eb42 0303 	adc.w	r3, r2, r3
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800248e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002492:	f7fd fe99 	bl	80001c8 <__aeabi_uldivmod>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <UART_SetConfig+0x2d4>)
 800249c:	fba3 1302 	umull	r1, r3, r3, r2
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	2164      	movs	r1, #100	@ 0x64
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	3332      	adds	r3, #50	@ 0x32
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <UART_SetConfig+0x2d4>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	f003 0207 	and.w	r2, r3, #7
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4422      	add	r2, r4
 80024c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024c4:	e106      	b.n	80026d4 <UART_SetConfig+0x4d8>
 80024c6:	bf00      	nop
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40011400 	.word	0x40011400
 80024d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80024e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80024e6:	4642      	mov	r2, r8
 80024e8:	464b      	mov	r3, r9
 80024ea:	1891      	adds	r1, r2, r2
 80024ec:	6239      	str	r1, [r7, #32]
 80024ee:	415b      	adcs	r3, r3
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024f6:	4641      	mov	r1, r8
 80024f8:	1854      	adds	r4, r2, r1
 80024fa:	4649      	mov	r1, r9
 80024fc:	eb43 0501 	adc.w	r5, r3, r1
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	00eb      	lsls	r3, r5, #3
 800250a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800250e:	00e2      	lsls	r2, r4, #3
 8002510:	4614      	mov	r4, r2
 8002512:	461d      	mov	r5, r3
 8002514:	4643      	mov	r3, r8
 8002516:	18e3      	adds	r3, r4, r3
 8002518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800251c:	464b      	mov	r3, r9
 800251e:	eb45 0303 	adc.w	r3, r5, r3
 8002522:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002532:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002542:	4629      	mov	r1, r5
 8002544:	008b      	lsls	r3, r1, #2
 8002546:	4621      	mov	r1, r4
 8002548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800254c:	4621      	mov	r1, r4
 800254e:	008a      	lsls	r2, r1, #2
 8002550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002554:	f7fd fe38 	bl	80001c8 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4b60      	ldr	r3, [pc, #384]	@ (80026e0 <UART_SetConfig+0x4e4>)
 800255e:	fba3 2302 	umull	r2, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	011c      	lsls	r4, r3, #4
 8002566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002570:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	1891      	adds	r1, r2, r2
 800257e:	61b9      	str	r1, [r7, #24]
 8002580:	415b      	adcs	r3, r3
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002588:	4641      	mov	r1, r8
 800258a:	1851      	adds	r1, r2, r1
 800258c:	6139      	str	r1, [r7, #16]
 800258e:	4649      	mov	r1, r9
 8002590:	414b      	adcs	r3, r1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a0:	4659      	mov	r1, fp
 80025a2:	00cb      	lsls	r3, r1, #3
 80025a4:	4651      	mov	r1, sl
 80025a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025aa:	4651      	mov	r1, sl
 80025ac:	00ca      	lsls	r2, r1, #3
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	4642      	mov	r2, r8
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025bc:	464b      	mov	r3, r9
 80025be:	460a      	mov	r2, r1
 80025c0:	eb42 0303 	adc.w	r3, r2, r3
 80025c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80025e0:	4649      	mov	r1, r9
 80025e2:	008b      	lsls	r3, r1, #2
 80025e4:	4641      	mov	r1, r8
 80025e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ea:	4641      	mov	r1, r8
 80025ec:	008a      	lsls	r2, r1, #2
 80025ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80025f2:	f7fd fde9 	bl	80001c8 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <UART_SetConfig+0x4e4>)
 80025fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2264      	movs	r2, #100	@ 0x64
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	1acb      	subs	r3, r1, r3
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	3332      	adds	r3, #50	@ 0x32
 8002610:	4a33      	ldr	r2, [pc, #204]	@ (80026e0 <UART_SetConfig+0x4e4>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800261c:	441c      	add	r4, r3
 800261e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002622:	2200      	movs	r2, #0
 8002624:	673b      	str	r3, [r7, #112]	@ 0x70
 8002626:	677a      	str	r2, [r7, #116]	@ 0x74
 8002628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800262c:	4642      	mov	r2, r8
 800262e:	464b      	mov	r3, r9
 8002630:	1891      	adds	r1, r2, r2
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	415b      	adcs	r3, r3
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800263c:	4641      	mov	r1, r8
 800263e:	1851      	adds	r1, r2, r1
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	4649      	mov	r1, r9
 8002644:	414b      	adcs	r3, r1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002654:	4659      	mov	r1, fp
 8002656:	00cb      	lsls	r3, r1, #3
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265e:	4651      	mov	r1, sl
 8002660:	00ca      	lsls	r2, r1, #3
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	4603      	mov	r3, r0
 8002668:	4642      	mov	r2, r8
 800266a:	189b      	adds	r3, r3, r2
 800266c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800266e:	464b      	mov	r3, r9
 8002670:	460a      	mov	r2, r1
 8002672:	eb42 0303 	adc.w	r3, r2, r3
 8002676:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	663b      	str	r3, [r7, #96]	@ 0x60
 8002682:	667a      	str	r2, [r7, #100]	@ 0x64
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002690:	4649      	mov	r1, r9
 8002692:	008b      	lsls	r3, r1, #2
 8002694:	4641      	mov	r1, r8
 8002696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800269a:	4641      	mov	r1, r8
 800269c:	008a      	lsls	r2, r1, #2
 800269e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80026a2:	f7fd fd91 	bl	80001c8 <__aeabi_uldivmod>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <UART_SetConfig+0x4e4>)
 80026ac:	fba3 1302 	umull	r1, r3, r3, r2
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	2164      	movs	r1, #100	@ 0x64
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	3332      	adds	r3, #50	@ 0x32
 80026be:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <UART_SetConfig+0x4e4>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4422      	add	r2, r4
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026da:	46bd      	mov	sp, r7
 80026dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e0:	51eb851f 	.word	0x51eb851f

080026e4 <memset>:
 80026e4:	4402      	add	r2, r0
 80026e6:	4603      	mov	r3, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4d0d      	ldr	r5, [pc, #52]	@ (800272c <__libc_init_array+0x38>)
 80026f8:	4c0d      	ldr	r4, [pc, #52]	@ (8002730 <__libc_init_array+0x3c>)
 80026fa:	1b64      	subs	r4, r4, r5
 80026fc:	10a4      	asrs	r4, r4, #2
 80026fe:	2600      	movs	r6, #0
 8002700:	42a6      	cmp	r6, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	4d0b      	ldr	r5, [pc, #44]	@ (8002734 <__libc_init_array+0x40>)
 8002706:	4c0c      	ldr	r4, [pc, #48]	@ (8002738 <__libc_init_array+0x44>)
 8002708:	f000 f818 	bl	800273c <_init>
 800270c:	1b64      	subs	r4, r4, r5
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	2600      	movs	r6, #0
 8002712:	42a6      	cmp	r6, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	f855 3b04 	ldr.w	r3, [r5], #4
 800271c:	4798      	blx	r3
 800271e:	3601      	adds	r6, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	f855 3b04 	ldr.w	r3, [r5], #4
 8002726:	4798      	blx	r3
 8002728:	3601      	adds	r6, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	08002774 	.word	0x08002774
 8002730:	08002774 	.word	0x08002774
 8002734:	08002774 	.word	0x08002774
 8002738:	08002778 	.word	0x08002778

0800273c <_init>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr

08002748 <_fini>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr
