
012_bxCan_LoopBackMode_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800365c  0800365c  0000465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003674  08003674  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800367c  0800367c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800367c  0800367c  0000467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003680  08003680  00004680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003684  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000098  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000827a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a34  00000000  00000000  0000d2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  0000ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ab  00000000  00000000  0000f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe3b  00000000  00000000  0000fa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098b7  00000000  00000000  0002f87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1597  00000000  00000000  00039135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa6cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e2c  00000000  00000000  000fa710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  000fc53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003644 	.word	0x08003644

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003644 	.word	0x08003644

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc8a 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f822 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f8f2 	bl	80006ac <MX_GPIO_Init>
  MX_I2S3_Init();
 80004c8:	f000 f8c0 	bl	800064c <MX_I2S3_Init>
  MX_CAN1_Init();
 80004cc:	f000 f886 	bl	80005dc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <main+0x4c>)
 80004d2:	f000 fecd 	bl	8001270 <HAL_CAN_Start>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <main+0x28>
  {
	Error_Handler();
 80004dc:	f000 fad0 	bl	8000a80 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 80004e0:	f240 4103 	movw	r1, #1027	@ 0x403
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <main+0x4c>)
 80004e6:	f001 f945 	bl	8001774 <HAL_CAN_ActivateNotification>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <main+0x3c>
  {
	  Error_Handler();
 80004f0:	f000 fac6 	bl	8000a80 <Error_Handler>
  }
  Can_filterConfig();
 80004f4:	f000 fa16 	bl	8000924 <Can_filterConfig>
  Can_Tx();
 80004f8:	f000 fa58 	bl	80009ac <Can_Tx>
  Can_Rx();
 80004fc:	f000 fa38 	bl	8000970 <Can_Rx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <main+0x48>
 8000504:	20000028 	.word	0x20000028

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 f868 	bl	80035ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	@ 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fa86 	bl	8002aa0 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 fa71 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fce7 	bl	8002f90 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 fa5a 	bl	8000a80 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	@ 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <MX_CAN1_Init+0x68>)
 80005e2:	4a19      	ldr	r2, [pc, #100]	@ (8000648 <MX_CAN1_Init+0x6c>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <MX_CAN1_Init+0x68>)
 80005e8:	2206      	movs	r2, #6
 80005ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_CAN1_Init+0x68>)
 80005ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <MX_CAN1_Init+0x68>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_CAN1_Init+0x68>)
 80005fc:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000600:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_CAN1_Init+0x68>)
 8000604:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000608:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <MX_CAN1_Init+0x68>)
 800060c:	2200      	movs	r2, #0
 800060e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <MX_CAN1_Init+0x68>)
 8000612:	2201      	movs	r2, #1
 8000614:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <MX_CAN1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800061c:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_CAN1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_CAN1_Init+0x68>)
 8000630:	f000 fc42 	bl	8000eb8 <HAL_CAN_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800063a:	f000 fa21 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028
 8000648:	40006400 	.word	0x40006400

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f001 fd68 	bl	8002160 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f9f3 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000050 	.word	0x20000050
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	@ 0x30
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	4b91      	ldr	r3, [pc, #580]	@ (800090c <MX_GPIO_Init+0x260>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a90      	ldr	r2, [pc, #576]	@ (800090c <MX_GPIO_Init+0x260>)
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b8e      	ldr	r3, [pc, #568]	@ (800090c <MX_GPIO_Init+0x260>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	4b8a      	ldr	r3, [pc, #552]	@ (800090c <MX_GPIO_Init+0x260>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a89      	ldr	r2, [pc, #548]	@ (800090c <MX_GPIO_Init+0x260>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b87      	ldr	r3, [pc, #540]	@ (800090c <MX_GPIO_Init+0x260>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b83      	ldr	r3, [pc, #524]	@ (800090c <MX_GPIO_Init+0x260>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a82      	ldr	r2, [pc, #520]	@ (800090c <MX_GPIO_Init+0x260>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b80      	ldr	r3, [pc, #512]	@ (800090c <MX_GPIO_Init+0x260>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b7c      	ldr	r3, [pc, #496]	@ (800090c <MX_GPIO_Init+0x260>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a7b      	ldr	r2, [pc, #492]	@ (800090c <MX_GPIO_Init+0x260>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b79      	ldr	r3, [pc, #484]	@ (800090c <MX_GPIO_Init+0x260>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b75      	ldr	r3, [pc, #468]	@ (800090c <MX_GPIO_Init+0x260>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a74      	ldr	r2, [pc, #464]	@ (800090c <MX_GPIO_Init+0x260>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b72      	ldr	r3, [pc, #456]	@ (800090c <MX_GPIO_Init+0x260>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b6e      	ldr	r3, [pc, #440]	@ (800090c <MX_GPIO_Init+0x260>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a6d      	ldr	r2, [pc, #436]	@ (800090c <MX_GPIO_Init+0x260>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b6b      	ldr	r3, [pc, #428]	@ (800090c <MX_GPIO_Init+0x260>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2108      	movs	r1, #8
 800076e:	4868      	ldr	r0, [pc, #416]	@ (8000910 <MX_GPIO_Init+0x264>)
 8000770:	f001 fcdc 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	4866      	ldr	r0, [pc, #408]	@ (8000914 <MX_GPIO_Init+0x268>)
 800077a:	f001 fcd7 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800077e:	2200      	movs	r2, #0
 8000780:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000784:	4864      	ldr	r0, [pc, #400]	@ (8000918 <MX_GPIO_Init+0x26c>)
 8000786:	f001 fcd1 	bl	800212c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800078a:	2308      	movs	r3, #8
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	485b      	ldr	r0, [pc, #364]	@ (8000910 <MX_GPIO_Init+0x264>)
 80007a2:	f001 fb27 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4855      	ldr	r0, [pc, #340]	@ (8000914 <MX_GPIO_Init+0x268>)
 80007be:	f001 fb19 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007c2:	2308      	movs	r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d2:	2305      	movs	r3, #5
 80007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	484d      	ldr	r0, [pc, #308]	@ (8000914 <MX_GPIO_Init+0x268>)
 80007de:	f001 fb09 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007e6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4849      	ldr	r0, [pc, #292]	@ (800091c <MX_GPIO_Init+0x270>)
 80007f8:	f001 fafc 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007fc:	23e0      	movs	r3, #224	@ 0xe0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800080c:	2305      	movs	r3, #5
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4841      	ldr	r0, [pc, #260]	@ (800091c <MX_GPIO_Init+0x270>)
 8000818:	f001 faec 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800081c:	2304      	movs	r3, #4
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	483c      	ldr	r0, [pc, #240]	@ (8000920 <MX_GPIO_Init+0x274>)
 8000830:	f001 fae0 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4833      	ldr	r0, [pc, #204]	@ (8000920 <MX_GPIO_Init+0x274>)
 8000852:	f001 facf 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000856:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800085a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	482a      	ldr	r0, [pc, #168]	@ (8000918 <MX_GPIO_Init+0x26c>)
 8000870:	f001 fac0 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4824      	ldr	r0, [pc, #144]	@ (800091c <MX_GPIO_Init+0x270>)
 800088a:	f001 fab3 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800088e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008a0:	230a      	movs	r3, #10
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	481c      	ldr	r0, [pc, #112]	@ (800091c <MX_GPIO_Init+0x270>)
 80008ac:	f001 faa2 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4815      	ldr	r0, [pc, #84]	@ (8000918 <MX_GPIO_Init+0x26c>)
 80008c4:	f001 fa96 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008c8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	2304      	movs	r3, #4
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	480e      	ldr	r0, [pc, #56]	@ (8000920 <MX_GPIO_Init+0x274>)
 80008e6:	f001 fa85 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_GPIO_Init+0x264>)
 8000900:	f001 fa78 	bl	8001df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	@ 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40021000 	.word	0x40021000
 8000914:	40020800 	.word	0x40020800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400

08000924 <Can_filterConfig>:

/* USER CODE BEGIN 4 */
void Can_filterConfig(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CanFilter;
	CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
	CanFilter.FilterBank = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
	CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
	CanFilter.FilterIdHigh = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
	CanFilter.FilterIdLow = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
	CanFilter.FilterMaskIdHigh = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
	CanFilter.FilterMaskIdLow = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
	CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
	CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &CanFilter) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	@ (800096c <Can_filterConfig+0x48>)
 8000954:	f000 fbac 	bl	80010b0 <HAL_CAN_ConfigFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <Can_filterConfig+0x3e>
	{
		Error_Handler();
 800095e:	f000 f88f 	bl	8000a80 <Error_Handler>
	}
}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000028 	.word	0x20000028

08000970 <Can_Rx>:
void Can_Rx(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef pHeader;
	while(!HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 8000976:	bf00      	nop
 8000978:	2100      	movs	r1, #0
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <Can_Rx+0x34>)
 800097c:	f000 fed2 	bl	8001724 <HAL_CAN_GetRxFifoFillLevel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f8      	beq.n	8000978 <Can_Rx+0x8>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pHeader, rData) != HAL_OK)
 8000986:	1d3a      	adds	r2, r7, #4
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <Can_Rx+0x38>)
 800098a:	2100      	movs	r1, #0
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <Can_Rx+0x34>)
 800098e:	f000 fda7 	bl	80014e0 <HAL_CAN_GetRxMessage>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <Can_Rx+0x2c>
	{
		Error_Handler();
 8000998:	f000 f872 	bl	8000a80 <Error_Handler>
	}
}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000028 	.word	0x20000028
 80009a8:	20000098 	.word	0x20000098

080009ac <Can_Tx>:
void Can_Tx(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
	uint8_t Data[5] = "hello";
 80009b2:	4a18      	ldr	r2, [pc, #96]	@ (8000a14 <Can_Tx+0x68>)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009bc:	6018      	str	r0, [r3, #0]
 80009be:	3304      	adds	r3, #4
 80009c0:	7019      	strb	r1, [r3, #0]
	uint32_t pTxMailbox;
	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = 5;
 80009c2:	2305      	movs	r3, #5
 80009c4:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0x0000;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_DATA;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x65D;
 80009d2:	f240 635d 	movw	r3, #1629	@ 0x65d
 80009d6:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE ;
 80009d8:	2300      	movs	r3, #0
 80009da:	763b      	strb	r3, [r7, #24]
	if(HAL_CAN_AddTxMessage(&hcan1, &txHeader, Data, &pTxMailbox) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	f107 0220 	add.w	r2, r7, #32
 80009e4:	1d39      	adds	r1, r7, #4
 80009e6:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <Can_Tx+0x6c>)
 80009e8:	f000 fc86 	bl	80012f8 <HAL_CAN_AddTxMessage>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <Can_Tx+0x4a>
	{
		Error_Handler();
 80009f2:	f000 f845 	bl	8000a80 <Error_Handler>
	}
	while(HAL_CAN_IsTxMessagePending(&hcan1, pTxMailbox));
 80009f6:	bf00      	nop
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	4619      	mov	r1, r3
 80009fc:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <Can_Tx+0x6c>)
 80009fe:	f000 fd4b 	bl	8001498 <HAL_CAN_IsTxMessagePending>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f7      	bne.n	80009f8 <Can_Tx+0x4c>
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	@ 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	0800365c 	.word	0x0800365c
 8000a18:	20000028 	.word	0x20000028

08000a1c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan1)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan1)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan1)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan1)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a29      	ldr	r2, [pc, #164]	@ (8000ba0 <HAL_CAN_MspInit+0xc4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d14b      	bne.n	8000b96 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a27      	ldr	r2, [pc, #156]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b36:	2303      	movs	r3, #3
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b46:	2309      	movs	r3, #9
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4815      	ldr	r0, [pc, #84]	@ (8000ba8 <HAL_CAN_MspInit+0xcc>)
 8000b52:	f001 f94f 	bl	8001df4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	2013      	movs	r0, #19
 8000b5c:	f001 f913 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b60:	2013      	movs	r0, #19
 8000b62:	f001 f92c 	bl	8001dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f001 f90b 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b70:	2014      	movs	r0, #20
 8000b72:	f001 f924 	bl	8001dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	2015      	movs	r0, #21
 8000b7c:	f001 f903 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b80:	2015      	movs	r0, #21
 8000b82:	f001 f91c 	bl	8001dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	210f      	movs	r1, #15
 8000b8a:	2016      	movs	r0, #22
 8000b8c:	f001 f8fb 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b90:	2016      	movs	r0, #22
 8000b92:	f001 f914 	bl	8001dbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	@ 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40006400 	.word	0x40006400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	@ 0x38
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a31      	ldr	r2, [pc, #196]	@ (8000c9c <HAL_I2S_MspInit+0xf0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d15a      	bne.n	8000c92 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be0:	23c0      	movs	r3, #192	@ 0xc0
 8000be2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fbbb 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bf8:	f7ff ff42 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	4a26      	ldr	r2, [pc, #152]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_I2S_MspInit+0xf4>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c50:	2310      	movs	r3, #16
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c60:	2306      	movs	r3, #6
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <HAL_I2S_MspInit+0xf8>)
 8000c6c:	f001 f8c2 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c70:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c82:	2306      	movs	r3, #6
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <HAL_I2S_MspInit+0xfc>)
 8000c8e:	f001 f8b1 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	@ 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40003c00 	.word	0x40003c00
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020800 	.word	0x40020800

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 f8b9 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <CAN1_TX_IRQHandler+0x10>)
 8000d12:	f000 fd55 	bl	80017c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000028 	.word	0x20000028

08000d20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <CAN1_RX0_IRQHandler+0x10>)
 8000d26:	f000 fd4b 	bl	80017c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000028 	.word	0x20000028

08000d34 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <CAN1_RX1_IRQHandler+0x10>)
 8000d3a:	f000 fd41 	bl	80017c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000028 	.word	0x20000028

08000d48 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <CAN1_SCE_IRQHandler+0x10>)
 8000d4e:	f000 fd37 	bl	80017c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000028 	.word	0x20000028

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f002 fc25 	bl	80035fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fb81 	bl	80004b8 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	08003684 	.word	0x08003684
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	200000a4 	.word	0x200000a4

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 ffb7 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fe40 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 ffcf 	bl	8001dda <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 ff97 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200000a0 	.word	0x200000a0

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200000a0 	.word	0x200000a0

08000eb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0ed      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fe00 	bl	8000adc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eec:	f7ff ffd8 	bl	8000ea0 <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ef2:	e012      	b.n	8000f1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef4:	f7ff ffd4 	bl	8000ea0 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	d90b      	bls.n	8000f1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2205      	movs	r2, #5
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0c5      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0e5      	beq.n	8000ef4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0202 	bic.w	r2, r2, #2
 8000f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f38:	f7ff ffb2 	bl	8000ea0 <HAL_GetTick>
 8000f3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f3e:	e012      	b.n	8000f66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f40:	f7ff ffae 	bl	8000ea0 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d90b      	bls.n	8000f66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e09f      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e5      	bne.n	8000f40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7e1b      	ldrb	r3, [r3, #24]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d108      	bne.n	8000f8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7e5b      	ldrb	r3, [r3, #25]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d108      	bne.n	8000fe2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0220 	orr.w	r2, r2, #32
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e007      	b.n	8000ff2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0220 	bic.w	r2, r2, #32
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7edb      	ldrb	r3, [r3, #27]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d108      	bne.n	800100c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0210 	bic.w	r2, r2, #16
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e007      	b.n	800101c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0210 	orr.w	r2, r2, #16
 800101a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7f1b      	ldrb	r3, [r3, #28]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d108      	bne.n	8001036 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e007      	b.n	8001046 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0208 	bic.w	r2, r2, #8
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7f5b      	ldrb	r3, [r3, #29]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d108      	bne.n	8001060 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0204 	orr.w	r2, r2, #4
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e007      	b.n	8001070 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0204 	bic.w	r2, r2, #4
 800106e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	ea42 0103 	orr.w	r1, r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010c8:	7cfb      	ldrb	r3, [r7, #19]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d003      	beq.n	80010d6 <HAL_CAN_ConfigFilter+0x26>
 80010ce:	7cfb      	ldrb	r3, [r7, #19]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	f040 80be 	bne.w	8001252 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010d6:	4b65      	ldr	r3, [pc, #404]	@ (800126c <HAL_CAN_ConfigFilter+0x1bc>)
 80010d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010e0:	f043 0201 	orr.w	r2, r3, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010f0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	431a      	orrs	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	2201      	movs	r2, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	401a      	ands	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d123      	bne.n	8001180 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800115a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3248      	adds	r2, #72	@ 0x48
 8001160:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001174:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001176:	6979      	ldr	r1, [r7, #20]
 8001178:	3348      	adds	r3, #72	@ 0x48
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d122      	bne.n	80011ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	431a      	orrs	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3248      	adds	r2, #72	@ 0x48
 80011ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011c4:	6979      	ldr	r1, [r7, #20]
 80011c6:	3348      	adds	r3, #72	@ 0x48
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	401a      	ands	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011e8:	e007      	b.n	80011fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	401a      	ands	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001214:	e007      	b.n	8001226 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	431a      	orrs	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	431a      	orrs	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001244:	f023 0201 	bic.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e006      	b.n	8001260 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001256:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
  }
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40006400 	.word	0x40006400

08001270 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d12e      	bne.n	80012e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800129c:	f7ff fe00 	bl	8000ea0 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012a2:	e012      	b.n	80012ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a4:	f7ff fdfc 	bl	8000ea0 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b0a      	cmp	r3, #10
 80012b0:	d90b      	bls.n	80012ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2205      	movs	r2, #5
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e012      	b.n	80012f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1e5      	bne.n	80012a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e006      	b.n	80012f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d003      	beq.n	8001324 <HAL_CAN_AddTxMessage+0x2c>
 800131c:	7ffb      	ldrb	r3, [r7, #31]
 800131e:	2b02      	cmp	r3, #2
 8001320:	f040 80ad 	bne.w	800147e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10a      	bne.n	8001344 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8095 	beq.w	800146e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	0e1b      	lsrs	r3, r3, #24
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800134e:	2201      	movs	r2, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10d      	bne.n	800137c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800136a:	68f9      	ldr	r1, [r7, #12]
 800136c:	6809      	ldr	r1, [r1, #0]
 800136e:	431a      	orrs	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3318      	adds	r3, #24
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	440b      	add	r3, r1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e00f      	b.n	800139c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001386:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800138c:	68f9      	ldr	r1, [r7, #12]
 800138e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001390:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3318      	adds	r3, #24
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	440b      	add	r3, r1
 800139a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3318      	adds	r3, #24
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	440b      	add	r3, r1
 80013ac:	3304      	adds	r3, #4
 80013ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	7d1b      	ldrb	r3, [r3, #20]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d111      	bne.n	80013dc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3318      	adds	r3, #24
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	3304      	adds	r3, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	6811      	ldr	r1, [r2, #0]
 80013cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3318      	adds	r3, #24
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	440b      	add	r3, r1
 80013d8:	3304      	adds	r3, #4
 80013da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3307      	adds	r3, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	061a      	lsls	r2, r3, #24
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3306      	adds	r3, #6
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	041b      	lsls	r3, r3, #16
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3305      	adds	r3, #5
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	4313      	orrs	r3, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	3204      	adds	r2, #4
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	4610      	mov	r0, r2
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	6811      	ldr	r1, [r2, #0]
 8001404:	ea43 0200 	orr.w	r2, r3, r0
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	440b      	add	r3, r1
 800140e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001412:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3303      	adds	r3, #3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	061a      	lsls	r2, r3, #24
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3302      	adds	r3, #2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3301      	adds	r3, #1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	4313      	orrs	r3, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	4610      	mov	r0, r2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	6811      	ldr	r1, [r2, #0]
 800143a:	ea43 0200 	orr.w	r2, r3, r0
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	440b      	add	r3, r1
 8001444:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001448:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3318      	adds	r3, #24
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	6811      	ldr	r1, [r2, #0]
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	440b      	add	r3, r1
 8001468:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e00e      	b.n	800148c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e006      	b.n	800148c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
  }
}
 800148c:	4618      	mov	r0, r3
 800148e:	3724      	adds	r7, #36	@ 0x24
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ac:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d002      	beq.n	80014ba <HAL_CAN_IsTxMessagePending+0x22>
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d10b      	bne.n	80014d2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	069b      	lsls	r3, r3, #26
 80014c4:	401a      	ands	r2, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	069b      	lsls	r3, r3, #26
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d003      	beq.n	8001504 <HAL_CAN_GetRxMessage+0x24>
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	f040 8103 	bne.w	800170a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d116      	bne.n	8001546 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0f7      	b.n	8001718 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0e8      	b.n	8001718 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	331b      	adds	r3, #27
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0204 	and.w	r2, r3, #4
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10c      	bne.n	800157e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	331b      	adds	r3, #27
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e00b      	b.n	8001596 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	331b      	adds	r3, #27
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	4413      	add	r3, r2
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	331b      	adds	r3, #27
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0202 	and.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	331b      	adds	r3, #27
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	4413      	add	r3, r2
 80015b8:	3304      	adds	r3, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2208      	movs	r2, #8
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	e00b      	b.n	80015e4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	331b      	adds	r3, #27
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	3304      	adds	r3, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 020f 	and.w	r2, r3, #15
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	331b      	adds	r3, #27
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4413      	add	r3, r2
 80015f0:	3304      	adds	r3, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	331b      	adds	r3, #27
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	4413      	add	r3, r2
 8001634:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0a1a      	lsrs	r2, r3, #8
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0c1a      	lsrs	r2, r3, #16
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3302      	adds	r3, #2
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0e1a      	lsrs	r2, r3, #24
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3303      	adds	r3, #3
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3304      	adds	r3, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0a1a      	lsrs	r2, r3, #8
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3305      	adds	r3, #5
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0c1a      	lsrs	r2, r3, #16
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	3306      	adds	r3, #6
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0e1a      	lsrs	r2, r3, #24
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3307      	adds	r3, #7
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0220 	orr.w	r2, r2, #32
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	e007      	b.n	8001706 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0220 	orr.w	r2, r2, #32
 8001704:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e006      	b.n	8001718 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800173a:	7afb      	ldrb	r3, [r7, #11]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d002      	beq.n	8001746 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d10f      	bne.n	8001766 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d106      	bne.n	800175a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e005      	b.n	8001766 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d002      	beq.n	8001792 <HAL_CAN_ActivateNotification+0x1e>
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d109      	bne.n	80017a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6959      	ldr	r1, [r3, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e006      	b.n	80017b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d07c      	beq.n	8001900 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff f8fa 	bl	8000a1c <HAL_CAN_TxMailbox0CompleteCallback>
 8001828:	e016      	b.n	8001858 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
 800183c:	e00c      	b.n	8001858 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	e002      	b.n	8001858 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f96b 	bl	8001b2e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d024      	beq.n	80018ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800186a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff f8da 	bl	8000a30 <HAL_CAN_TxMailbox1CompleteCallback>
 800187c:	e016      	b.n	80018ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001890:	e00c      	b.n	80018ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a4:	e002      	b.n	80018ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f94b 	bl	8001b42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d024      	beq.n	8001900 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff f8ba 	bl	8000a44 <HAL_CAN_TxMailbox2CompleteCallback>
 80018d0:	e016      	b.n	8001900 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e4:	e00c      	b.n	8001900 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f8:	e002      	b.n	8001900 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f92b 	bl	8001b56 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2208      	movs	r2, #8
 800193e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f912 	bl	8001b6a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff f87a 	bl	8000a58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2210      	movs	r2, #16
 8001986:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2208      	movs	r2, #8
 80019a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f8f4 	bl	8001b92 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8db 	bl	8001b7e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2210      	movs	r2, #16
 80019e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f8de 	bl	8001ba6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2208      	movs	r2, #8
 8001a04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8d7 	bl	8001bba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d07b      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d072      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d043      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d03e      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a8e:	2b60      	cmp	r3, #96	@ 0x60
 8001a90:	d02b      	beq.n	8001aea <HAL_CAN_IRQHandler+0x32a>
 8001a92:	2b60      	cmp	r3, #96	@ 0x60
 8001a94:	d82e      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001a96:	2b50      	cmp	r3, #80	@ 0x50
 8001a98:	d022      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x320>
 8001a9a:	2b50      	cmp	r3, #80	@ 0x50
 8001a9c:	d82a      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001a9e:	2b40      	cmp	r3, #64	@ 0x40
 8001aa0:	d019      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x316>
 8001aa2:	2b40      	cmp	r3, #64	@ 0x40
 8001aa4:	d826      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001aa6:	2b30      	cmp	r3, #48	@ 0x30
 8001aa8:	d010      	beq.n	8001acc <HAL_CAN_IRQHandler+0x30c>
 8001aaa:	2b30      	cmp	r3, #48	@ 0x30
 8001aac:	d822      	bhi.n	8001af4 <HAL_CAN_IRQHandler+0x334>
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d002      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x2f8>
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d005      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ab6:	e01d      	b.n	8001af4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ac0:	e019      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aca:	e014      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	f043 0320 	orr.w	r3, r3, #32
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ad4:	e00f      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ade:	e00a      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ae8:	e005      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001af2:	e000      	b.n	8001af6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001af4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe ffa3 	bl	8000a6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	@ 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	@ (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	@ (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	@ (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	@ 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff3e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e16b      	b.n	80020e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f040 815a 	bne.w	80020e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d005      	beq.n	8001e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d130      	bne.n	8001ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0201 	and.w	r2, r3, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d017      	beq.n	8001ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d123      	bne.n	8001f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80b4 	beq.w	80020e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b60      	ldr	r3, [pc, #384]	@ (8002100 <HAL_GPIO_Init+0x30c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	4a5f      	ldr	r2, [pc, #380]	@ (8002100 <HAL_GPIO_Init+0x30c>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002100 <HAL_GPIO_Init+0x30c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f96:	4a5b      	ldr	r2, [pc, #364]	@ (8002104 <HAL_GPIO_Init+0x310>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	@ (8002108 <HAL_GPIO_Init+0x314>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02b      	beq.n	800201a <HAL_GPIO_Init+0x226>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	@ (800210c <HAL_GPIO_Init+0x318>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	@ (8002110 <HAL_GPIO_Init+0x31c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002114 <HAL_GPIO_Init+0x320>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x21a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8002118 <HAL_GPIO_Init+0x324>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x216>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800211c <HAL_GPIO_Init+0x328>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x212>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	@ (8002120 <HAL_GPIO_Init+0x32c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8002124 <HAL_GPIO_Init+0x330>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x20a>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00e      	b.n	800201c <HAL_GPIO_Init+0x228>
 8001ffe:	2308      	movs	r3, #8
 8002000:	e00c      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002002:	2306      	movs	r3, #6
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x228>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x228>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x228>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	@ (8002104 <HAL_GPIO_Init+0x310>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203a:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <HAL_GPIO_Init+0x334>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205e:	4a32      	ldr	r2, [pc, #200]	@ (8002128 <HAL_GPIO_Init+0x334>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002064:	4b30      	ldr	r3, [pc, #192]	@ (8002128 <HAL_GPIO_Init+0x334>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002088:	4a27      	ldr	r2, [pc, #156]	@ (8002128 <HAL_GPIO_Init+0x334>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208e:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <HAL_GPIO_Init+0x334>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002128 <HAL_GPIO_Init+0x334>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_GPIO_Init+0x334>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020dc:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <HAL_GPIO_Init+0x334>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f ae90 	bls.w	8001e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40021400 	.word	0x40021400
 8002120:	40021800 	.word	0x40021800
 8002124:	40021c00 	.word	0x40021c00
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e128      	b.n	80023c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a90      	ldr	r2, [pc, #576]	@ (80023cc <HAL_I2S_Init+0x26c>)
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7fe fd0d 	bl	8000bac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80021a8:	f023 030f 	bic.w	r3, r3, #15
 80021ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2202      	movs	r2, #2
 80021b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d060      	beq.n	8002280 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80021c6:	2310      	movs	r3, #16
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e001      	b.n	80021d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d802      	bhi.n	80021de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80021de:	2001      	movs	r0, #1
 80021e0:	f001 f9a4 	bl	800352c <HAL_RCCEx_GetPeriphCLKFreq>
 80021e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ee:	d125      	bne.n	800223c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	3305      	adds	r3, #5
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e01f      	b.n	800225a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	fbb2 f2f3 	udiv	r2, r2, r3
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	3305      	adds	r3, #5
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	e00e      	b.n	800225a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fbb2 f2f3 	udiv	r2, r2, r3
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	461a      	mov	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	3305      	adds	r3, #5
 8002258:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4a5c      	ldr	r2, [pc, #368]	@ (80023d0 <HAL_I2S_Init+0x270>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	e003      	b.n	8002288 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002280:	2302      	movs	r3, #2
 8002282:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d902      	bls.n	8002294 <HAL_I2S_Init+0x134>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2bff      	cmp	r3, #255	@ 0xff
 8002292:	d907      	bls.n	80022a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	f043 0210 	orr.w	r2, r3, #16
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e08f      	b.n	80023c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	ea42 0103 	orr.w	r1, r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80022c2:	f023 030f 	bic.w	r3, r3, #15
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6851      	ldr	r1, [r2, #4]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6892      	ldr	r2, [r2, #8]
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68d2      	ldr	r2, [r2, #12]
 80022d4:	4311      	orrs	r1, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6992      	ldr	r2, [r2, #24]
 80022da:	430a      	orrs	r2, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d161      	bne.n	80023b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a38      	ldr	r2, [pc, #224]	@ (80023d4 <HAL_I2S_Init+0x274>)
 80022f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a37      	ldr	r2, [pc, #220]	@ (80023d8 <HAL_I2S_Init+0x278>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_I2S_Init+0x1a4>
 8002300:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <HAL_I2S_Init+0x27c>)
 8002302:	e001      	b.n	8002308 <HAL_I2S_Init+0x1a8>
 8002304:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	4932      	ldr	r1, [pc, #200]	@ (80023d8 <HAL_I2S_Init+0x278>)
 8002310:	428a      	cmp	r2, r1
 8002312:	d101      	bne.n	8002318 <HAL_I2S_Init+0x1b8>
 8002314:	4a31      	ldr	r2, [pc, #196]	@ (80023dc <HAL_I2S_Init+0x27c>)
 8002316:	e001      	b.n	800231c <HAL_I2S_Init+0x1bc>
 8002318:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800231c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002320:	f023 030f 	bic.w	r3, r3, #15
 8002324:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2b      	ldr	r2, [pc, #172]	@ (80023d8 <HAL_I2S_Init+0x278>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_I2S_Init+0x1d4>
 8002330:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <HAL_I2S_Init+0x27c>)
 8002332:	e001      	b.n	8002338 <HAL_I2S_Init+0x1d8>
 8002334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002338:	2202      	movs	r2, #2
 800233a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a25      	ldr	r2, [pc, #148]	@ (80023d8 <HAL_I2S_Init+0x278>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_I2S_Init+0x1ea>
 8002346:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_I2S_Init+0x27c>)
 8002348:	e001      	b.n	800234e <HAL_I2S_Init+0x1ee>
 800234a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235a:	d003      	beq.n	8002364 <HAL_I2S_Init+0x204>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	e001      	b.n	8002370 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800237a:	4313      	orrs	r3, r2
 800237c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002384:	4313      	orrs	r3, r2
 8002386:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800238e:	4313      	orrs	r3, r2
 8002390:	b29a      	uxth	r2, r3
 8002392:	897b      	ldrh	r3, [r7, #10]
 8002394:	4313      	orrs	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800239c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <HAL_I2S_Init+0x278>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_I2S_Init+0x24c>
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <HAL_I2S_Init+0x27c>)
 80023aa:	e001      	b.n	80023b0 <HAL_I2S_Init+0x250>
 80023ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023b0:	897a      	ldrh	r2, [r7, #10]
 80023b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	080024d7 	.word	0x080024d7
 80023d0:	cccccccd 	.word	0xcccccccd
 80023d4:	080025ed 	.word	0x080025ed
 80023d8:	40003800 	.word	0x40003800
 80023dc:	40003400 	.word	0x40003400

080023e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10e      	bne.n	8002470 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002460:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffb8 	bl	80023e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	b292      	uxth	r2, r2
 800248c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002492:	1c9a      	adds	r2, r3, #2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10e      	bne.n	80024ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff93 	bl	80023f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d13a      	bne.n	8002568 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d109      	bne.n	8002510 <I2S_IRQHandler+0x3a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002506:	2b40      	cmp	r3, #64	@ 0x40
 8002508:	d102      	bne.n	8002510 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffb4 	bl	8002478 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b40      	cmp	r3, #64	@ 0x40
 8002518:	d126      	bne.n	8002568 <I2S_IRQHandler+0x92>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d11f      	bne.n	8002568 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002536:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff50 	bl	8002408 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d136      	bne.n	80025e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d109      	bne.n	8002592 <I2S_IRQHandler+0xbc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002588:	2b80      	cmp	r3, #128	@ 0x80
 800258a:	d102      	bne.n	8002592 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff45 	bl	800241c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b08      	cmp	r3, #8
 800259a:	d122      	bne.n	80025e2 <I2S_IRQHandler+0x10c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d11b      	bne.n	80025e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80025b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff13 	bl	8002408 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a92      	ldr	r2, [pc, #584]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002606:	4b92      	ldr	r3, [pc, #584]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002608:	e001      	b.n	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800260a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a8b      	ldr	r2, [pc, #556]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002624:	4b8a      	ldr	r3, [pc, #552]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002626:	e001      	b.n	800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002628:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002638:	d004      	beq.n	8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 8099 	bne.w	8002776 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d107      	bne.n	800265e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f925 	bl	80028a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f9c8 	bl	8002a08 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267e:	2b40      	cmp	r3, #64	@ 0x40
 8002680:	d13a      	bne.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d035      	beq.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6e      	ldr	r2, [pc, #440]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002696:	4b6e      	ldr	r3, [pc, #440]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002698:	e001      	b.n	800269e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800269a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4969      	ldr	r1, [pc, #420]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026a6:	428b      	cmp	r3, r1
 80026a8:	d101      	bne.n	80026ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80026aa:	4b69      	ldr	r3, [pc, #420]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026ac:	e001      	b.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80026ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f043 0202 	orr.w	r2, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fe88 	bl	8002408 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b08      	cmp	r3, #8
 8002700:	f040 80c3 	bne.w	800288a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80bd 	beq.w	800288a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800271e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a49      	ldr	r2, [pc, #292]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800272a:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800272c:	e001      	b.n	8002732 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800272e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4944      	ldr	r1, [pc, #272]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800273a:	428b      	cmp	r3, r1
 800273c:	d101      	bne.n	8002742 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800273e:	4b44      	ldr	r3, [pc, #272]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002740:	e001      	b.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002742:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002746:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800274a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f043 0204 	orr.w	r2, r3, #4
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fe4a 	bl	8002408 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002774:	e089      	b.n	800288a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d107      	bne.n	8002790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8be 	bl	800290c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8fd 	bl	80029a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d12f      	bne.n	8002814 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d02a      	beq.n	8002814 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80027d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027da:	e001      	b.n	80027e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80027dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4919      	ldr	r1, [pc, #100]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027e8:	428b      	cmp	r3, r1
 80027ea:	d101      	bne.n	80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80027ec:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027ee:	e001      	b.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80027f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80027f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f043 0202 	orr.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fdfa 	bl	8002408 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b08      	cmp	r3, #8
 800281c:	d136      	bne.n	800288c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d031      	beq.n	800288c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a07      	ldr	r2, [pc, #28]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002834:	e001      	b.n	800283a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002836:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4902      	ldr	r1, [pc, #8]	@ (800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002842:	428b      	cmp	r3, r1
 8002844:	d106      	bne.n	8002854 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002846:	4b02      	ldr	r3, [pc, #8]	@ (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002848:	e006      	b.n	8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800284a:	bf00      	nop
 800284c:	40003800 	.word	0x40003800
 8002850:	40003400 	.word	0x40003400
 8002854:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002858:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800285c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800286c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fdc0 	bl	8002408 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002888:	e000      	b.n	800288c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800288a:	bf00      	nop
}
 800288c:	bf00      	nop
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	1c99      	adds	r1, r3, #2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6251      	str	r1, [r2, #36]	@ 0x24
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d113      	bne.n	8002902 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ffc9 	bl	8002894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	1c99      	adds	r1, r3, #2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6251      	str	r1, [r2, #36]	@ 0x24
 800291e:	8819      	ldrh	r1, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <I2SEx_TxISR_I2SExt+0x90>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <I2SEx_TxISR_I2SExt+0x22>
 800292a:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <I2SEx_TxISR_I2SExt+0x94>)
 800292c:	e001      	b.n	8002932 <I2SEx_TxISR_I2SExt+0x26>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002932:	460a      	mov	r2, r1
 8002934:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d121      	bne.n	8002992 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <I2SEx_TxISR_I2SExt+0x90>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <I2SEx_TxISR_I2SExt+0x50>
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <I2SEx_TxISR_I2SExt+0x94>)
 800295a:	e001      	b.n	8002960 <I2SEx_TxISR_I2SExt+0x54>
 800295c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	490d      	ldr	r1, [pc, #52]	@ (800299c <I2SEx_TxISR_I2SExt+0x90>)
 8002968:	428b      	cmp	r3, r1
 800296a:	d101      	bne.n	8002970 <I2SEx_TxISR_I2SExt+0x64>
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <I2SEx_TxISR_I2SExt+0x94>)
 800296e:	e001      	b.n	8002974 <I2SEx_TxISR_I2SExt+0x68>
 8002970:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002974:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002978:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff81 	bl	8002894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40003800 	.word	0x40003800
 80029a0:	40003400 	.word	0x40003400

080029a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68d8      	ldr	r0, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	1c99      	adds	r1, r3, #2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80029bc:	b282      	uxth	r2, r0
 80029be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d113      	bne.n	8002a00 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ff4a 	bl	8002894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a20      	ldr	r2, [pc, #128]	@ (8002a98 <I2SEx_RxISR_I2SExt+0x90>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <I2SEx_RxISR_I2SExt+0x16>
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <I2SEx_RxISR_I2SExt+0x94>)
 8002a1c:	e001      	b.n	8002a22 <I2SEx_RxISR_I2SExt+0x1a>
 8002a1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a22:	68d8      	ldr	r0, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	1c99      	adds	r1, r3, #2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002a2e:	b282      	uxth	r2, r0
 8002a30:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d121      	bne.n	8002a8e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <I2SEx_RxISR_I2SExt+0x90>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <I2SEx_RxISR_I2SExt+0x50>
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <I2SEx_RxISR_I2SExt+0x94>)
 8002a56:	e001      	b.n	8002a5c <I2SEx_RxISR_I2SExt+0x54>
 8002a58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	490d      	ldr	r1, [pc, #52]	@ (8002a98 <I2SEx_RxISR_I2SExt+0x90>)
 8002a64:	428b      	cmp	r3, r1
 8002a66:	d101      	bne.n	8002a6c <I2SEx_RxISR_I2SExt+0x64>
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <I2SEx_RxISR_I2SExt+0x94>)
 8002a6a:	e001      	b.n	8002a70 <I2SEx_RxISR_I2SExt+0x68>
 8002a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a74:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff03 	bl	8002894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40003800 	.word	0x40003800
 8002a9c:	40003400 	.word	0x40003400

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e267      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d075      	beq.n	8002baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002abe:	4b88      	ldr	r3, [pc, #544]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4b85      	ldr	r3, [pc, #532]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d112      	bne.n	8002afc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d05b      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x108>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d157      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e242      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x74>
 8002b06:	4b76      	ldr	r3, [pc, #472]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e01d      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x98>
 8002b1e:	4b70      	ldr	r3, [pc, #448]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6f      	ldr	r2, [pc, #444]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b38:	4b69      	ldr	r3, [pc, #420]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b66      	ldr	r3, [pc, #408]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a65      	ldr	r2, [pc, #404]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe f9a2 	bl	8000ea0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe f99e 	bl	8000ea0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e207      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f98e 	bl	8000ea0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe f98a 	bl	8000ea0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1f3      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	4b51      	ldr	r3, [pc, #324]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0xe8>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b44      	ldr	r3, [pc, #272]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b41      	ldr	r3, [pc, #260]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x152>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1c7      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4937      	ldr	r1, [pc, #220]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e03a      	b.n	8002c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_OscConfig+0x244>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe f943 	bl	8000ea0 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe f93f 	bl	8000ea0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1a8      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4925      	ldr	r1, [pc, #148]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <HAL_RCC_OscConfig+0x244>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe f922 	bl	8000ea0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fe f91e 	bl	8000ea0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e187      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d036      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <HAL_RCC_OscConfig+0x248>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe f902 	bl	8000ea0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fe f8fe 	bl	8000ea0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e167      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x200>
 8002cbe:	e01b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc0:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_RCC_OscConfig+0x248>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe f8eb 	bl	8000ea0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	e00e      	b.n	8002cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fe f8e7 	bl	8000ea0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d907      	bls.n	8002cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e150      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	42470000 	.word	0x42470000
 8002ce8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b88      	ldr	r3, [pc, #544]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ea      	bne.n	8002cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8097 	beq.w	8002e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b81      	ldr	r3, [pc, #516]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d26:	4b7a      	ldr	r3, [pc, #488]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b77      	ldr	r3, [pc, #476]	@ (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b74      	ldr	r3, [pc, #464]	@ (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a73      	ldr	r2, [pc, #460]	@ (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe f8a7 	bl	8000ea0 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe f8a3 	bl	8000ea0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e10c      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2ea>
 8002d7c:	4b64      	ldr	r3, [pc, #400]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d80:	4a63      	ldr	r2, [pc, #396]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d88:	e01c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x324>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x30c>
 8002d92:	4b5f      	ldr	r3, [pc, #380]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	4a5e      	ldr	r2, [pc, #376]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x324>
 8002dac:	4b58      	ldr	r3, [pc, #352]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db0:	4a57      	ldr	r2, [pc, #348]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db8:	4b55      	ldr	r3, [pc, #340]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbc:	4a54      	ldr	r2, [pc, #336]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f023 0304 	bic.w	r3, r3, #4
 8002dc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe f868 	bl	8000ea0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe f864 	bl	8000ea0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0cb      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	4b49      	ldr	r3, [pc, #292]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ee      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x334>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fe f852 	bl	8000ea0 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe f84e 	bl	8000ea0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0b5      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e16:	4b3e      	ldr	r3, [pc, #248]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ee      	bne.n	8002e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b39      	ldr	r3, [pc, #228]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	4a38      	ldr	r2, [pc, #224]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a1 	beq.w	8002f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e3e:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d05c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d141      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_RCC_OscConfig+0x478>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe f822 	bl	8000ea0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe f81e 	bl	8000ea0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e087      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b27      	ldr	r3, [pc, #156]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	491b      	ldr	r1, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <HAL_RCC_OscConfig+0x478>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fd fff7 	bl	8000ea0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fd fff3 	bl	8000ea0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e05c      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x416>
 8002ed4:	e054      	b.n	8002f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <HAL_RCC_OscConfig+0x478>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fd ffe0 	bl	8000ea0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fd ffdc 	bl	8000ea0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e045      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x444>
 8002f02:	e03d      	b.n	8002f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e038      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40007000 	.word	0x40007000
 8002f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <HAL_RCC_OscConfig+0x4ec>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d028      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d121      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d11a      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d111      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0cc      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b68      	ldr	r3, [pc, #416]	@ (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90c      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b65      	ldr	r3, [pc, #404]	@ (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	@ (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a52      	ldr	r2, [pc, #328]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d044      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d119      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	2b03      	cmp	r3, #3
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304e:	4b3f      	ldr	r3, [pc, #252]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e067      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306e:	4b37      	ldr	r3, [pc, #220]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4934      	ldr	r1, [pc, #208]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003080:	f7fd ff0e 	bl	8000ea0 <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	e00a      	b.n	800309e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003088:	f7fd ff0a 	bl	8000ea0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	4b2b      	ldr	r3, [pc, #172]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 020c 	and.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1eb      	bne.n	8003088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d20c      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003102:	4b12      	ldr	r3, [pc, #72]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	490a      	ldr	r1, [pc, #40]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fe6e 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00
 800314c:	40023800 	.word	0x40023800
 8003150:	08003664 	.word	0x08003664
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003160:	b094      	sub	sp, #80	@ 0x50
 8003162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003174:	4b79      	ldr	r3, [pc, #484]	@ (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	d00d      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x40>
 8003180:	2b08      	cmp	r3, #8
 8003182:	f200 80e1 	bhi.w	8003348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 800318a:	2b04      	cmp	r3, #4
 800318c:	d003      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x3a>
 800318e:	e0db      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b73      	ldr	r3, [pc, #460]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x204>)
 8003192:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003194:	e0db      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003196:	4b73      	ldr	r3, [pc, #460]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x208>)
 8003198:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800319a:	e0d8      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319c:	4b6f      	ldr	r3, [pc, #444]	@ (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a6:	4b6d      	ldr	r3, [pc, #436]	@ (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b2:	4b6a      	ldr	r3, [pc, #424]	@ (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	2200      	movs	r2, #0
 80031ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c6:	2300      	movs	r3, #0
 80031c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	f04f 0000 	mov.w	r0, #0
 80031d6:	f04f 0100 	mov.w	r1, #0
 80031da:	0159      	lsls	r1, r3, #5
 80031dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e0:	0150      	lsls	r0, r2, #5
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4621      	mov	r1, r4
 80031e8:	1a51      	subs	r1, r2, r1
 80031ea:	6139      	str	r1, [r7, #16]
 80031ec:	4629      	mov	r1, r5
 80031ee:	eb63 0301 	sbc.w	r3, r3, r1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003200:	4659      	mov	r1, fp
 8003202:	018b      	lsls	r3, r1, #6
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800320a:	4651      	mov	r1, sl
 800320c:	018a      	lsls	r2, r1, #6
 800320e:	4651      	mov	r1, sl
 8003210:	ebb2 0801 	subs.w	r8, r2, r1
 8003214:	4659      	mov	r1, fp
 8003216:	eb63 0901 	sbc.w	r9, r3, r1
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800322a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800322e:	4690      	mov	r8, r2
 8003230:	4699      	mov	r9, r3
 8003232:	4623      	mov	r3, r4
 8003234:	eb18 0303 	adds.w	r3, r8, r3
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	462b      	mov	r3, r5
 800323c:	eb49 0303 	adc.w	r3, r9, r3
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800324e:	4629      	mov	r1, r5
 8003250:	024b      	lsls	r3, r1, #9
 8003252:	4621      	mov	r1, r4
 8003254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003258:	4621      	mov	r1, r4
 800325a:	024a      	lsls	r2, r1, #9
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003262:	2200      	movs	r2, #0
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800326c:	f7fc ffac 	bl	80001c8 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4613      	mov	r3, r2
 8003276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003278:	e058      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b38      	ldr	r3, [pc, #224]	@ (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	2200      	movs	r2, #0
 8003282:	4618      	mov	r0, r3
 8003284:	4611      	mov	r1, r2
 8003286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	f04f 0000 	mov.w	r0, #0
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	0159      	lsls	r1, r3, #5
 80032a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a6:	0150      	lsls	r0, r2, #5
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4641      	mov	r1, r8
 80032ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032cc:	ebb2 040a 	subs.w	r4, r2, sl
 80032d0:	eb63 050b 	sbc.w	r5, r3, fp
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	00eb      	lsls	r3, r5, #3
 80032de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032e2:	00e2      	lsls	r2, r4, #3
 80032e4:	4614      	mov	r4, r2
 80032e6:	461d      	mov	r5, r3
 80032e8:	4643      	mov	r3, r8
 80032ea:	18e3      	adds	r3, r4, r3
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	464b      	mov	r3, r9
 80032f0:	eb45 0303 	adc.w	r3, r5, r3
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003302:	4629      	mov	r1, r5
 8003304:	028b      	lsls	r3, r1, #10
 8003306:	4621      	mov	r1, r4
 8003308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800330c:	4621      	mov	r1, r4
 800330e:	028a      	lsls	r2, r1, #10
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003316:	2200      	movs	r2, #0
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003320:	f7fc ff52 	bl	80001c8 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	3301      	adds	r3, #1
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800333c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800333e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003346:	e002      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x204>)
 800334a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800334c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003350:	4618      	mov	r0, r3
 8003352:	3750      	adds	r7, #80	@ 0x50
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	00f42400 	.word	0x00f42400
 8003364:	007a1200 	.word	0x007a1200

08003368 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800338c:	2b00      	cmp	r3, #0
 800338e:	d035      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003390:	4b62      	ldr	r3, [pc, #392]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003396:	f7fd fd83 	bl	8000ea0 <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800339e:	f7fd fd7f 	bl	8000ea0 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0b0      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	019a      	lsls	r2, r3, #6
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	071b      	lsls	r3, r3, #28
 80033c8:	4955      	ldr	r1, [pc, #340]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033d0:	4b52      	ldr	r3, [pc, #328]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033d6:	f7fd fd63 	bl	8000ea0 <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033de:	f7fd fd5f 	bl	8000ea0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e090      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8083 	beq.w	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b44      	ldr	r3, [pc, #272]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	4a43      	ldr	r2, [pc, #268]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	@ 0x40
 800341a:	4b41      	ldr	r3, [pc, #260]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003426:	4b3f      	ldr	r3, [pc, #252]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a3e      	ldr	r2, [pc, #248]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003430:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003432:	f7fd fd35 	bl	8000ea0 <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fd fd31 	bl	8000ea0 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e062      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800344c:	4b35      	ldr	r3, [pc, #212]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003458:	4b31      	ldr	r3, [pc, #196]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003460:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02f      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	429a      	cmp	r2, r3
 8003474:	d028      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003476:	4b2a      	ldr	r3, [pc, #168]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800347e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800348c:	4a24      	ldr	r2, [pc, #144]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003492:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d114      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800349e:	f7fd fcff 	bl	8000ea0 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fd fcfb 	bl	8000ea0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e02a      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034bc:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ee      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034d4:	d10d      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80034d6:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80034e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ea:	490d      	ldr	r1, [pc, #52]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	608b      	str	r3, [r1, #8]
 80034f0:	e005      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80034f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034f8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80034fc:	6093      	str	r3, [r2, #8]
 80034fe:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003500:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350a:	4905      	ldr	r1, [pc, #20]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800350c:	4313      	orrs	r3, r2
 800350e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	42470068 	.word	0x42470068
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
 8003528:	42470e40 	.word	0x42470e40

0800352c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d13f      	bne.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800354a:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003560:	d12f      	bne.n	80035c2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003562:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003564:	617b      	str	r3, [r7, #20]
          break;
 8003566:	e02f      	b.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003568:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d108      	bne.n	8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003576:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800357e:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e007      	b.n	8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003590:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003598:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80035ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b2:	0f1b      	lsrs	r3, r3, #28
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	617b      	str	r3, [r7, #20]
          break;
 80035c0:	e002      	b.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
          break;
 80035c6:	bf00      	nop
        }
      }
      break;
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80035ca:	bf00      	nop
    }
  }
  return frequency;
 80035cc:	697b      	ldr	r3, [r7, #20]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	00bb8000 	.word	0x00bb8000
 80035e4:	007a1200 	.word	0x007a1200
 80035e8:	00f42400 	.word	0x00f42400

080035ec <memset>:
 80035ec:	4402      	add	r2, r0
 80035ee:	4603      	mov	r3, r0
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d100      	bne.n	80035f6 <memset+0xa>
 80035f4:	4770      	bx	lr
 80035f6:	f803 1b01 	strb.w	r1, [r3], #1
 80035fa:	e7f9      	b.n	80035f0 <memset+0x4>

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003634 <__libc_init_array+0x38>)
 8003600:	4c0d      	ldr	r4, [pc, #52]	@ (8003638 <__libc_init_array+0x3c>)
 8003602:	1b64      	subs	r4, r4, r5
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	2600      	movs	r6, #0
 8003608:	42a6      	cmp	r6, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	4d0b      	ldr	r5, [pc, #44]	@ (800363c <__libc_init_array+0x40>)
 800360e:	4c0c      	ldr	r4, [pc, #48]	@ (8003640 <__libc_init_array+0x44>)
 8003610:	f000 f818 	bl	8003644 <_init>
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	2600      	movs	r6, #0
 800361a:	42a6      	cmp	r6, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f855 3b04 	ldr.w	r3, [r5], #4
 8003624:	4798      	blx	r3
 8003626:	3601      	adds	r6, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	f855 3b04 	ldr.w	r3, [r5], #4
 800362e:	4798      	blx	r3
 8003630:	3601      	adds	r6, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	0800367c 	.word	0x0800367c
 8003638:	0800367c 	.word	0x0800367c
 800363c:	0800367c 	.word	0x0800367c
 8003640:	08003680 	.word	0x08003680

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	bf00      	nop
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr
