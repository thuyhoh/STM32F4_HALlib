
009_timer_OC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007f9c  08007f9c  00008f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb8  08007fb8  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb8  08007fb8  00008fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc0  08007fc0  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00008fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007fc8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000907c  2**0
                  CONTENTS
 10 .bss          00000a20  2000007c  2000007c  0000907c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000907c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017748  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003746  00000000  00000000  000207f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00023f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001005  00000000  00000000  000253f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238ac  00000000  00000000  000263fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a39a  00000000  00000000  00049ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2260  00000000  00000000  00064043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001362a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b9c  00000000  00000000  001362e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013be84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f84 	.word	0x08007f84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007f84 	.word	0x08007f84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc88 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f818 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f964 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f888 	bl	80005dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80004cc:	f000 f8b4 	bl	8000638 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d0:	f007 f958 	bl	8007784 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004d4:	f000 f8e6 	bl	80006a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if( HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_1) != HAL_OK)
 80004d8:	2100      	movs	r1, #0
 80004da:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <main+0x38>)
 80004dc:	f004 f850 	bl	8004580 <HAL_TIM_OC_Start_IT>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d002      	beq.n	80004ec <main+0x34>
   	{
   		Error_Handler();
 80004e6:	f000 faa1 	bl	8000a2c <Error_Handler>
   	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <main+0x34>
 80004f0:	20000144 	.word	0x20000144

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	@ 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	@ 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 fcb0 	bl	8007e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b2d      	ldr	r3, [pc, #180]	@ (80005d4 <SystemClock_Config+0xe0>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000520:	4a2c      	ldr	r2, [pc, #176]	@ (80005d4 <SystemClock_Config+0xe0>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	@ 0x40
 8000528:	4b2a      	ldr	r3, [pc, #168]	@ (80005d4 <SystemClock_Config+0xe0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b27      	ldr	r3, [pc, #156]	@ (80005d8 <SystemClock_Config+0xe4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a26      	ldr	r2, [pc, #152]	@ (80005d8 <SystemClock_Config+0xe4>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b24      	ldr	r3, [pc, #144]	@ (80005d8 <SystemClock_Config+0xe4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000550:	2303      	movs	r3, #3
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000570:	2348      	movs	r3, #72	@ 0x48
 8000572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000574:	2308      	movs	r3, #8
 8000576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000578:	2303      	movs	r3, #3
 800057a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f003 f9df 	bl	8003944 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800058c:	f000 fa4e 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fc40 	bl	8003e34 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ba:	f000 fa37 	bl	8000a2c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80005c4:	2000      	movs	r0, #0
 80005c6:	f003 fd1b 	bl	8004000 <HAL_RCC_MCOConfig>
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	@ 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_I2C1_Init+0x50>)
 800061a:	f003 f84f 	bl	80036bc <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 fa02 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000098 	.word	0x20000098
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_SPI1_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_SPI1_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_SPI1_Init+0x64>)
 8000644:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_SPI1_Init+0x64>)
 8000664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_SPI1_Init+0x64>)
 8000684:	220a      	movs	r2, #10
 8000686:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_SPI1_Init+0x64>)
 800068a:	f003 fe47 	bl	800431c <HAL_SPI_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f9ca 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000ec 	.word	0x200000ec
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	@ 0x38
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006ea:	f04f 32ff 	mov.w	r2, #4294967295
 80006ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006f8:	2280      	movs	r2, #128	@ 0x80
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006fc:	4823      	ldr	r0, [pc, #140]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006fe:	f003 fe96 	bl	800442e <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000708:	f000 f990 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000716:	4619      	mov	r1, r3
 8000718:	481c      	ldr	r0, [pc, #112]	@ (800078c <MX_TIM2_Init+0xe8>)
 800071a:	f004 f993 	bl	8004a44 <HAL_TIM_ConfigClockSource>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000724:	f000 f982 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000728:	4818      	ldr	r0, [pc, #96]	@ (800078c <MX_TIM2_Init+0xe8>)
 800072a:	f003 fecf 	bl	80044cc <HAL_TIM_OC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000734:	f000 f97a 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	@ (800078c <MX_TIM2_Init+0xe8>)
 8000748:	f004 fdcc 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000752:	f000 f96b 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000756:	2330      	movs	r3, #48	@ 0x30
 8000758:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
 800075a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800075e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4807      	ldr	r0, [pc, #28]	@ (800078c <MX_TIM2_Init+0xe8>)
 8000770:	f004 f90c 	bl	800498c <HAL_TIM_OC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800077a:	f000 f957 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <MX_TIM2_Init+0xe8>)
 8000780:	f000 fa38 	bl	8000bf4 <HAL_TIM_MspPostInit>

}
 8000784:	bf00      	nop
 8000786:	3738      	adds	r7, #56	@ 0x38
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000144 	.word	0x20000144

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b8b      	ldr	r3, [pc, #556]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a8a      	ldr	r2, [pc, #552]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b88      	ldr	r3, [pc, #544]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b84      	ldr	r3, [pc, #528]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a83      	ldr	r2, [pc, #524]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b81      	ldr	r3, [pc, #516]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b7d      	ldr	r3, [pc, #500]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a7c      	ldr	r2, [pc, #496]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b7a      	ldr	r3, [pc, #488]	@ (80009d8 <MX_GPIO_Init+0x248>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b76      	ldr	r3, [pc, #472]	@ (80009d8 <MX_GPIO_Init+0x248>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a75      	ldr	r2, [pc, #468]	@ (80009d8 <MX_GPIO_Init+0x248>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b73      	ldr	r3, [pc, #460]	@ (80009d8 <MX_GPIO_Init+0x248>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b6f      	ldr	r3, [pc, #444]	@ (80009d8 <MX_GPIO_Init+0x248>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a6e      	ldr	r2, [pc, #440]	@ (80009d8 <MX_GPIO_Init+0x248>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b6c      	ldr	r3, [pc, #432]	@ (80009d8 <MX_GPIO_Init+0x248>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b68      	ldr	r3, [pc, #416]	@ (80009d8 <MX_GPIO_Init+0x248>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a67      	ldr	r2, [pc, #412]	@ (80009d8 <MX_GPIO_Init+0x248>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b65      	ldr	r3, [pc, #404]	@ (80009d8 <MX_GPIO_Init+0x248>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4862      	ldr	r0, [pc, #392]	@ (80009dc <MX_GPIO_Init+0x24c>)
 8000854:	f000 fe00 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4860      	ldr	r0, [pc, #384]	@ (80009e0 <MX_GPIO_Init+0x250>)
 800085e:	f000 fdfb 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000868:	485e      	ldr	r0, [pc, #376]	@ (80009e4 <MX_GPIO_Init+0x254>)
 800086a:	f000 fdf5 	bl	8001458 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4855      	ldr	r0, [pc, #340]	@ (80009dc <MX_GPIO_Init+0x24c>)
 8000886:	f000 fc4b 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	484f      	ldr	r0, [pc, #316]	@ (80009e0 <MX_GPIO_Init+0x250>)
 80008a2:	f000 fc3d 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4847      	ldr	r0, [pc, #284]	@ (80009e0 <MX_GPIO_Init+0x250>)
 80008c2:	f000 fc2d 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4843      	ldr	r0, [pc, #268]	@ (80009e8 <MX_GPIO_Init+0x258>)
 80008dc:	f000 fc20 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e0:	2310      	movs	r3, #16
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f0:	2306      	movs	r3, #6
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	483b      	ldr	r0, [pc, #236]	@ (80009e8 <MX_GPIO_Init+0x258>)
 80008fc:	f000 fc10 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000900:	2304      	movs	r3, #4
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4836      	ldr	r0, [pc, #216]	@ (80009ec <MX_GPIO_Init+0x25c>)
 8000914:	f000 fc04 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	482d      	ldr	r0, [pc, #180]	@ (80009ec <MX_GPIO_Init+0x25c>)
 8000936:	f000 fbf3 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800093a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800093e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4824      	ldr	r0, [pc, #144]	@ (80009e4 <MX_GPIO_Init+0x254>)
 8000954:	f000 fbe4 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000958:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096a:	2306      	movs	r3, #6
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481a      	ldr	r0, [pc, #104]	@ (80009e0 <MX_GPIO_Init+0x250>)
 8000976:	f000 fbd3 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800097a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <MX_GPIO_Init+0x258>)
 8000998:	f000 fbc2 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <MX_GPIO_Init+0x254>)
 80009b0:	f000 fbb6 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_GPIO_Init+0x24c>)
 80009ca:	f000 fba9 	bl	8001120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	@ 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400

080009f0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *ptim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	if(ptim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7f1b      	ldrb	r3, [r3, #28]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10e      	bne.n	8000a1e <HAL_TIM_OC_DelayElapsedCallback+0x2e>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(ptim, TIM_CHANNEL_1);
 8000a00:	2100      	movs	r1, #0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f004 f8e6 	bl	8004bd4 <HAL_TIM_ReadCapturedValue>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000a0c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SetCompare(ptim,TIM_CHANNEL_1, ccr_content + 25000);
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	f503 43c3 	add.w	r3, r3, #24960	@ 0x6180
 8000a1a:	3328      	adds	r3, #40	@ 0x28
 8000a1c:	6353      	str	r3, [r2, #52]	@ 0x34
	}
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000018c 	.word	0x2000018c

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_I2C_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <HAL_I2C_MspInit+0x8c>)
 8000ae4:	f000 fb1c 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	@ 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <HAL_SPI_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b72:	23e0      	movs	r3, #224	@ 0xe0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_SPI_MspInit+0x8c>)
 8000b8e:	f000 fac7 	bl	8001120 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb8:	d115      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x48>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x48>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x48>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 fa69 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 fa82 	bl	80010ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c14:	d11e      	bne.n	8000c54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <HAL_TIM_MspPostInit+0x68>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c5c <HAL_TIM_MspPostInit+0x68>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_TIM_MspPostInit+0x68>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	f000 fa66 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 f8db 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <TIM2_IRQHandler+0x10>)
 8000cca:	f003 fd6f 	bl	80047ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000144 	.word	0x20000144

08000cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <OTG_FS_IRQHandler+0x10>)
 8000cde:	f000 feb5 	bl	8001a4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000574 	.word	0x20000574

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f007 f8bc 	bl	8007e98 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20020000 	.word	0x20020000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000190 	.word	0x20000190
 8000d54:	20000aa0 	.word	0x20000aa0

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d80:	f7ff ffea 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f007 f87b 	bl	8007ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fb83 	bl	80004b8 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000dc0:	08007fc8 	.word	0x08007fc8
  ldr r2, =_sbss
 8000dc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dc8:	20000a9c 	.word	0x20000a9c

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f94f 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe18 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f967 	bl	8001106 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f92f 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000194 	.word	0x20000194

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000194 	.word	0x20000194

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	@ (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	@ 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e16b      	b.n	8001414 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 815a 	bne.w	800140e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80b4 	beq.w	800140e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b60      	ldr	r3, [pc, #384]	@ (800142c <HAL_GPIO_Init+0x30c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a5f      	ldr	r2, [pc, #380]	@ (800142c <HAL_GPIO_Init+0x30c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b5d      	ldr	r3, [pc, #372]	@ (800142c <HAL_GPIO_Init+0x30c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001430 <HAL_GPIO_Init+0x310>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a52      	ldr	r2, [pc, #328]	@ (8001434 <HAL_GPIO_Init+0x314>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x226>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a51      	ldr	r2, [pc, #324]	@ (8001438 <HAL_GPIO_Init+0x318>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x222>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a50      	ldr	r2, [pc, #320]	@ (800143c <HAL_GPIO_Init+0x31c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x21e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4f      	ldr	r2, [pc, #316]	@ (8001440 <HAL_GPIO_Init+0x320>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x21a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4e      	ldr	r2, [pc, #312]	@ (8001444 <HAL_GPIO_Init+0x324>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x216>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4d      	ldr	r2, [pc, #308]	@ (8001448 <HAL_GPIO_Init+0x328>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x212>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4c      	ldr	r2, [pc, #304]	@ (800144c <HAL_GPIO_Init+0x32c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x20e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4b      	ldr	r2, [pc, #300]	@ (8001450 <HAL_GPIO_Init+0x330>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x20a>
 8001326:	2307      	movs	r3, #7
 8001328:	e00e      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800132a:	2308      	movs	r3, #8
 800132c:	e00c      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800132e:	2306      	movs	r3, #6
 8001330:	e00a      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001332:	2305      	movs	r3, #5
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001336:	2304      	movs	r3, #4
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	@ (8001430 <HAL_GPIO_Init+0x310>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b3b      	ldr	r3, [pc, #236]	@ (8001454 <HAL_GPIO_Init+0x334>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a32      	ldr	r2, [pc, #200]	@ (8001454 <HAL_GPIO_Init+0x334>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <HAL_GPIO_Init+0x334>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a27      	ldr	r2, [pc, #156]	@ (8001454 <HAL_GPIO_Init+0x334>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <HAL_GPIO_Init+0x334>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <HAL_GPIO_Init+0x334>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <HAL_GPIO_Init+0x334>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <HAL_GPIO_Init+0x334>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f ae90 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001474:	e003      	b.n	800147e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af02      	add	r7, sp, #8
 8001490:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e059      	b.n	8001550 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f006 f9b8 	bl	800782c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014ca:	d102      	bne.n	80014d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 f809 	bl	80054ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7c1a      	ldrb	r2, [r3, #16]
 80014e4:	f88d 2000 	strb.w	r2, [sp]
 80014e8:	3304      	adds	r3, #4
 80014ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ec:	f003 ff8a 	bl	8005404 <USB_CoreInit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e026      	b.n	8001550 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f004 f801 	bl	8005510 <USB_SetCurrentMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e017      	b.n	8001550 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7c1a      	ldrb	r2, [r3, #16]
 8001528:	f88d 2000 	strb.w	r2, [sp]
 800152c:	3304      	adds	r3, #4
 800152e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001530:	f004 f9a4 	bl	800587c <USB_HostInit>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2202      	movs	r2, #2
 800153e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e004      	b.n	8001550 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	@ 0x2c
 800155c:	af04      	add	r7, sp, #16
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4603      	mov	r3, r0
 8001568:	70fb      	strb	r3, [r7, #3]
 800156a:	460b      	mov	r3, r1
 800156c:	70bb      	strb	r3, [r7, #2]
 800156e:	4613      	mov	r3, r2
 8001570:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001572:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001574:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_HCD_HC_Init+0x2c>
 8001580:	2302      	movs	r3, #2
 8001582:	e09d      	b.n	80016c0 <HAL_HCD_HC_Init+0x168>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3319      	adds	r3, #25
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3314      	adds	r3, #20
 80015b0:	787a      	ldrb	r2, [r7, #1]
 80015b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3315      	adds	r3, #21
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3326      	adds	r3, #38	@ 0x26
 80015d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80015dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015e6:	b2d8      	uxtb	r0, r3
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3316      	adds	r3, #22
 80015f6:	4602      	mov	r2, r0
 80015f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fbac 	bl	8001d5c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001604:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da0a      	bge.n	8001622 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3317      	adds	r3, #23
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e009      	b.n	8001636 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3317      	adds	r3, #23
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f004 fa58 	bl	8005af0 <USB_GetHostSpeed>
 8001640:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001642:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10b      	bne.n	8001662 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800164a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_HCD_HC_Init+0x10a>
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d104      	bne.n	8001662 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2bbc      	cmp	r3, #188	@ 0xbc
 800165c:	d901      	bls.n	8001662 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800165e:	23bc      	movs	r3, #188	@ 0xbc
 8001660:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	3318      	adds	r3, #24
 8001672:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	b298      	uxth	r0, r3
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3328      	adds	r3, #40	@ 0x28
 800168c:	4602      	mov	r2, r0
 800168e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	b29b      	uxth	r3, r3
 8001698:	787c      	ldrb	r4, [r7, #1]
 800169a:	78ba      	ldrb	r2, [r7, #2]
 800169c:	78f9      	ldrb	r1, [r7, #3]
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4623      	mov	r3, r4
 80016ae:	f004 fa47 	bl	8005b40 <USB_HC_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_HCD_HC_Halt+0x1e>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e00f      	b.n	8001706 <HAL_HCD_HC_Halt+0x3e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fdd9 	bl	80062ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4603      	mov	r3, r0
 8001720:	70fb      	strb	r3, [r7, #3]
 8001722:	460b      	mov	r3, r1
 8001724:	70bb      	strb	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3317      	adds	r3, #23
 800173a:	78ba      	ldrb	r2, [r7, #2]
 800173c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3326      	adds	r3, #38	@ 0x26
 800174e:	787a      	ldrb	r2, [r7, #1]
 8001750:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001752:	7c3b      	ldrb	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d114      	bne.n	8001782 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	332a      	adds	r3, #42	@ 0x2a
 8001768:	2203      	movs	r2, #3
 800176a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3319      	adds	r3, #25
 800177c:	7f3a      	ldrb	r2, [r7, #28]
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e009      	b.n	8001796 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	332a      	adds	r3, #42	@ 0x2a
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001796:	787b      	ldrb	r3, [r7, #1]
 8001798:	2b03      	cmp	r3, #3
 800179a:	f200 8102 	bhi.w	80019a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800179e:	a201      	add	r2, pc, #4	@ (adr r2, 80017a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	0800198d 	.word	0x0800198d
 80017ac:	08001879 	.word	0x08001879
 80017b0:	08001903 	.word	0x08001903
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017b4:	7c3b      	ldrb	r3, [r7, #16]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 80f5 	bne.w	80019a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017bc:	78bb      	ldrb	r3, [r7, #2]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12d      	bne.n	800181e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017c2:	8b3b      	ldrh	r3, [r7, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	333d      	adds	r3, #61	@ 0x3d
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	333d      	adds	r3, #61	@ 0x3d
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10a      	bne.n	8001808 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	332a      	adds	r3, #42	@ 0x2a
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001806:	e0ce      	b.n	80019a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	332a      	adds	r3, #42	@ 0x2a
 8001818:	2202      	movs	r2, #2
 800181a:	701a      	strb	r2, [r3, #0]
      break;
 800181c:	e0c3      	b.n	80019a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	331a      	adds	r3, #26
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	f040 80b8 	bne.w	80019a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	333c      	adds	r3, #60	@ 0x3c
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	332a      	adds	r3, #42	@ 0x2a
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
      break;
 8001860:	e0a1      	b.n	80019a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	332a      	adds	r3, #42	@ 0x2a
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e096      	b.n	80019a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d120      	bne.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	333d      	adds	r3, #61	@ 0x3d
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	332a      	adds	r3, #42	@ 0x2a
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018a8:	e07e      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	332a      	adds	r3, #42	@ 0x2a
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
      break;
 80018be:	e073      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	333c      	adds	r3, #60	@ 0x3c
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	332a      	adds	r3, #42	@ 0x2a
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
      break;
 80018ea:	e05d      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	332a      	adds	r3, #42	@ 0x2a
 80018fc:	2202      	movs	r2, #2
 80018fe:	701a      	strb	r2, [r3, #0]
      break;
 8001900:	e052      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001902:	78bb      	ldrb	r3, [r7, #2]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d120      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	333d      	adds	r3, #61	@ 0x3d
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	332a      	adds	r3, #42	@ 0x2a
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001932:	e039      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	332a      	adds	r3, #42	@ 0x2a
 8001944:	2202      	movs	r2, #2
 8001946:	701a      	strb	r2, [r3, #0]
      break;
 8001948:	e02e      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	333c      	adds	r3, #60	@ 0x3c
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10a      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	332a      	adds	r3, #42	@ 0x2a
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
      break;
 8001974:	e018      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	332a      	adds	r3, #42	@ 0x2a
 8001986:	2202      	movs	r2, #2
 8001988:	701a      	strb	r2, [r3, #0]
      break;
 800198a:	e00d      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	332a      	adds	r3, #42	@ 0x2a
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
      break;
 80019a0:	e002      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019a2:	bf00      	nop
 80019a4:	e000      	b.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	332c      	adds	r3, #44	@ 0x2c
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	8b39      	ldrh	r1, [r7, #24]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4403      	add	r3, r0
 80019cc:	3334      	adds	r3, #52	@ 0x34
 80019ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	334c      	adds	r3, #76	@ 0x4c
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3338      	adds	r3, #56	@ 0x38
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3315      	adds	r3, #21
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	334d      	adds	r3, #77	@ 0x4d
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	4613      	mov	r3, r2
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	3310      	adds	r3, #16
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	1d19      	adds	r1, r3, #4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	799b      	ldrb	r3, [r3, #6]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f004 f9ac 	bl	8005d98 <USB_HC_StartXfer>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop

08001a4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 feca 	bl	80057fc <USB_GetMode>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	f040 80fb 	bne.w	8001c66 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fe8d 	bl	8005794 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80f1 	beq.w	8001c64 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fe84 	bl	8005794 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a96:	d104      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fe74 	bl	8005794 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ab6:	d104      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fe64 	bl	8005794 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ad2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ad6:	d104      	bne.n	8001ae2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fe54 	bl	8005794 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d103      	bne.n	8001afe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2202      	movs	r2, #2
 8001afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fe46 	bl	8005794 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b12:	d120      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d113      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b2e:	2110      	movs	r1, #16
 8001b30:	6938      	ldr	r0, [r7, #16]
 8001b32:	f003 fd39 	bl	80055a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b36:	6938      	ldr	r0, [r7, #16]
 8001b38:	f003 fd68 	bl	800560c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7a5b      	ldrb	r3, [r3, #9]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d105      	bne.n	8001b50 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 ff5a 	bl	8005a04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f005 fee9 	bl	8007928 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fe1a 	bl	8005794 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b6a:	d102      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f001 fd31 	bl	80035d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fe0c 	bl	8005794 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d106      	bne.n	8001b94 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f005 feb2 	bl	80078f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2208      	movs	r2, #8
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fdfb 	bl	8005794 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ba8:	d139      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fb6c 	bl	800628c <USB_HC_ReadInterrupt>
 8001bb4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e025      	b.n	8001c08 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d018      	beq.n	8001c02 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001be6:	d106      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8e9 	bl	8001dc6 <HCD_HC_IN_IRQHandler>
 8001bf4:	e005      	b.n	8001c02 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 ff4b 	bl	8002a98 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	795b      	ldrb	r3, [r3, #5]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d3d3      	bcc.n	8001bbc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fdb6 	bl	8005794 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d101      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x1ea>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_HCD_IRQHandler+0x1ec>
 8001c36:	2300      	movs	r3, #0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d014      	beq.n	8001c66 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0210 	bic.w	r2, r2, #16
 8001c4a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f001 fbe2 	bl	8003416 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0210 	orr.w	r2, r2, #16
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e000      	b.n	8001c66 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c64:	bf00      	nop
    }
  }
}
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_HCD_Start+0x16>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e013      	b.n	8001caa <HAL_HCD_Start+0x3e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fef4 	bl	8005a7e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fc16 	bl	80054cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_HCD_Stop+0x16>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e00d      	b.n	8001ce4 <HAL_HCD_Stop+0x32>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 fc47 	bl	8006568 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	334c      	adds	r3, #76	@ 0x4c
 8001d08:	781b      	ldrb	r3, [r3, #0]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3338      	adds	r3, #56	@ 0x38
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fee6 	bl	8005b1e <USB_GetCurrentFrame>
 8001d52:	4603      	mov	r3, r0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	331a      	adds	r3, #26
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	331b      	adds	r3, #27
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3325      	adds	r3, #37	@ 0x25
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3324      	adds	r3, #36	@ 0x24
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fce8 	bl	80057ba <USB_ReadChInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11a      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e00:	461a      	mov	r2, r3
 8001e02:	2304      	movs	r3, #4
 8001e04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	334d      	adds	r3, #77	@ 0x4d
 8001e16:	2207      	movs	r2, #7
 8001e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fa43 	bl	80062ae <USB_HC_Halt>
 8001e28:	e09e      	b.n	8001f68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fcc1 	bl	80057ba <USB_ReadChInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e42:	d11b      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	334d      	adds	r3, #77	@ 0x4d
 8001e68:	2208      	movs	r2, #8
 8001e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fa1a 	bl	80062ae <USB_HC_Halt>
 8001e7a:	e075      	b.n	8001f68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 fc98 	bl	80057ba <USB_ReadChInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d11a      	bne.n	8001eca <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	334d      	adds	r3, #77	@ 0x4d
 8001eb6:	2206      	movs	r2, #6
 8001eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 f9f3 	bl	80062ae <USB_HC_Halt>
 8001ec8:	e04e      	b.n	8001f68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fc71 	bl	80057ba <USB_ReadChInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee2:	d11b      	bne.n	8001f1c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	334d      	adds	r3, #77	@ 0x4d
 8001f08:	2209      	movs	r2, #9
 8001f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 f9ca 	bl	80062ae <USB_HC_Halt>
 8001f1a:	e025      	b.n	8001f68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fc48 	bl	80057ba <USB_ReadChInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f30:	2b80      	cmp	r3, #128	@ 0x80
 8001f32:	d119      	bne.n	8001f68 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f40:	461a      	mov	r2, r3
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	334d      	adds	r3, #77	@ 0x4d
 8001f56:	2207      	movs	r2, #7
 8001f58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f9a3 	bl	80062ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fc22 	bl	80057ba <USB_ReadChInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f80:	d112      	bne.n	8001fa8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 f98f 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fa2:	6093      	str	r3, [r2, #8]
 8001fa4:	f000 bd75 	b.w	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fc02 	bl	80057ba <USB_ReadChInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 8128 	bne.w	8002212 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	331b      	adds	r3, #27
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d119      	bne.n	800201e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	331b      	adds	r3, #27
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	0151      	lsls	r1, r2, #5
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	440a      	add	r2, r1
 8002014:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	799b      	ldrb	r3, [r3, #6]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01b      	beq.n	800205e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3330      	adds	r3, #48	@ 0x30
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	1ac9      	subs	r1, r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4403      	add	r3, r0
 800205a:	3338      	adds	r3, #56	@ 0x38
 800205c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	334d      	adds	r3, #77	@ 0x4d
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3344      	adds	r3, #68	@ 0x44
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002092:	461a      	mov	r2, r3
 8002094:	2301      	movs	r3, #1
 8002096:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3326      	adds	r3, #38	@ 0x26
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3326      	adds	r3, #38	@ 0x26
 80020be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d110      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 f8ee 	bl	80062ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	2310      	movs	r3, #16
 80020e2:	6093      	str	r3, [r2, #8]
 80020e4:	e03d      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3326      	adds	r3, #38	@ 0x26
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d00a      	beq.n	8002112 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3326      	adds	r3, #38	@ 0x26
 800210c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800210e:	2b01      	cmp	r3, #1
 8002110:	d127      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	0151      	lsls	r1, r2, #5
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	440a      	add	r2, r1
 8002128:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800212c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002130:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	334c      	adds	r3, #76	@ 0x4c
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	334c      	adds	r3, #76	@ 0x4c
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f005 fbf1 	bl	8007944 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	799b      	ldrb	r3, [r3, #6]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d13b      	bne.n	80021e2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3338      	adds	r3, #56	@ 0x38
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	3328      	adds	r3, #40	@ 0x28
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	440b      	add	r3, r1
 8002190:	1e59      	subs	r1, r3, #1
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4403      	add	r3, r0
 80021a0:	3328      	adds	r3, #40	@ 0x28
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8470 	beq.w	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	333c      	adds	r3, #60	@ 0x3c
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2d8      	uxtb	r0, r3
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	333c      	adds	r3, #60	@ 0x3c
 80021da:	4602      	mov	r2, r0
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	f000 bc58 	b.w	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	333c      	adds	r3, #60	@ 0x3c
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2d8      	uxtb	r0, r3
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	333c      	adds	r3, #60	@ 0x3c
 800220a:	4602      	mov	r2, r0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	f000 bc40 	b.w	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f003 facd 	bl	80057ba <USB_ReadChInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b20      	cmp	r3, #32
 8002228:	d131      	bne.n	800228e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	2320      	movs	r3, #32
 800223a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	331a      	adds	r3, #26
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	f040 841f 	bne.w	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	331b      	adds	r3, #27
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	334d      	adds	r3, #77	@ 0x4d
 8002278:	2203      	movs	r2, #3
 800227a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f004 f812 	bl	80062ae <USB_HC_Halt>
 800228a:	f000 bc02 	b.w	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fa8f 	bl	80057ba <USB_ReadChInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	f040 8305 	bne.w	80028b2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	2302      	movs	r3, #2
 80022b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	334d      	adds	r3, #77	@ 0x4d
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d114      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334d      	adds	r3, #77	@ 0x4d
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334c      	adds	r3, #76	@ 0x4c
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e2cc      	b.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	334d      	adds	r3, #77	@ 0x4d
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b06      	cmp	r3, #6
 800230e:	d114      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	334d      	adds	r3, #77	@ 0x4d
 8002320:	2202      	movs	r2, #2
 8002322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	334c      	adds	r3, #76	@ 0x4c
 8002334:	2205      	movs	r2, #5
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e2ac      	b.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	334d      	adds	r3, #77	@ 0x4d
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b07      	cmp	r3, #7
 800234e:	d00b      	beq.n	8002368 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334d      	adds	r3, #77	@ 0x4d
 8002360:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002362:	2b09      	cmp	r3, #9
 8002364:	f040 80a6 	bne.w	80024b4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334d      	adds	r3, #77	@ 0x4d
 8002378:	2202      	movs	r2, #2
 800237a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3344      	adds	r3, #68	@ 0x44
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4403      	add	r3, r0
 800239c:	3344      	adds	r3, #68	@ 0x44
 800239e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3344      	adds	r3, #68	@ 0x44
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d943      	bls.n	800243e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3344      	adds	r3, #68	@ 0x44
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	331a      	adds	r3, #26
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d123      	bne.n	8002428 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	331b      	adds	r3, #27
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	331c      	adds	r3, #28
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	0151      	lsls	r1, r2, #5
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	440a      	add	r2, r1
 800241e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002426:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	334c      	adds	r3, #76	@ 0x4c
 8002438:	2204      	movs	r2, #4
 800243a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800243c:	e229      	b.n	8002892 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	334c      	adds	r3, #76	@ 0x4c
 800244e:	2202      	movs	r2, #2
 8002450:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3326      	adds	r3, #38	@ 0x26
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3326      	adds	r3, #38	@ 0x26
 8002478:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 8209 	bne.w	8002892 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002496:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800249e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024b2:	e1ee      	b.n	8002892 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334d      	adds	r3, #77	@ 0x4d
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	f040 80c8 	bne.w	800265c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334d      	adds	r3, #77	@ 0x4d
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	331b      	adds	r3, #27
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 81ce 	bne.w	8002894 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3326      	adds	r3, #38	@ 0x26
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d16b      	bne.n	80025e6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3348      	adds	r3, #72	@ 0x48
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1c59      	adds	r1, r3, #1
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4403      	add	r3, r0
 800252e:	3348      	adds	r3, #72	@ 0x48
 8002530:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3348      	adds	r3, #72	@ 0x48
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d943      	bls.n	80025d0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3348      	adds	r3, #72	@ 0x48
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	331b      	adds	r3, #27
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3344      	adds	r3, #68	@ 0x44
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d809      	bhi.n	800259a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	331c      	adds	r3, #28
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	0151      	lsls	r1, r2, #5
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	440a      	add	r2, r1
 80025b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	334c      	adds	r3, #76	@ 0x4c
 80025ca:	2204      	movs	r2, #4
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e014      	b.n	80025fa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	334c      	adds	r3, #76	@ 0x4c
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e009      	b.n	80025fa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	334c      	adds	r3, #76	@ 0x4c
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3326      	adds	r3, #38	@ 0x26
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3326      	adds	r3, #38	@ 0x26
 8002620:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002622:	2b02      	cmp	r3, #2
 8002624:	f040 8136 	bne.w	8002894 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800263e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002646:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e11b      	b.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	334d      	adds	r3, #77	@ 0x4d
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b03      	cmp	r3, #3
 8002670:	f040 8081 	bne.w	8002776 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334d      	adds	r3, #77	@ 0x4d
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	331b      	adds	r3, #27
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	f040 80fa 	bne.w	8002894 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334c      	adds	r3, #76	@ 0x4c
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	0151      	lsls	r1, r2, #5
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	440a      	add	r2, r1
 80026ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	0151      	lsls	r1, r2, #5
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	440a      	add	r2, r1
 80026ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026f2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	0151      	lsls	r1, r2, #5
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	440a      	add	r2, r1
 800270a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800270e:	f023 0320 	bic.w	r3, r3, #32
 8002712:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3326      	adds	r3, #38	@ 0x26
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3326      	adds	r3, #38	@ 0x26
 800273a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273c:	2b02      	cmp	r3, #2
 800273e:	f040 80a9 	bne.w	8002894 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002758:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002760:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e08e      	b.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	334d      	adds	r3, #77	@ 0x4d
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d143      	bne.n	8002814 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334d      	adds	r3, #77	@ 0x4d
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334c      	adds	r3, #76	@ 0x4c
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	3326      	adds	r3, #38	@ 0x26
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3326      	adds	r3, #38	@ 0x26
 80027da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d159      	bne.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e03f      	b.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	334d      	adds	r3, #77	@ 0x4d
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d126      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	334d      	adds	r3, #77	@ 0x4d
 800283a:	2202      	movs	r2, #2
 800283c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3344      	adds	r3, #68	@ 0x44
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c59      	adds	r1, r3, #1
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4403      	add	r3, r0
 800285e:	3344      	adds	r3, #68	@ 0x44
 8002860:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	334c      	adds	r3, #76	@ 0x4c
 8002872:	2204      	movs	r2, #4
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e00d      	b.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334d      	adds	r3, #77	@ 0x4d
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	f000 8100 	beq.w	8002a90 <HCD_HC_IN_IRQHandler+0xcca>
 8002890:	e000      	b.n	8002894 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002892:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	334c      	adds	r3, #76	@ 0x4c
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f005 f84a 	bl	8007944 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028b0:	e0ef      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 ff7d 	bl	80057ba <USB_ReadChInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d12f      	bne.n	800292a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	2340      	movs	r3, #64	@ 0x40
 80028da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	@ 0x4d
 80028ec:	2205      	movs	r2, #5
 80028ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	331a      	adds	r3, #26
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3344      	adds	r3, #68	@ 0x44
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fcc3 	bl	80062ae <USB_HC_Halt>
 8002928:	e0b3      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f002 ff41 	bl	80057ba <USB_ReadChInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b10      	cmp	r3, #16
 8002940:	f040 80a7 	bne.w	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3326      	adds	r3, #38	@ 0x26
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d11b      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3344      	adds	r3, #68	@ 0x44
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	334d      	adds	r3, #77	@ 0x4d
 800297e:	2204      	movs	r2, #4
 8002980:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f003 fc8f 	bl	80062ae <USB_HC_Halt>
 8002990:	e03f      	b.n	8002a12 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3326      	adds	r3, #38	@ 0x26
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3326      	adds	r3, #38	@ 0x26
 80029b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d129      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	@ 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	799b      	ldrb	r3, [r3, #6]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HCD_HC_IN_IRQHandler+0xc2a>
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	331b      	adds	r3, #27
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d110      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	334d      	adds	r3, #77	@ 0x4d
 8002a00:	2204      	movs	r2, #4
 8002a02:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fc4e 	bl	80062ae <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	331b      	adds	r3, #27
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d129      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	331b      	adds	r3, #27
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	0151      	lsls	r1, r2, #5
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	440a      	add	r2, r1
 8002a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a76:	f043 0320 	orr.w	r3, r3, #32
 8002a7a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	6093      	str	r3, [r2, #8]
 8002a8e:	e000      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a90:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 fe7f 	bl	80057ba <USB_ReadChInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d11b      	bne.n	8002afe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	@ 0x4d
 8002ae8:	2207      	movs	r2, #7
 8002aea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 fbda 	bl	80062ae <USB_HC_Halt>
 8002afa:	f000 bc89 	b.w	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fe57 	bl	80057ba <USB_ReadChInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	f040 8082 	bne.w	8002c1c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2320      	movs	r3, #32
 8002b28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3319      	adds	r3, #25
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d124      	bne.n	8002b8a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3319      	adds	r3, #25
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	334c      	adds	r3, #76	@ 0x4c
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334d      	adds	r3, #77	@ 0x4d
 8002b78:	2203      	movs	r2, #3
 8002b7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fb92 	bl	80062ae <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	331a      	adds	r3, #26
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f040 8437 	bne.w	8003410 <HCD_HC_OUT_IRQHandler+0x978>
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	331b      	adds	r3, #27
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 842b 	bne.w	8003410 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3326      	adds	r3, #38	@ 0x26
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d009      	beq.n	8002be4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	331b      	adds	r3, #27
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	334d      	adds	r3, #77	@ 0x4d
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fb54 	bl	80062ae <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3344      	adds	r3, #68	@ 0x44
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e3f9      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 fdc8 	bl	80057ba <USB_ReadChInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c34:	d111      	bne.n	8002c5a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c42:	461a      	mov	r2, r3
 8002c44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fb2b 	bl	80062ae <USB_HC_Halt>
 8002c58:	e3da      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fda9 	bl	80057ba <USB_ReadChInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d168      	bne.n	8002d44 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3344      	adds	r3, #68	@ 0x44
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 fd93 	bl	80057ba <USB_ReadChInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	2b40      	cmp	r3, #64	@ 0x40
 8002c9c:	d112      	bne.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3319      	adds	r3, #25
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2340      	movs	r3, #64	@ 0x40
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	331b      	adds	r3, #27
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	331b      	adds	r3, #27
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	0151      	lsls	r1, r2, #5
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	440a      	add	r2, r1
 8002d04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	334d      	adds	r3, #77	@ 0x4d
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fab6 	bl	80062ae <USB_HC_Halt>
 8002d42:	e365      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 fd34 	bl	80057ba <USB_ReadChInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	d139      	bne.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	334d      	adds	r3, #77	@ 0x4d
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	331a      	adds	r3, #26
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3319      	adds	r3, #25
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3344      	adds	r3, #68	@ 0x44
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fa79 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2340      	movs	r3, #64	@ 0x40
 8002dcc:	6093      	str	r3, [r2, #8]
 8002dce:	e31f      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 fcee 	bl	80057ba <USB_ReadChInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d11a      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df4:	461a      	mov	r2, r3
 8002df6:	2308      	movs	r3, #8
 8002df8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	334d      	adds	r3, #77	@ 0x4d
 8002e0a:	2206      	movs	r2, #6
 8002e0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fa49 	bl	80062ae <USB_HC_Halt>
 8002e1c:	e2f8      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fcc7 	bl	80057ba <USB_ReadChInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d144      	bne.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3344      	adds	r3, #68	@ 0x44
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	334d      	adds	r3, #77	@ 0x4d
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3319      	adds	r3, #25
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d114      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3318      	adds	r3, #24
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3319      	adds	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 fa01 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2310      	movs	r3, #16
 8002ebc:	6093      	str	r3, [r2, #8]
 8002ebe:	e2a7      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fc76 	bl	80057ba <USB_ReadChInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed4:	2b80      	cmp	r3, #128	@ 0x80
 8002ed6:	f040 8083 	bne.w	8002fe0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	799b      	ldrb	r3, [r3, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d111      	bne.n	8002f06 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	334d      	adds	r3, #77	@ 0x4d
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 f9d5 	bl	80062ae <USB_HC_Halt>
 8002f04:	e062      	b.n	8002fcc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3344      	adds	r3, #68	@ 0x44
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4403      	add	r3, r0
 8002f26:	3344      	adds	r3, #68	@ 0x44
 8002f28:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3344      	adds	r3, #68	@ 0x44
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d922      	bls.n	8002f86 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3344      	adds	r3, #68	@ 0x44
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	334c      	adds	r3, #76	@ 0x4c
 8002f64:	2204      	movs	r2, #4
 8002f66:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334c      	adds	r3, #76	@ 0x4c
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f004 fce0 	bl	8007944 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f84:	e022      	b.n	8002fcc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	334c      	adds	r3, #76	@ 0x4c
 8002f96:	2202      	movs	r2, #2
 8002f98:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fb0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fb8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	6093      	str	r3, [r2, #8]
 8002fde:	e217      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 fbe6 	bl	80057ba <USB_ReadChInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff8:	d11b      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	334d      	adds	r3, #77	@ 0x4d
 800300a:	2209      	movs	r2, #9
 800300c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 f949 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800302e:	6093      	str	r3, [r2, #8]
 8003030:	e1ee      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fbbd 	bl	80057ba <USB_ReadChInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b02      	cmp	r3, #2
 8003048:	f040 81df 	bne.w	800340a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003058:	461a      	mov	r2, r3
 800305a:	2302      	movs	r3, #2
 800305c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	334d      	adds	r3, #77	@ 0x4d
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	f040 8093 	bne.w	800319c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	334d      	adds	r3, #77	@ 0x4d
 8003086:	2202      	movs	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	334c      	adds	r3, #76	@ 0x4c
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3326      	adds	r3, #38	@ 0x26
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d00b      	beq.n	80030cc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3326      	adds	r3, #38	@ 0x26
 80030c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	f040 8190 	bne.w	80033ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	799b      	ldrb	r3, [r3, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d115      	bne.n	8003100 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	333d      	adds	r3, #61	@ 0x3d
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2d8      	uxtb	r0, r3
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	333d      	adds	r3, #61	@ 0x3d
 80030fc:	4602      	mov	r2, r0
 80030fe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	799b      	ldrb	r3, [r3, #6]
 8003104:	2b01      	cmp	r3, #1
 8003106:	f040 8171 	bne.w	80033ec <HCD_HC_OUT_IRQHandler+0x954>
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3334      	adds	r3, #52	@ 0x34
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8165 	beq.w	80033ec <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3334      	adds	r3, #52	@ 0x34
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4403      	add	r3, r0
 8003142:	3328      	adds	r3, #40	@ 0x28
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	440b      	add	r3, r1
 8003148:	1e59      	subs	r1, r3, #1
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4403      	add	r3, r0
 8003158:	3328      	adds	r3, #40	@ 0x28
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003160:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 813f 	beq.w	80033ec <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	333d      	adds	r3, #61	@ 0x3d
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	f083 0301 	eor.w	r3, r3, #1
 8003186:	b2d8      	uxtb	r0, r3
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	333d      	adds	r3, #61	@ 0x3d
 8003196:	4602      	mov	r2, r0
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e127      	b.n	80033ec <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	334d      	adds	r3, #77	@ 0x4d
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d120      	bne.n	80031f4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334d      	adds	r3, #77	@ 0x4d
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	331b      	adds	r3, #27
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	f040 8107 	bne.w	80033ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334c      	adds	r3, #76	@ 0x4c
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e0fb      	b.n	80033ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	334d      	adds	r3, #77	@ 0x4d
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d13a      	bne.n	8003280 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334d      	adds	r3, #77	@ 0x4d
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334c      	adds	r3, #76	@ 0x4c
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	331b      	adds	r3, #27
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	f040 80d1 	bne.w	80033ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	331b      	adds	r3, #27
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	0151      	lsls	r1, r2, #5
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	440a      	add	r2, r1
 8003274:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800327c:	6053      	str	r3, [r2, #4]
 800327e:	e0b5      	b.n	80033ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	334d      	adds	r3, #77	@ 0x4d
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d114      	bne.n	80032c0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334d      	adds	r3, #77	@ 0x4d
 80032a6:	2202      	movs	r2, #2
 80032a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334c      	adds	r3, #76	@ 0x4c
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e095      	b.n	80033ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	@ 0x4d
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d114      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	@ 0x4d
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	@ 0x4c
 80032fa:	2205      	movs	r2, #5
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e075      	b.n	80033ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	@ 0x4d
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b07      	cmp	r3, #7
 8003314:	d00a      	beq.n	800332c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334d      	adds	r3, #77	@ 0x4d
 8003326:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003328:	2b09      	cmp	r3, #9
 800332a:	d170      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334d      	adds	r3, #77	@ 0x4d
 800333c:	2202      	movs	r2, #2
 800333e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3344      	adds	r3, #68	@ 0x44
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4403      	add	r3, r0
 8003360:	3344      	adds	r3, #68	@ 0x44
 8003362:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3344      	adds	r3, #68	@ 0x44
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d914      	bls.n	80033a4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3344      	adds	r3, #68	@ 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334c      	adds	r3, #76	@ 0x4c
 800339e:	2204      	movs	r2, #4
 80033a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a2:	e022      	b.n	80033ea <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334c      	adds	r3, #76	@ 0x4c
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	334c      	adds	r3, #76	@ 0x4c
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f004 fa9e 	bl	8007944 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003408:	e002      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800340e:	bf00      	nop
  }
}
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08a      	sub	sp, #40	@ 0x28
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	0c5b      	lsrs	r3, r3, #17
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800344a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d004      	beq.n	800345c <HCD_RXQLVL_IRQHandler+0x46>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b05      	cmp	r3, #5
 8003456:	f000 80b6 	beq.w	80035c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800345a:	e0b7      	b.n	80035cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80b3 	beq.w	80035ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	332c      	adds	r3, #44	@ 0x2c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80a7 	beq.w	80035ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3338      	adds	r3, #56	@ 0x38
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	18d1      	adds	r1, r2, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4403      	add	r3, r0
 80034a0:	3334      	adds	r3, #52	@ 0x34
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4299      	cmp	r1, r3
 80034a6:	f200 8083 	bhi.w	80035b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	332c      	adds	r3, #44	@ 0x2c
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	b292      	uxth	r2, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	f002 f90d 	bl	80056e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	332c      	adds	r3, #44	@ 0x2c
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	18d1      	adds	r1, r2, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4403      	add	r3, r0
 80034ee:	332c      	adds	r3, #44	@ 0x2c
 80034f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3338      	adds	r3, #56	@ 0x38
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	18d1      	adds	r1, r2, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4403      	add	r3, r0
 8003516:	3338      	adds	r3, #56	@ 0x38
 8003518:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	0cdb      	lsrs	r3, r3, #19
 800352a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3328      	adds	r3, #40	@ 0x28
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4293      	cmp	r3, r2
 8003548:	d13f      	bne.n	80035ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d03c      	beq.n	80035ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003566:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800356e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	333c      	adds	r3, #60	@ 0x3c
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	f083 0301 	eor.w	r3, r3, #1
 8003598:	b2d8      	uxtb	r0, r3
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	333c      	adds	r3, #60	@ 0x3c
 80035aa:	4602      	mov	r2, r0
 80035ac:	701a      	strb	r2, [r3, #0]
      break;
 80035ae:	e00c      	b.n	80035ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	334c      	adds	r3, #76	@ 0x4c
 80035c0:	2204      	movs	r2, #4
 80035c2:	701a      	strb	r2, [r3, #0]
      break;
 80035c4:	e001      	b.n	80035ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80035ca:	bf00      	nop
  }
}
 80035cc:	bf00      	nop
 80035ce:	3728      	adds	r7, #40	@ 0x28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003600:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b02      	cmp	r3, #2
 800360a:	d10b      	bne.n	8003624 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f004 f978 	bl	800790c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f043 0302 	orr.w	r3, r3, #2
 8003622:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b08      	cmp	r3, #8
 800362c:	d132      	bne.n	8003694 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d126      	bne.n	800368e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7a5b      	ldrb	r3, [r3, #9]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d113      	bne.n	8003670 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800364e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003652:	d106      	bne.n	8003662 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2102      	movs	r1, #2
 800365a:	4618      	mov	r0, r3
 800365c:	f002 f9d2 	bl	8005a04 <USB_InitFSLSPClkSel>
 8003660:	e011      	b.n	8003686 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	4618      	mov	r0, r3
 800366a:	f002 f9cb 	bl	8005a04 <USB_InitFSLSPClkSel>
 800366e:	e00a      	b.n	8003686 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	79db      	ldrb	r3, [r3, #7]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d106      	bne.n	8003686 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800367e:	461a      	mov	r2, r3
 8003680:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003684:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f004 f96a 	bl	8007960 <HAL_HCD_PortEnabled_Callback>
 800368c:	e002      	b.n	8003694 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f004 f974 	bl	800797c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d103      	bne.n	80036a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f043 0320 	orr.w	r3, r3, #32
 80036a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6013      	str	r3, [r2, #0]
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e12b      	b.n	8003926 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd f9d0 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2224      	movs	r2, #36	@ 0x24
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800370e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800371e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003720:	f000 fde8 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 8003724:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4a81      	ldr	r2, [pc, #516]	@ (8003930 <HAL_I2C_Init+0x274>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d807      	bhi.n	8003740 <HAL_I2C_Init+0x84>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4a80      	ldr	r2, [pc, #512]	@ (8003934 <HAL_I2C_Init+0x278>)
 8003734:	4293      	cmp	r3, r2
 8003736:	bf94      	ite	ls
 8003738:	2301      	movls	r3, #1
 800373a:	2300      	movhi	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e006      	b.n	800374e <HAL_I2C_Init+0x92>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a7d      	ldr	r2, [pc, #500]	@ (8003938 <HAL_I2C_Init+0x27c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0e7      	b.n	8003926 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a78      	ldr	r2, [pc, #480]	@ (800393c <HAL_I2C_Init+0x280>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0c9b      	lsrs	r3, r3, #18
 8003760:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a6a      	ldr	r2, [pc, #424]	@ (8003930 <HAL_I2C_Init+0x274>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d802      	bhi.n	8003790 <HAL_I2C_Init+0xd4>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3301      	adds	r3, #1
 800378e:	e009      	b.n	80037a4 <HAL_I2C_Init+0xe8>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	4a69      	ldr	r2, [pc, #420]	@ (8003940 <HAL_I2C_Init+0x284>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	3301      	adds	r3, #1
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	495c      	ldr	r1, [pc, #368]	@ (8003930 <HAL_I2C_Init+0x274>)
 80037c0:	428b      	cmp	r3, r1
 80037c2:	d819      	bhi.n	80037f8 <HAL_I2C_Init+0x13c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e59      	subs	r1, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037d8:	400b      	ands	r3, r1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_I2C_Init+0x138>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e59      	subs	r1, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f2:	e051      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 80037f4:	2304      	movs	r3, #4
 80037f6:	e04f      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <HAL_I2C_Init+0x168>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e58      	subs	r0, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e012      	b.n	800384a <HAL_I2C_Init+0x18e>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e58      	subs	r0, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	0099      	lsls	r1, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	fbb0 f3f3 	udiv	r3, r0, r3
 800383a:	3301      	adds	r3, #1
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_Init+0x196>
 800384e:	2301      	movs	r3, #1
 8003850:	e022      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10e      	bne.n	8003878 <HAL_I2C_Init+0x1bc>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e58      	subs	r0, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	440b      	add	r3, r1
 8003868:	fbb0 f3f3 	udiv	r3, r0, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003876:	e00f      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	0099      	lsls	r1, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	6809      	ldr	r1, [r1, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6911      	ldr	r1, [r2, #16]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68d2      	ldr	r2, [r2, #12]
 80038d2:	4311      	orrs	r1, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	000186a0 	.word	0x000186a0
 8003934:	001e847f 	.word	0x001e847f
 8003938:	003d08ff 	.word	0x003d08ff
 800393c:	431bde83 	.word	0x431bde83
 8003940:	10624dd3 	.word	0x10624dd3

08003944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e267      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d075      	beq.n	8003a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003962:	4b88      	ldr	r3, [pc, #544]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d00c      	beq.n	8003988 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396e:	4b85      	ldr	r3, [pc, #532]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003976:	2b08      	cmp	r3, #8
 8003978:	d112      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397a:	4b82      	ldr	r3, [pc, #520]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003986:	d10b      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	4b7e      	ldr	r3, [pc, #504]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05b      	beq.n	8003a4c <HAL_RCC_OscConfig+0x108>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d157      	bne.n	8003a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e242      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a8:	d106      	bne.n	80039b8 <HAL_RCC_OscConfig+0x74>
 80039aa:	4b76      	ldr	r3, [pc, #472]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a75      	ldr	r2, [pc, #468]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x98>
 80039c2:	4b70      	ldr	r3, [pc, #448]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039dc:	4b69      	ldr	r3, [pc, #420]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a68      	ldr	r2, [pc, #416]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a65      	ldr	r2, [pc, #404]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fd fa4e 	bl	8000e9c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fd fa4a 	bl	8000e9c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	@ 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e207      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b5b      	ldr	r3, [pc, #364]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xc0>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd fa3a 	bl	8000e9c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd fa36 	bl	8000e9c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1f3      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	4b51      	ldr	r3, [pc, #324]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0xe8>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b47      	ldr	r3, [pc, #284]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b44      	ldr	r3, [pc, #272]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b41      	ldr	r3, [pc, #260]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1c7      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b3b      	ldr	r3, [pc, #236]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4937      	ldr	r1, [pc, #220]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e03a      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <HAL_RCC_OscConfig+0x244>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd f9ef 	bl	8000e9c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fd f9eb 	bl	8000e9c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e1a8      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4925      	ldr	r1, [pc, #148]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <HAL_RCC_OscConfig+0x244>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd f9ce 	bl	8000e9c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fd f9ca 	bl	8000e9c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e187      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d036      	beq.n	8003b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b36:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <HAL_RCC_OscConfig+0x248>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd f9ae 	bl	8000e9c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fd f9aa 	bl	8000e9c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e167      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x200>
 8003b62:	e01b      	b.n	8003b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <HAL_RCC_OscConfig+0x248>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd f997 	bl	8000e9c <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b70:	e00e      	b.n	8003b90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fd f993 	bl	8000e9c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d907      	bls.n	8003b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e150      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
 8003b84:	40023800 	.word	0x40023800
 8003b88:	42470000 	.word	0x42470000
 8003b8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b90:	4b88      	ldr	r3, [pc, #544]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ea      	bne.n	8003b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8097 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bae:	4b81      	ldr	r3, [pc, #516]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bca:	4b7a      	ldr	r3, [pc, #488]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	4b77      	ldr	r3, [pc, #476]	@ (8003db8 <HAL_RCC_OscConfig+0x474>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d118      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be6:	4b74      	ldr	r3, [pc, #464]	@ (8003db8 <HAL_RCC_OscConfig+0x474>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a73      	ldr	r2, [pc, #460]	@ (8003db8 <HAL_RCC_OscConfig+0x474>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf2:	f7fd f953 	bl	8000e9c <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fd f94f 	bl	8000e9c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e10c      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003db8 <HAL_RCC_OscConfig+0x474>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2ea>
 8003c20:	4b64      	ldr	r3, [pc, #400]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	4a63      	ldr	r2, [pc, #396]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2c:	e01c      	b.n	8003c68 <HAL_RCC_OscConfig+0x324>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x30c>
 8003c36:	4b5f      	ldr	r3, [pc, #380]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c42:	4b5c      	ldr	r3, [pc, #368]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	4a5b      	ldr	r2, [pc, #364]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0x324>
 8003c50:	4b58      	ldr	r3, [pc, #352]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	4a57      	ldr	r2, [pc, #348]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5c:	4b55      	ldr	r3, [pc, #340]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	4a54      	ldr	r2, [pc, #336]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	f023 0304 	bic.w	r3, r3, #4
 8003c66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fd f914 	bl	8000e9c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fd f910 	bl	8000e9c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0cb      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	4b49      	ldr	r3, [pc, #292]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ee      	beq.n	8003c78 <HAL_RCC_OscConfig+0x334>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9c:	f7fd f8fe 	bl	8000e9c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fd f8fa 	bl	8000e9c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0b5      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	4b3e      	ldr	r3, [pc, #248]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ee      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	4a38      	ldr	r2, [pc, #224]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a1 	beq.w	8003e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce2:	4b34      	ldr	r3, [pc, #208]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d05c      	beq.n	8003da8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d141      	bne.n	8003d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fd f8ce 	bl	8000e9c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd f8ca 	bl	8000e9c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e087      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	4b27      	ldr	r3, [pc, #156]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	019b      	lsls	r3, r3, #6
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	491b      	ldr	r1, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d52:	f7fd f8a3 	bl	8000e9c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5a:	f7fd f89f 	bl	8000e9c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e05c      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6c:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x416>
 8003d78:	e054      	b.n	8003e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7a:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd f88c 	bl	8000e9c <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fd f888 	bl	8000e9c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e045      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x444>
 8003da6:	e03d      	b.n	8003e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e038      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <HAL_RCC_OscConfig+0x4ec>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d028      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d121      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d11a      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d111      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800

08003e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0cc      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e48:	4b68      	ldr	r3, [pc, #416]	@ (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d90c      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b65      	ldr	r3, [pc, #404]	@ (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0b8      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e88:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea0:	4b53      	ldr	r3, [pc, #332]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a52      	ldr	r2, [pc, #328]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b50      	ldr	r3, [pc, #320]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	494d      	ldr	r1, [pc, #308]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d044      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d119      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e07f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e06f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e067      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f12:	4b37      	ldr	r3, [pc, #220]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 0203 	bic.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4934      	ldr	r1, [pc, #208]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f24:	f7fc ffba 	bl	8000e9c <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2c:	f7fc ffb6 	bl	8000e9c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e04f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 020c 	and.w	r2, r3, #12
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1eb      	bne.n	8003f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f54:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d20c      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b22      	ldr	r3, [pc, #136]	@ (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b20      	ldr	r3, [pc, #128]	@ (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e032      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4916      	ldr	r1, [pc, #88]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa6:	4b12      	ldr	r3, [pc, #72]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	490e      	ldr	r1, [pc, #56]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fba:	f000 f889 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	490a      	ldr	r1, [pc, #40]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	5ccb      	ldrb	r3, [r1, r3]
 8003fce:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd2:	4a09      	ldr	r2, [pc, #36]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc ff1a 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40023c00 	.word	0x40023c00
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08007fa0 	.word	0x08007fa0
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	20000004 	.word	0x20000004

08004000 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	@ 0x30
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d129      	bne.n	8004066 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	@ 0x30
 8004022:	4b28      	ldr	r3, [pc, #160]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800402e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004038:	2303      	movs	r3, #3
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	4619      	mov	r1, r3
 800404a:	481f      	ldr	r0, [pc, #124]	@ (80040c8 <HAL_RCC_MCOConfig+0xc8>)
 800404c:	f7fd f868 	bl	8001120 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004050:	4b1c      	ldr	r3, [pc, #112]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	430b      	orrs	r3, r1
 800405e:	4919      	ldr	r1, [pc, #100]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004064:	e029      	b.n	80040ba <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	6313      	str	r3, [r2, #48]	@ 0x30
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004088:	2302      	movs	r3, #2
 800408a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004090:	2300      	movs	r3, #0
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004094:	2300      	movs	r3, #0
 8004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004098:	f107 031c 	add.w	r3, r7, #28
 800409c:	4619      	mov	r1, r3
 800409e:	480b      	ldr	r0, [pc, #44]	@ (80040cc <HAL_RCC_MCOConfig+0xcc>)
 80040a0:	f7fd f83e 	bl	8001120 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80040a4:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	00d9      	lsls	r1, r3, #3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	430b      	orrs	r3, r1
 80040b4:	4903      	ldr	r1, [pc, #12]	@ (80040c4 <HAL_RCC_MCOConfig+0xc4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
}
 80040ba:	bf00      	nop
 80040bc:	3730      	adds	r7, #48	@ 0x30
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40020000 	.word	0x40020000
 80040cc:	40020800 	.word	0x40020800

080040d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d4:	b094      	sub	sp, #80	@ 0x50
 80040d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e8:	4b79      	ldr	r3, [pc, #484]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d00d      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x40>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	f200 80e1 	bhi.w	80042bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x34>
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d003      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x3a>
 8004102:	e0db      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b73      	ldr	r3, [pc, #460]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004106:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004108:	e0db      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800410a:	4b73      	ldr	r3, [pc, #460]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800410c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800410e:	e0d8      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004110:	4b6f      	ldr	r3, [pc, #444]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004118:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800411a:	4b6d      	ldr	r3, [pc, #436]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d063      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b6a      	ldr	r3, [pc, #424]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	2200      	movs	r2, #0
 800412e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004130:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004138:	633b      	str	r3, [r7, #48]	@ 0x30
 800413a:	2300      	movs	r3, #0
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
 800413e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004142:	4622      	mov	r2, r4
 8004144:	462b      	mov	r3, r5
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	0159      	lsls	r1, r3, #5
 8004150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004154:	0150      	lsls	r0, r2, #5
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4621      	mov	r1, r4
 800415c:	1a51      	subs	r1, r2, r1
 800415e:	6139      	str	r1, [r7, #16]
 8004160:	4629      	mov	r1, r5
 8004162:	eb63 0301 	sbc.w	r3, r3, r1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004174:	4659      	mov	r1, fp
 8004176:	018b      	lsls	r3, r1, #6
 8004178:	4651      	mov	r1, sl
 800417a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417e:	4651      	mov	r1, sl
 8004180:	018a      	lsls	r2, r1, #6
 8004182:	4651      	mov	r1, sl
 8004184:	ebb2 0801 	subs.w	r8, r2, r1
 8004188:	4659      	mov	r1, fp
 800418a:	eb63 0901 	sbc.w	r9, r3, r1
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a2:	4690      	mov	r8, r2
 80041a4:	4699      	mov	r9, r3
 80041a6:	4623      	mov	r3, r4
 80041a8:	eb18 0303 	adds.w	r3, r8, r3
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	462b      	mov	r3, r5
 80041b0:	eb49 0303 	adc.w	r3, r9, r3
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041c2:	4629      	mov	r1, r5
 80041c4:	024b      	lsls	r3, r1, #9
 80041c6:	4621      	mov	r1, r4
 80041c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041cc:	4621      	mov	r1, r4
 80041ce:	024a      	lsls	r2, r1, #9
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d6:	2200      	movs	r2, #0
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041e0:	f7fb fff2 	bl	80001c8 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ec:	e058      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ee:	4b38      	ldr	r3, [pc, #224]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	2200      	movs	r2, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	4611      	mov	r1, r2
 80041fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fe:	623b      	str	r3, [r7, #32]
 8004200:	2300      	movs	r3, #0
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
 8004204:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	f04f 0000 	mov.w	r0, #0
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	0159      	lsls	r1, r3, #5
 8004216:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800421a:	0150      	lsls	r0, r2, #5
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4641      	mov	r1, r8
 8004222:	ebb2 0a01 	subs.w	sl, r2, r1
 8004226:	4649      	mov	r1, r9
 8004228:	eb63 0b01 	sbc.w	fp, r3, r1
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004238:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800423c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004240:	ebb2 040a 	subs.w	r4, r2, sl
 8004244:	eb63 050b 	sbc.w	r5, r3, fp
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	00eb      	lsls	r3, r5, #3
 8004252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004256:	00e2      	lsls	r2, r4, #3
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	4643      	mov	r3, r8
 800425e:	18e3      	adds	r3, r4, r3
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	464b      	mov	r3, r9
 8004264:	eb45 0303 	adc.w	r3, r5, r3
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004276:	4629      	mov	r1, r5
 8004278:	028b      	lsls	r3, r1, #10
 800427a:	4621      	mov	r1, r4
 800427c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004280:	4621      	mov	r1, r4
 8004282:	028a      	lsls	r2, r1, #10
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428a:	2200      	movs	r2, #0
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	61fa      	str	r2, [r7, #28]
 8004290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004294:	f7fb ff98 	bl	80001c8 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4613      	mov	r3, r2
 800429e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	3301      	adds	r3, #1
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042ba:	e002      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3750      	adds	r7, #80	@ 0x50
 80042c8:	46bd      	mov	sp, r7
 80042ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	00f42400 	.word	0x00f42400
 80042d8:	007a1200 	.word	0x007a1200

080042dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e0:	4b03      	ldr	r3, [pc, #12]	@ (80042f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000000 	.word	0x20000000

080042f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042f8:	f7ff fff0 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0a9b      	lsrs	r3, r3, #10
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	@ (8004318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	08007fb0 	.word	0x08007fb0

0800431c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e07b      	b.n	8004426 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	2b00      	cmp	r3, #0
 8004334:	d108      	bne.n	8004348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800433e:	d009      	beq.n	8004354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
 8004346:	e005      	b.n	8004354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc fbd2 	bl	8000b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800438a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d8:	ea42 0103 	orr.w	r1, r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	f003 0104 	and.w	r1, r3, #4
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	f003 0210 	and.w	r2, r3, #16
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e041      	b.n	80044c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fc fba7 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f000 fc1d 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e041      	b.n	8004562 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f839 	bl	800456a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f000 fbce 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_TIM_OC_Start_IT+0x28>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e022      	b.n	80045ee <HAL_TIM_OC_Start_IT+0x6e>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d109      	bne.n	80045c2 <HAL_TIM_OC_Start_IT+0x42>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	e015      	b.n	80045ee <HAL_TIM_OC_Start_IT+0x6e>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d109      	bne.n	80045dc <HAL_TIM_OC_Start_IT+0x5c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e008      	b.n	80045ee <HAL_TIM_OC_Start_IT+0x6e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e0c7      	b.n	8004786 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_OC_Start_IT+0x86>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004604:	e013      	b.n	800462e <HAL_TIM_OC_Start_IT+0xae>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d104      	bne.n	8004616 <HAL_TIM_OC_Start_IT+0x96>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004614:	e00b      	b.n	800462e <HAL_TIM_OC_Start_IT+0xae>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d104      	bne.n	8004626 <HAL_TIM_OC_Start_IT+0xa6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004624:	e003      	b.n	800462e <HAL_TIM_OC_Start_IT+0xae>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d841      	bhi.n	80046b8 <HAL_TIM_OC_Start_IT+0x138>
 8004634:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <HAL_TIM_OC_Start_IT+0xbc>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004671 	.word	0x08004671
 8004640:	080046b9 	.word	0x080046b9
 8004644:	080046b9 	.word	0x080046b9
 8004648:	080046b9 	.word	0x080046b9
 800464c:	08004683 	.word	0x08004683
 8004650:	080046b9 	.word	0x080046b9
 8004654:	080046b9 	.word	0x080046b9
 8004658:	080046b9 	.word	0x080046b9
 800465c:	08004695 	.word	0x08004695
 8004660:	080046b9 	.word	0x080046b9
 8004664:	080046b9 	.word	0x080046b9
 8004668:	080046b9 	.word	0x080046b9
 800466c:	080046a7 	.word	0x080046a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0202 	orr.w	r2, r2, #2
 800467e:	60da      	str	r2, [r3, #12]
      break;
 8004680:	e01d      	b.n	80046be <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0204 	orr.w	r2, r2, #4
 8004690:	60da      	str	r2, [r3, #12]
      break;
 8004692:	e014      	b.n	80046be <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	60da      	str	r2, [r3, #12]
      break;
 80046a4:	e00b      	b.n	80046be <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0210 	orr.w	r2, r2, #16
 80046b4:	60da      	str	r2, [r3, #12]
      break;
 80046b6:	e002      	b.n	80046be <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d15f      	bne.n	8004784 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2201      	movs	r2, #1
 80046ca:	6839      	ldr	r1, [r7, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fde3 	bl	8005298 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004790 <HAL_TIM_OC_Start_IT+0x210>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_TIM_OC_Start_IT+0x166>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004794 <HAL_TIM_OC_Start_IT+0x214>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_OC_Start_IT+0x16a>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_TIM_OC_Start_IT+0x16c>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a22      	ldr	r2, [pc, #136]	@ (8004790 <HAL_TIM_OC_Start_IT+0x210>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d022      	beq.n	8004750 <HAL_TIM_OC_Start_IT+0x1d0>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004712:	d01d      	beq.n	8004750 <HAL_TIM_OC_Start_IT+0x1d0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <HAL_TIM_OC_Start_IT+0x218>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d018      	beq.n	8004750 <HAL_TIM_OC_Start_IT+0x1d0>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1e      	ldr	r2, [pc, #120]	@ (800479c <HAL_TIM_OC_Start_IT+0x21c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <HAL_TIM_OC_Start_IT+0x1d0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <HAL_TIM_OC_Start_IT+0x220>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00e      	beq.n	8004750 <HAL_TIM_OC_Start_IT+0x1d0>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a17      	ldr	r2, [pc, #92]	@ (8004794 <HAL_TIM_OC_Start_IT+0x214>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d009      	beq.n	8004750 <HAL_TIM_OC_Start_IT+0x1d0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a18      	ldr	r2, [pc, #96]	@ (80047a4 <HAL_TIM_OC_Start_IT+0x224>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d004      	beq.n	8004750 <HAL_TIM_OC_Start_IT+0x1d0>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a17      	ldr	r2, [pc, #92]	@ (80047a8 <HAL_TIM_OC_Start_IT+0x228>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d111      	bne.n	8004774 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b06      	cmp	r3, #6
 8004760:	d010      	beq.n	8004784 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004772:	e007      	b.n	8004784 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40010400 	.word	0x40010400
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40001800 	.word	0x40001800

080047ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0202 	mvn.w	r2, #2
 80047e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa3a 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc f8f6 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa3d 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01b      	beq.n	800485c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0204 	mvn.w	r2, #4
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa14 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc f8d0 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fa17 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0208 	mvn.w	r2, #8
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9ee 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc f8aa 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f9f1 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0210 	mvn.w	r2, #16
 80048c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2208      	movs	r2, #8
 80048ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9c8 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc f884 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f9cb 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00c      	beq.n	8004918 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0201 	mvn.w	r2, #1
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9a2 	bl	8004c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00c      	beq.n	800493c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fd5a 	bl	80053f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f99c 	bl	8004c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0220 	mvn.w	r2, #32
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fd2c 	bl	80053dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e048      	b.n	8004a3c <HAL_TIM_OC_ConfigChannel+0xb0>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d839      	bhi.n	8004a2c <HAL_TIM_OC_ConfigChannel+0xa0>
 80049b8:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	08004a2d 	.word	0x08004a2d
 80049cc:	08004a2d 	.word	0x08004a2d
 80049d0:	08004a03 	.word	0x08004a03
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a11 	.word	0x08004a11
 80049e4:	08004a2d 	.word	0x08004a2d
 80049e8:	08004a2d 	.word	0x08004a2d
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a1f 	.word	0x08004a1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fa02 	bl	8004e04 <TIM_OC1_SetConfig>
      break;
 8004a00:	e017      	b.n	8004a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fa6b 	bl	8004ee4 <TIM_OC2_SetConfig>
      break;
 8004a0e:	e010      	b.n	8004a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fada 	bl	8004fd0 <TIM_OC3_SetConfig>
      break;
 8004a1c:	e009      	b.n	8004a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fb47 	bl	80050b8 <TIM_OC4_SetConfig>
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_ConfigClockSource+0x1c>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0b4      	b.n	8004bca <HAL_TIM_ConfigClockSource+0x186>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a98:	d03e      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0xd4>
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a9e:	f200 8087 	bhi.w	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa6:	f000 8086 	beq.w	8004bb6 <HAL_TIM_ConfigClockSource+0x172>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aae:	d87f      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b70      	cmp	r3, #112	@ 0x70
 8004ab2:	d01a      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0xa6>
 8004ab4:	2b70      	cmp	r3, #112	@ 0x70
 8004ab6:	d87b      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b60      	cmp	r3, #96	@ 0x60
 8004aba:	d050      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x11a>
 8004abc:	2b60      	cmp	r3, #96	@ 0x60
 8004abe:	d877      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b50      	cmp	r3, #80	@ 0x50
 8004ac2:	d03c      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0xfa>
 8004ac4:	2b50      	cmp	r3, #80	@ 0x50
 8004ac6:	d873      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b40      	cmp	r3, #64	@ 0x40
 8004aca:	d058      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x13a>
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d86f      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b30      	cmp	r3, #48	@ 0x30
 8004ad2:	d064      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ad4:	2b30      	cmp	r3, #48	@ 0x30
 8004ad6:	d86b      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d060      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d867      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d05c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d05a      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ae8:	e062      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004afa:	f000 fbad 	bl	8005258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	609a      	str	r2, [r3, #8]
      break;
 8004b16:	e04f      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b28:	f000 fb96 	bl	8005258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b3a:	609a      	str	r2, [r3, #8]
      break;
 8004b3c:	e03c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 fb0a 	bl	8005164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2150      	movs	r1, #80	@ 0x50
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fb63 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e02c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f000 fb29 	bl	80051c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2160      	movs	r1, #96	@ 0x60
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb53 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004b7c:	e01c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f000 faea 	bl	8005164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2140      	movs	r1, #64	@ 0x40
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fb43 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004b9c:	e00c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f000 fb3a 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004bae:	e003      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b0c      	cmp	r3, #12
 8004be6:	d831      	bhi.n	8004c4c <HAL_TIM_ReadCapturedValue+0x78>
 8004be8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c25 	.word	0x08004c25
 8004bf4:	08004c4d 	.word	0x08004c4d
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004c2f 	.word	0x08004c2f
 8004c04:	08004c4d 	.word	0x08004c4d
 8004c08:	08004c4d 	.word	0x08004c4d
 8004c0c:	08004c4d 	.word	0x08004c4d
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c4d 	.word	0x08004c4d
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004c4d 	.word	0x08004c4d
 8004c20:	08004c43 	.word	0x08004c43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	60fb      	str	r3, [r7, #12]

      break;
 8004c2c:	e00f      	b.n	8004c4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	60fb      	str	r3, [r7, #12]

      break;
 8004c36:	e00a      	b.n	8004c4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3e:	60fb      	str	r3, [r7, #12]

      break;
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	60fb      	str	r3, [r7, #12]

      break;
 8004c4a:	e000      	b.n	8004c4e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c4c:	bf00      	nop
  }

  return tmpreg;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a46      	ldr	r2, [pc, #280]	@ (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a43      	ldr	r2, [pc, #268]	@ (8004ddc <TIM_Base_SetConfig+0x130>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a42      	ldr	r2, [pc, #264]	@ (8004de0 <TIM_Base_SetConfig+0x134>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a41      	ldr	r2, [pc, #260]	@ (8004de4 <TIM_Base_SetConfig+0x138>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a40      	ldr	r2, [pc, #256]	@ (8004de8 <TIM_Base_SetConfig+0x13c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a35      	ldr	r2, [pc, #212]	@ (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d02b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0c:	d027      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a32      	ldr	r2, [pc, #200]	@ (8004ddc <TIM_Base_SetConfig+0x130>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d023      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a31      	ldr	r2, [pc, #196]	@ (8004de0 <TIM_Base_SetConfig+0x134>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01f      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a30      	ldr	r2, [pc, #192]	@ (8004de4 <TIM_Base_SetConfig+0x138>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2f      	ldr	r2, [pc, #188]	@ (8004de8 <TIM_Base_SetConfig+0x13c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d017      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2e      	ldr	r2, [pc, #184]	@ (8004dec <TIM_Base_SetConfig+0x140>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2d      	ldr	r2, [pc, #180]	@ (8004df0 <TIM_Base_SetConfig+0x144>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00f      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2c      	ldr	r2, [pc, #176]	@ (8004df4 <TIM_Base_SetConfig+0x148>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2b      	ldr	r2, [pc, #172]	@ (8004df8 <TIM_Base_SetConfig+0x14c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <TIM_Base_SetConfig+0x150>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a29      	ldr	r2, [pc, #164]	@ (8004e00 <TIM_Base_SetConfig+0x154>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a10      	ldr	r2, [pc, #64]	@ (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0xf8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a12      	ldr	r2, [pc, #72]	@ (8004de8 <TIM_Base_SetConfig+0x13c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f023 0201 	bic.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	611a      	str	r2, [r3, #16]
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40010400 	.word	0x40010400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800
 8004df8:	40001800 	.word	0x40001800
 8004dfc:	40001c00 	.word	0x40001c00
 8004e00:	40002000 	.word	0x40002000

08004e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f023 0201 	bic.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f023 0302 	bic.w	r3, r3, #2
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a20      	ldr	r2, [pc, #128]	@ (8004edc <TIM_OC1_SetConfig+0xd8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC1_SetConfig+0x64>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee0 <TIM_OC1_SetConfig+0xdc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10c      	bne.n	8004e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0308 	bic.w	r3, r3, #8
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a15      	ldr	r2, [pc, #84]	@ (8004edc <TIM_OC1_SetConfig+0xd8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_OC1_SetConfig+0x8e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <TIM_OC1_SetConfig+0xdc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d111      	bne.n	8004eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40010400 	.word	0x40010400

08004ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f023 0210 	bic.w	r2, r3, #16
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0320 	bic.w	r3, r3, #32
 8004f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a22      	ldr	r2, [pc, #136]	@ (8004fc8 <TIM_OC2_SetConfig+0xe4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC2_SetConfig+0x68>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <TIM_OC2_SetConfig+0xe8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d10d      	bne.n	8004f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	@ (8004fc8 <TIM_OC2_SetConfig+0xe4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_OC2_SetConfig+0x94>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <TIM_OC2_SetConfig+0xe8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d113      	bne.n	8004fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40010400 	.word	0x40010400

08004fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a21      	ldr	r2, [pc, #132]	@ (80050b0 <TIM_OC3_SetConfig+0xe0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_OC3_SetConfig+0x66>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a20      	ldr	r2, [pc, #128]	@ (80050b4 <TIM_OC3_SetConfig+0xe4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10d      	bne.n	8005052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800503c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <TIM_OC3_SetConfig+0xe0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC3_SetConfig+0x92>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a15      	ldr	r2, [pc, #84]	@ (80050b4 <TIM_OC3_SetConfig+0xe4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d113      	bne.n	800508a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	621a      	str	r2, [r3, #32]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40010400 	.word	0x40010400

080050b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a12      	ldr	r2, [pc, #72]	@ (800515c <TIM_OC4_SetConfig+0xa4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC4_SetConfig+0x68>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a11      	ldr	r2, [pc, #68]	@ (8005160 <TIM_OC4_SetConfig+0xa8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d109      	bne.n	8005134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400

08005164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0201 	bic.w	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 030a 	bic.w	r3, r3, #10
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b087      	sub	sp, #28
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f023 0210 	bic.w	r2, r3, #16
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	f043 0307 	orr.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	431a      	orrs	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e05a      	b.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a21      	ldr	r2, [pc, #132]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005348:	d01d      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1a      	ldr	r2, [pc, #104]	@ (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a17      	ldr	r2, [pc, #92]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10c      	bne.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800538c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40001800 	.word	0x40001800

080053dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005404:	b084      	sub	sp, #16
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	f107 001c 	add.w	r0, r7, #28
 8005412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005416:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800541a:	2b01      	cmp	r3, #1
 800541c:	d123      	bne.n	8005466 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005422:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005446:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800544a:	2b01      	cmp	r3, #1
 800544c:	d105      	bne.n	800545a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f9dc 	bl	8005818 <USB_CoreReset>
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]
 8005464:	e01b      	b.n	800549e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9d0 	bl	8005818 <USB_CoreReset>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800547c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005490:	e005      	b.n	800549e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800549e:	7fbb      	ldrb	r3, [r7, #30]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d10b      	bne.n	80054bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f043 0206 	orr.w	r2, r3, #6
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054c8:	b004      	add	sp, #16
 80054ca:	4770      	bx	lr

080054cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 0201 	bic.w	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d115      	bne.n	800555e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800553e:	200a      	movs	r0, #10
 8005540:	f7fb fcb8 	bl	8000eb4 <HAL_Delay>
      ms += 10U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	330a      	adds	r3, #10
 8005548:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f956 	bl	80057fc <USB_GetMode>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d01e      	beq.n	8005594 <USB_SetCurrentMode+0x84>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2bc7      	cmp	r3, #199	@ 0xc7
 800555a:	d9f0      	bls.n	800553e <USB_SetCurrentMode+0x2e>
 800555c:	e01a      	b.n	8005594 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d115      	bne.n	8005590 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005570:	200a      	movs	r0, #10
 8005572:	f7fb fc9f 	bl	8000eb4 <HAL_Delay>
      ms += 10U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	330a      	adds	r3, #10
 800557a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f93d 	bl	80057fc <USB_GetMode>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <USB_SetCurrentMode+0x84>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2bc7      	cmp	r3, #199	@ 0xc7
 800558c:	d9f0      	bls.n	8005570 <USB_SetCurrentMode+0x60>
 800558e:	e001      	b.n	8005594 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e005      	b.n	80055a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2bc8      	cmp	r3, #200	@ 0xc8
 8005598:	d101      	bne.n	800559e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055c2:	d901      	bls.n	80055c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e01b      	b.n	8005600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	daf2      	bge.n	80055b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	019b      	lsls	r3, r3, #6
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055ec:	d901      	bls.n	80055f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e006      	b.n	8005600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d0f0      	beq.n	80055e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005624:	d901      	bls.n	800562a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e018      	b.n	800565c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	daf2      	bge.n	8005618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2210      	movs	r2, #16
 800563a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005648:	d901      	bls.n	800564e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e006      	b.n	800565c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b10      	cmp	r3, #16
 8005658:	d0f0      	beq.n	800563c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	@ 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	460b      	mov	r3, r1
 8005678:	71fb      	strb	r3, [r7, #7]
 800567a:	4613      	mov	r3, r2
 800567c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005686:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d123      	bne.n	80056d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800568e:	88bb      	ldrh	r3, [r7, #4]
 8005690:	3303      	adds	r3, #3
 8005692:	089b      	lsrs	r3, r3, #2
 8005694:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e018      	b.n	80056ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	031a      	lsls	r2, r3, #12
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a8:	461a      	mov	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3301      	adds	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	3301      	adds	r3, #1
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d3e2      	bcc.n	800569c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3724      	adds	r7, #36	@ 0x24
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b08b      	sub	sp, #44	@ 0x2c
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	089b      	lsrs	r3, r3, #2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	e014      	b.n	800573a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	601a      	str	r2, [r3, #0]
    pDest++;
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	3301      	adds	r3, #1
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	3301      	adds	r3, #1
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	3301      	adds	r3, #1
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	3301      	adds	r3, #1
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	3301      	adds	r3, #1
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3e6      	bcc.n	8005710 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005742:	8bfb      	ldrh	r3, [r7, #30]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01e      	beq.n	8005786 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005752:	461a      	mov	r2, r3
 8005754:	f107 0310 	add.w	r3, r7, #16
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
 8005768:	b2da      	uxtb	r2, r3
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	701a      	strb	r2, [r3, #0]
      i++;
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	3301      	adds	r3, #1
 8005772:	623b      	str	r3, [r7, #32]
      pDest++;
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	3301      	adds	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800577a:	8bfb      	ldrh	r3, [r7, #30]
 800577c:	3b01      	subs	r3, #1
 800577e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005780:	8bfb      	ldrh	r3, [r7, #30]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ea      	bne.n	800575c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005788:	4618      	mov	r0, r3
 800578a:	372c      	adds	r7, #44	@ 0x2c
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4013      	ands	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057ac:	68fb      	ldr	r3, [r7, #12]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057ee:	68bb      	ldr	r3, [r7, #8]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0301 	and.w	r3, r3, #1
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005830:	d901      	bls.n	8005836 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e01b      	b.n	800586e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	daf2      	bge.n	8005824 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3301      	adds	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800585a:	d901      	bls.n	8005860 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e006      	b.n	800586e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d0f0      	beq.n	800584e <USB_CoreReset+0x36>

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800587c:	b084      	sub	sp, #16
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800588a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800589c:	461a      	mov	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d119      	bne.n	8005906 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80058d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d10a      	bne.n	80058f0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e014      	b.n	800591a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058fe:	f023 0304 	bic.w	r3, r3, #4
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e009      	b.n	800591a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005914:	f023 0304 	bic.w	r3, r3, #4
 8005918:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800591a:	2110      	movs	r1, #16
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff fe43 	bl	80055a8 <USB_FlushTxFifo>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fe6d 	bl	800560c <USB_FlushRxFifo>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e015      	b.n	800596e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 33ff 	mov.w	r3, #4294967295
 8005954:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005962:	461a      	mov	r2, r3
 8005964:	2300      	movs	r3, #0
 8005966:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	3301      	adds	r3, #1
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005972:	461a      	mov	r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4293      	cmp	r3, r2
 8005978:	d3e3      	bcc.n	8005942 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f04f 32ff 	mov.w	r2, #4294967295
 8005986:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a18      	ldr	r2, [pc, #96]	@ (80059ec <USB_HostInit+0x170>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10b      	bne.n	80059a8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005996:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a15      	ldr	r2, [pc, #84]	@ (80059f0 <USB_HostInit+0x174>)
 800599c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a14      	ldr	r2, [pc, #80]	@ (80059f4 <USB_HostInit+0x178>)
 80059a2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80059a6:	e009      	b.n	80059bc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2280      	movs	r2, #128	@ 0x80
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a11      	ldr	r2, [pc, #68]	@ (80059f8 <USB_HostInit+0x17c>)
 80059b2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a11      	ldr	r2, [pc, #68]	@ (80059fc <USB_HostInit+0x180>)
 80059b8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d105      	bne.n	80059d0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f043 0210 	orr.w	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <USB_HostInit+0x184>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e8:	b004      	add	sp, #16
 80059ea:	4770      	bx	lr
 80059ec:	40040000 	.word	0x40040000
 80059f0:	01000200 	.word	0x01000200
 80059f4:	00e00300 	.word	0x00e00300
 80059f8:	00600080 	.word	0x00600080
 80059fc:	004000e0 	.word	0x004000e0
 8005a00:	a3200008 	.word	0xa3200008

08005a04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a52:	6053      	str	r3, [r2, #4]
 8005a54:	e00c      	b.n	8005a70 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d107      	bne.n	8005a6c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a62:	461a      	mov	r2, r3
 8005a64:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005a68:	6053      	str	r3, [r2, #4]
 8005a6a:	e001      	b.n	8005a70 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005aa2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <USB_DriveVbus+0x44>
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005abc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ac0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005acc:	d109      	bne.n	8005ae2 <USB_DriveVbus+0x64>
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d106      	bne.n	8005ae2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ae0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	0c5b      	lsrs	r3, r3, #17
 8005b0e:	f003 0303 	and.w	r3, r3, #3
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	b29b      	uxth	r3, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	70fb      	strb	r3, [r7, #3]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70bb      	strb	r3, [r7, #2]
 8005b56:	4613      	mov	r3, r2
 8005b58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295
 8005b74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d87c      	bhi.n	8005c78 <USB_HC_Init+0x138>
 8005b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b84 <USB_HC_Init+0x44>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005c3b 	.word	0x08005c3b
 8005b8c:	08005b95 	.word	0x08005b95
 8005b90:	08005bfd 	.word	0x08005bfd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005ba6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ba8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da10      	bge.n	8005bd2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bce:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005bd0:	e055      	b.n	8005c7e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a6f      	ldr	r2, [pc, #444]	@ (8005d94 <USB_HC_Init+0x254>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d151      	bne.n	8005c7e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	78fa      	ldrb	r2, [r7, #3]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bf8:	60d3      	str	r3, [r2, #12]
      break;
 8005bfa:	e040      	b.n	8005c7e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005c0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da34      	bge.n	8005c82 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c38:	e023      	b.n	8005c82 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c46:	461a      	mov	r2, r3
 8005c48:	f240 2325 	movw	r3, #549	@ 0x225
 8005c4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da17      	bge.n	8005c86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	78fa      	ldrb	r2, [r7, #3]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c70:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005c74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c76:	e006      	b.n	8005c86 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	77fb      	strb	r3, [r7, #31]
      break;
 8005c7c:	e004      	b.n	8005c88 <USB_HC_Init+0x148>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e002      	b.n	8005c88 <USB_HC_Init+0x148>
      break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <USB_HC_Init+0x148>
      break;
 8005c86:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	2101      	movs	r1, #1
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ce4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da03      	bge.n	8005cf4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005cec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	e001      	b.n	8005cf8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fef9 	bl	8005af0 <USB_GetHostSpeed>
 8005cfe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d106      	bne.n	8005d16 <USB_HC_Init+0x1d6>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d003      	beq.n	8005d16 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e001      	b.n	8005d1a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d1a:	787b      	ldrb	r3, [r7, #1]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d22:	78bb      	ldrb	r3, [r7, #2]
 8005d24:	02db      	lsls	r3, r3, #11
 8005d26:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d30:	049b      	lsls	r3, r3, #18
 8005d32:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005d38:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d3e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005d54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d58:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d003      	beq.n	8005d6a <USB_HC_Init+0x22a>
 8005d62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d10f      	bne.n	8005d8a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40040000 	.word	0x40040000

08005d98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	@ 0x30
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005db4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a5d      	ldr	r2, [pc, #372]	@ (8005f30 <USB_HC_StartXfer+0x198>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d12f      	bne.n	8005e1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d11c      	bne.n	8005dfe <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	7c9b      	ldrb	r3, [r3, #18]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <USB_HC_StartXfer+0x3c>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	7c9b      	ldrb	r3, [r3, #18]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d124      	bne.n	8005e1e <USB_HC_StartXfer+0x86>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	799b      	ldrb	r3, [r3, #6]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d120      	bne.n	8005e1e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfa:	60d3      	str	r3, [r2, #12]
 8005dfc:	e00f      	b.n	8005e1e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	791b      	ldrb	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <USB_HC_StartXfer+0x86>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	795b      	ldrb	r3, [r3, #5]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d107      	bne.n	8005e1e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	4619      	mov	r1, r3
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fb6b 	bl	80064f0 <USB_DoPing>
        return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e232      	b.n	8006284 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	799b      	ldrb	r3, [r3, #6]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d158      	bne.n	8005ed8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005e26:	2301      	movs	r3, #1
 8005e28:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	78db      	ldrb	r3, [r3, #3]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	8a92      	ldrh	r2, [r2, #20]
 8005e38:	fb03 f202 	mul.w	r2, r3, r2
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61da      	str	r2, [r3, #28]
 8005e40:	e07c      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	7c9b      	ldrb	r3, [r3, #18]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d130      	bne.n	8005eac <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005e50:	d918      	bls.n	8005e84 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	8a9b      	ldrh	r3, [r3, #20]
 8005e56:	461a      	mov	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d003      	beq.n	8005e74 <USB_HC_StartXfer+0xdc>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d103      	bne.n	8005e7c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2202      	movs	r2, #2
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	e05f      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e05b      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d007      	beq.n	8005ea4 <USB_HC_StartXfer+0x10c>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d003      	beq.n	8005ea4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	e04b      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	e047      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10d      	bne.n	8005ece <USB_HC_StartXfer+0x136>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	8a92      	ldrh	r2, [r2, #20]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d907      	bls.n	8005ece <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ebe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	8a92      	ldrh	r2, [r2, #20]
 8005ec4:	fb03 f202 	mul.w	r2, r3, r2
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	61da      	str	r2, [r3, #28]
 8005ecc:	e036      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	61da      	str	r2, [r3, #28]
 8005ed6:	e031      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d018      	beq.n	8005f12 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	8a92      	ldrh	r2, [r2, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	3b01      	subs	r3, #1
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	8a92      	ldrh	r2, [r2, #20]
 8005ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005ef6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005ef8:	8b7b      	ldrh	r3, [r7, #26]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d90b      	bls.n	8005f16 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005efe:	8b7b      	ldrh	r3, [r7, #26]
 8005f00:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	8a92      	ldrh	r2, [r2, #20]
 8005f08:	fb03 f202 	mul.w	r2, r3, r2
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	61da      	str	r2, [r3, #28]
 8005f10:	e001      	b.n	8005f16 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005f12:	2301      	movs	r3, #1
 8005f14:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	78db      	ldrb	r3, [r3, #3]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	8a92      	ldrh	r2, [r2, #20]
 8005f24:	fb03 f202 	mul.w	r2, r3, r2
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	61da      	str	r2, [r3, #28]
 8005f2c:	e006      	b.n	8005f3c <USB_HC_StartXfer+0x1a4>
 8005f2e:	bf00      	nop
 8005f30:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f46:	04d9      	lsls	r1, r3, #19
 8005f48:	4ba3      	ldr	r3, [pc, #652]	@ (80061d8 <USB_HC_StartXfer+0x440>)
 8005f4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	7d9b      	ldrb	r3, [r3, #22]
 8005f52:	075b      	lsls	r3, r3, #29
 8005f54:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	0148      	lsls	r0, r1, #5
 8005f5c:	6a39      	ldr	r1, [r7, #32]
 8005f5e:	4401      	add	r1, r0
 8005f60:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6999      	ldr	r1, [r3, #24]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7e:	460a      	mov	r2, r1
 8005f80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005fb8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	7e7b      	ldrb	r3, [r7, #25]
 8005fca:	075b      	lsls	r3, r3, #29
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	0148      	lsls	r0, r1, #5
 8005fd0:	6a39      	ldr	r1, [r7, #32]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	799b      	ldrb	r3, [r3, #6]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	f040 80c3 	bne.w	800616c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	7c5b      	ldrb	r3, [r3, #17]
 8005fea:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ffe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006002:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	6a3a      	ldr	r2, [r7, #32]
 8006018:	440a      	add	r2, r1
 800601a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006022:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	79db      	ldrb	r3, [r3, #7]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d123      	bne.n	8006074 <USB_HC_StartXfer+0x2dc>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	78db      	ldrb	r3, [r3, #3]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11f      	bne.n	8006074 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	6a3a      	ldr	r2, [r7, #32]
 8006048:	440a      	add	r2, r1
 800604a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800604e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006052:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800606e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006072:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	7c9b      	ldrb	r3, [r3, #18]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d003      	beq.n	8006084 <USB_HC_StartXfer+0x2ec>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	7c9b      	ldrb	r3, [r3, #18]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d117      	bne.n	80060b4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006088:	2b01      	cmp	r3, #1
 800608a:	d113      	bne.n	80060b4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	78db      	ldrb	r3, [r3, #3]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10f      	bne.n	80060b4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	7c9b      	ldrb	r3, [r3, #18]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d162      	bne.n	8006182 <USB_HC_StartXfer+0x3ea>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	78db      	ldrb	r3, [r3, #3]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d15e      	bne.n	8006182 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d858      	bhi.n	8006180 <USB_HC_StartXfer+0x3e8>
 80060ce:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <USB_HC_StartXfer+0x33c>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	08006107 	.word	0x08006107
 80060dc:	08006129 	.word	0x08006129
 80060e0:	0800614b 	.word	0x0800614b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006102:	6053      	str	r3, [r2, #4]
          break;
 8006104:	e03d      	b.n	8006182 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	440a      	add	r2, r1
 800611c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006120:	f043 030e 	orr.w	r3, r3, #14
 8006124:	6053      	str	r3, [r2, #4]
          break;
 8006126:	e02c      	b.n	8006182 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	440a      	add	r2, r1
 800613e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006146:	6053      	str	r3, [r2, #4]
          break;
 8006148:	e01b      	b.n	8006182 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	440a      	add	r2, r1
 8006160:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006168:	6053      	str	r3, [r2, #4]
          break;
 800616a:	e00a      	b.n	8006182 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006178:	461a      	mov	r2, r3
 800617a:	2300      	movs	r3, #0
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	e000      	b.n	8006182 <USB_HC_StartXfer+0x3ea>
          break;
 8006180:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006198:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e003      	b.n	80061b4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061b2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061ba:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c8:	461a      	mov	r2, r3
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e055      	b.n	8006284 <USB_HC_StartXfer+0x4ec>
 80061d8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	78db      	ldrb	r3, [r3, #3]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d14e      	bne.n	8006282 <USB_HC_StartXfer+0x4ea>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d04a      	beq.n	8006282 <USB_HC_StartXfer+0x4ea>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	79db      	ldrb	r3, [r3, #7]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d146      	bne.n	8006282 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	7c9b      	ldrb	r3, [r3, #18]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d831      	bhi.n	8006260 <USB_HC_StartXfer+0x4c8>
 80061fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <USB_HC_StartXfer+0x46c>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006215 	.word	0x08006215
 8006208:	08006239 	.word	0x08006239
 800620c:	08006215 	.word	0x08006215
 8006210:	08006239 	.word	0x08006239
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	3303      	adds	r3, #3
 800621a:	089b      	lsrs	r3, r3, #2
 800621c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800621e:	8afa      	ldrh	r2, [r7, #22]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	b29b      	uxth	r3, r3
 8006226:	429a      	cmp	r2, r3
 8006228:	d91c      	bls.n	8006264 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f043 0220 	orr.w	r2, r3, #32
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	619a      	str	r2, [r3, #24]
        }
        break;
 8006236:	e015      	b.n	8006264 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	3303      	adds	r3, #3
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006242:	8afa      	ldrh	r2, [r7, #22]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	b29b      	uxth	r3, r3
 800624e:	429a      	cmp	r2, r3
 8006250:	d90a      	bls.n	8006268 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	619a      	str	r2, [r3, #24]
        }
        break;
 800625e:	e003      	b.n	8006268 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006260:	bf00      	nop
 8006262:	e002      	b.n	800626a <USB_HC_StartXfer+0x4d2>
        break;
 8006264:	bf00      	nop
 8006266:	e000      	b.n	800626a <USB_HC_StartXfer+0x4d2>
        break;
 8006268:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6999      	ldr	r1, [r3, #24]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	785a      	ldrb	r2, [r3, #1]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	b29b      	uxth	r3, r3
 8006278:	2000      	movs	r0, #0
 800627a:	9000      	str	r0, [sp, #0]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff f9f3 	bl	8005668 <USB_WritePacket>
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	@ 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	b29b      	uxth	r3, r3
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b089      	sub	sp, #36	@ 0x24
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	0c9b      	lsrs	r3, r3, #18
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	0fdb      	lsrs	r3, r3, #31
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	0fdb      	lsrs	r3, r3, #31
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b20      	cmp	r3, #32
 8006312:	d10d      	bne.n	8006330 <USB_HC_Halt+0x82>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <USB_HC_Halt+0x82>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d002      	beq.n	800632c <USB_HC_Halt+0x7e>
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d101      	bne.n	8006330 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e0d8      	b.n	80064e2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <USB_HC_Halt+0x8e>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d173      	bne.n	8006424 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006356:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800635a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d14a      	bne.n	80063fe <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d133      	bne.n	80063dc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800638e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006392:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063b2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c0:	d82e      	bhi.n	8006420 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d8:	d0ec      	beq.n	80063b4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063da:	e081      	b.n	80064e0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063fc:	e070      	b.n	80064e0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	440a      	add	r2, r1
 8006414:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006418:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800641c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800641e:	e05f      	b.n	80064e0 <USB_HC_Halt+0x232>
            break;
 8006420:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006422:	e05d      	b.n	80064e0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	440a      	add	r2, r1
 800643a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800643e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006442:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d133      	bne.n	80064bc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800646e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006472:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	440a      	add	r2, r1
 800648a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800648e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006492:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	3301      	adds	r3, #1
 8006498:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064a0:	d81d      	bhi.n	80064de <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b8:	d0ec      	beq.n	8006494 <USB_HC_Halt+0x1e6>
 80064ba:	e011      	b.n	80064e0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e000      	b.n	80064e0 <USB_HC_Halt+0x232>
          break;
 80064de:	bf00      	nop
    }
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3724      	adds	r7, #36	@ 0x24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006504:	2301      	movs	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	04da      	lsls	r2, r3, #19
 800650c:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <USB_DoPing+0x74>)
 800650e:	4013      	ands	r3, r2
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	440a      	add	r2, r1
 8006518:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800651c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006520:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006538:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006540:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800654e:	461a      	mov	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	1ff80000 	.word	0x1ff80000

08006568 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fe ffb6 	bl	80054ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006582:	2110      	movs	r1, #16
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff f80f 	bl	80055a8 <USB_FlushTxFifo>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff f839 	bl	800560c <USB_FlushRxFifo>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065a4:	2300      	movs	r3, #0
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	e01f      	b.n	80065ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065de:	461a      	mov	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	3301      	adds	r3, #1
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b0f      	cmp	r3, #15
 80065ee:	d9dc      	bls.n	80065aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e034      	b.n	8006660 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800660c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006614:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800661c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662a:	461a      	mov	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800663c:	d80c      	bhi.n	8006658 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	4413      	add	r3, r2
 8006646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006654:	d0ec      	beq.n	8006630 <USB_StopHost+0xc8>
 8006656:	e000      	b.n	800665a <USB_StopHost+0xf2>
        break;
 8006658:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3301      	adds	r3, #1
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d9c7      	bls.n	80065f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800666c:	461a      	mov	r2, r3
 800666e:	f04f 33ff 	mov.w	r3, #4294967295
 8006672:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f04f 32ff 	mov.w	r2, #4294967295
 800667a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7fe ff25 	bl	80054cc <USB_EnableGlobalInt>

  return ret;
 8006682:	7ffb      	ldrb	r3, [r7, #31]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b089      	sub	sp, #36	@ 0x24
 8006690:	af04      	add	r7, sp, #16
 8006692:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006694:	2301      	movs	r3, #1
 8006696:	2202      	movs	r2, #2
 8006698:	2102      	movs	r1, #2
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fc85 	bl	8006faa <USBH_FindInterface>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2bff      	cmp	r3, #255	@ 0xff
 80066a8:	d002      	beq.n	80066b0 <USBH_CDC_InterfaceInit+0x24>
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d901      	bls.n	80066b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066b0:	2302      	movs	r3, #2
 80066b2:	e13d      	b.n	8006930 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fc5a 	bl	8006f72 <USBH_SelectInterface>
 80066be:	4603      	mov	r3, r0
 80066c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80066c8:	2302      	movs	r3, #2
 80066ca:	e131      	b.n	8006930 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80066d2:	2050      	movs	r0, #80	@ 0x50
 80066d4:	f001 fb0a 	bl	8007cec <malloc>
 80066d8:	4603      	mov	r3, r0
 80066da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80066ec:	2302      	movs	r3, #2
 80066ee:	e11f      	b.n	8006930 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80066f0:	2250      	movs	r2, #80	@ 0x50
 80066f2:	2100      	movs	r1, #0
 80066f4:	68b8      	ldr	r0, [r7, #8]
 80066f6:	f001 fbb7 	bl	8007e68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	211a      	movs	r1, #26
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b25b      	sxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	da15      	bge.n	800673e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	211a      	movs	r1, #26
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	4413      	add	r3, r2
 800671e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	211a      	movs	r1, #26
 800672e:	fb01 f303 	mul.w	r3, r1, r3
 8006732:	4413      	add	r3, r2
 8006734:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006738:	881a      	ldrh	r2, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 ffba 	bl	80076be <USBH_AllocPipe>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	7819      	ldrb	r1, [r3, #0]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	7858      	ldrb	r0, [r3, #1]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	8952      	ldrh	r2, [r2, #10]
 800676a:	9202      	str	r2, [sp, #8]
 800676c:	2203      	movs	r2, #3
 800676e:	9201      	str	r2, [sp, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	4623      	mov	r3, r4
 8006774:	4602      	mov	r2, r0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 ff72 	bl	8007660 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fa35 	bl	8007bf4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800678a:	2300      	movs	r3, #0
 800678c:	2200      	movs	r2, #0
 800678e:	210a      	movs	r1, #10
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc0a 	bl	8006faa <USBH_FindInterface>
 8006796:	4603      	mov	r3, r0
 8006798:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2bff      	cmp	r3, #255	@ 0xff
 800679e:	d002      	beq.n	80067a6 <USBH_CDC_InterfaceInit+0x11a>
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d901      	bls.n	80067aa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067a6:	2302      	movs	r3, #2
 80067a8:	e0c2      	b.n	8006930 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	211a      	movs	r1, #26
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da16      	bge.n	80067f0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	211a      	movs	r1, #26
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	211a      	movs	r1, #26
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80067e8:	881a      	ldrh	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	835a      	strh	r2, [r3, #26]
 80067ee:	e015      	b.n	800681c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	211a      	movs	r1, #26
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	211a      	movs	r1, #26
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	4413      	add	r3, r2
 8006812:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	211a      	movs	r1, #26
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b25b      	sxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	da16      	bge.n	8006862 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	211a      	movs	r1, #26
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	211a      	movs	r1, #26
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	4413      	add	r3, r2
 8006856:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800685a:	881a      	ldrh	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	835a      	strh	r2, [r3, #26]
 8006860:	e015      	b.n	800688e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	211a      	movs	r1, #26
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	211a      	movs	r1, #26
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	4413      	add	r3, r2
 8006884:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	7b9b      	ldrb	r3, [r3, #14]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 ff12 	bl	80076be <USBH_AllocPipe>
 800689a:	4603      	mov	r3, r0
 800689c:	461a      	mov	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	7bdb      	ldrb	r3, [r3, #15]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 ff08 	bl	80076be <USBH_AllocPipe>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	7b59      	ldrb	r1, [r3, #13]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	7b98      	ldrb	r0, [r3, #14]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	8b12      	ldrh	r2, [r2, #24]
 80068ce:	9202      	str	r2, [sp, #8]
 80068d0:	2202      	movs	r2, #2
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4623      	mov	r3, r4
 80068d8:	4602      	mov	r2, r0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fec0 	bl	8007660 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	7b19      	ldrb	r1, [r3, #12]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	7bd8      	ldrb	r0, [r3, #15]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	8b52      	ldrh	r2, [r2, #26]
 80068f8:	9202      	str	r2, [sp, #8]
 80068fa:	2202      	movs	r2, #2
 80068fc:	9201      	str	r2, [sp, #4]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4623      	mov	r3, r4
 8006902:	4602      	mov	r2, r0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 feab 	bl	8007660 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	7b5b      	ldrb	r3, [r3, #13]
 8006916:	2200      	movs	r2, #0
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f96a 	bl	8007bf4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	7b1b      	ldrb	r3, [r3, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 f963 	bl	8007bf4 <USBH_LL_SetToggle>

  return USBH_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	bd90      	pop	{r4, r7, pc}

08006938 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00e      	beq.n	8006970 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fea0 	bl	800769e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fecb 	bl	8007700 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	7b1b      	ldrb	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	7b1b      	ldrb	r3, [r3, #12]
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fe8d 	bl	800769e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	7b1b      	ldrb	r3, [r3, #12]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 feb8 	bl	8007700 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	7b5b      	ldrb	r3, [r3, #13]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	7b5b      	ldrb	r3, [r3, #13]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fe7a 	bl	800769e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	7b5b      	ldrb	r3, [r3, #13]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fea5 	bl	8007700 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 f993 	bl	8007cfc <free>
    phost->pActiveClass->pData = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069dc:	2200      	movs	r2, #0
 80069de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3340      	adds	r3, #64	@ 0x40
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8b1 	bl	8006b6a <GetLineCoding>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006a18:	2102      	movs	r1, #2
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d877      	bhi.n	8006b3c <USBH_CDC_Process+0x114>
 8006a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <USBH_CDC_Process+0x2c>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006a69 	.word	0x08006a69
 8006a58:	08006a6f 	.word	0x08006a6f
 8006a5c:	08006a9f 	.word	0x08006a9f
 8006a60:	08006b13 	.word	0x08006b13
 8006a64:	08006b21 	.word	0x08006b21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6c:	e06d      	b.n	8006b4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f897 	bl	8006ba8 <SetLineCoding>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a8c:	e058      	b.n	8006b40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d055      	beq.n	8006b40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2204      	movs	r2, #4
 8006a98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006a9c:	e050      	b.n	8006b40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	3340      	adds	r3, #64	@ 0x40
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f860 	bl	8006b6a <GetLineCoding>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d126      	bne.n	8006b02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ac6:	791b      	ldrb	r3, [r3, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d13b      	bne.n	8006b44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d133      	bne.n	8006b44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d12b      	bne.n	8006b44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d124      	bne.n	8006b44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f958 	bl	8006db0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b00:	e020      	b.n	8006b44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d01d      	beq.n	8006b44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006b10:	e018      	b.n	8006b44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f867 	bl	8006be6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8da 	bl	8006cd2 <CDC_ProcessReception>
      break;
 8006b1e:	e014      	b.n	8006b4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b20:	2100      	movs	r1, #0
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fb27 	bl	8007176 <USBH_ClrFeature>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006b3a:	e005      	b.n	8006b48 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e004      	b.n	8006b4a <USBH_CDC_Process+0x122>
      break;
 8006b40:	bf00      	nop
 8006b42:	e002      	b.n	8006b4a <USBH_CDC_Process+0x122>
      break;
 8006b44:	bf00      	nop
 8006b46:	e000      	b.n	8006b4a <USBH_CDC_Process+0x122>
      break;
 8006b48:	bf00      	nop

  }

  return status;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	22a1      	movs	r2, #161	@ 0xa1
 8006b78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2221      	movs	r2, #33	@ 0x21
 8006b7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2207      	movs	r2, #7
 8006b90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2207      	movs	r2, #7
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb10 	bl	80071be <USBH_CtlReq>
 8006b9e:	4603      	mov	r3, r0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2221      	movs	r2, #33	@ 0x21
 8006bb6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2207      	movs	r2, #7
 8006bce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2207      	movs	r2, #7
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 faf1 	bl	80071be <USBH_CtlReq>
 8006bdc:	4603      	mov	r3, r0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b086      	sub	sp, #24
 8006bea:	af02      	add	r7, sp, #8
 8006bec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d002      	beq.n	8006c0c <CDC_ProcessTransmission+0x26>
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d023      	beq.n	8006c52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c0a:	e05e      	b.n	8006cca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	8b12      	ldrh	r2, [r2, #24]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d90b      	bls.n	8006c30 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	69d9      	ldr	r1, [r3, #28]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8b1a      	ldrh	r2, [r3, #24]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	7b5b      	ldrb	r3, [r3, #13]
 8006c24:	2001      	movs	r0, #1
 8006c26:	9000      	str	r0, [sp, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fcd6 	bl	80075da <USBH_BulkSendData>
 8006c2e:	e00b      	b.n	8006c48 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	7b5b      	ldrb	r3, [r3, #13]
 8006c3e:	2001      	movs	r0, #1
 8006c40:	9000      	str	r0, [sp, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fcc9 	bl	80075da <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006c50:	e03b      	b.n	8006cca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	7b5b      	ldrb	r3, [r3, #13]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 ffa1 	bl	8007ba0 <USBH_LL_GetURBState>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d128      	bne.n	8006cba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	8b12      	ldrh	r2, [r2, #24]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d90e      	bls.n	8006c92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	8b12      	ldrh	r2, [r2, #24]
 8006c7c:	1a9a      	subs	r2, r3, r2
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	8b12      	ldrh	r2, [r2, #24]
 8006c8a:	441a      	add	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	61da      	str	r2, [r3, #28]
 8006c90:	e002      	b.n	8006c98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006ca8:	e00e      	b.n	8006cc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f868 	bl	8006d88 <USBH_CDC_TransmitCallback>
      break;
 8006cb8:	e006      	b.n	8006cc8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d103      	bne.n	8006cc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006cc8:	bf00      	nop
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d002      	beq.n	8006cf8 <CDC_ProcessReception+0x26>
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d00e      	beq.n	8006d14 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006cf6:	e043      	b.n	8006d80 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	6a19      	ldr	r1, [r3, #32]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	8b5a      	ldrh	r2, [r3, #26]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	7b1b      	ldrb	r3, [r3, #12]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fc8d 	bl	8007624 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006d12:	e035      	b.n	8006d80 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	7b1b      	ldrb	r3, [r3, #12]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 ff40 	bl	8007ba0 <USBH_LL_GetURBState>
 8006d20:	4603      	mov	r3, r0
 8006d22:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d24:	7cfb      	ldrb	r3, [r7, #19]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d129      	bne.n	8006d7e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	7b1b      	ldrb	r3, [r3, #12]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fea3 	bl	8007a7c <USBH_LL_GetLastXferSize>
 8006d36:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d016      	beq.n	8006d70 <CDC_ProcessReception+0x9e>
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	8b5b      	ldrh	r3, [r3, #26]
 8006d46:	461a      	mov	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d110      	bne.n	8006d70 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad2      	subs	r2, r2, r3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	6a1a      	ldr	r2, [r3, #32]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	441a      	add	r2, r3
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2203      	movs	r2, #3
 8006d6a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006d6e:	e006      	b.n	8006d7e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f80f 	bl	8006d9c <USBH_CDC_ReceiveCallback>
      break;
 8006d7e:	bf00      	nop
  }
}
 8006d80:	bf00      	nop
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e029      	b.n	8006e30 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	79fa      	ldrb	r2, [r7, #7]
 8006de0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f81f 	bl	8006e38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fdb5 	bl	8007998 <USBH_LL_Init>

  return USBH_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e009      	b.n	8006e5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	33e0      	adds	r3, #224	@ 0xe0
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	2200      	movs	r2, #0
 8006e56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b0f      	cmp	r3, #15
 8006e62:	d9f2      	bls.n	8006e4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e009      	b.n	8006e7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e84:	d3f1      	bcc.n	8006e6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2240      	movs	r2, #64	@ 0x40
 8006eaa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	331c      	adds	r3, #28
 8006ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 ffc3 	bl	8007e68 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eec:	2100      	movs	r1, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 ffba 	bl	8007e68 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006efa:	2212      	movs	r2, #18
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 ffb2 	bl	8007e68 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006f0a:	223e      	movs	r2, #62	@ 0x3e
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 ffaa 	bl	8007e68 <memset>

  return USBH_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10e      	bne.n	8006f5a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	33de      	adds	r3, #222	@ 0xde
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
 8006f58:	e004      	b.n	8006f64 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	73fb      	strb	r3, [r7, #15]
 8006f5e:	e001      	b.n	8006f64 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f60:	2302      	movs	r3, #2
 8006f62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006f88:	78fa      	ldrb	r2, [r7, #3]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d204      	bcs.n	8006f98 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	78fa      	ldrb	r2, [r7, #3]
 8006f92:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006f96:	e001      	b.n	8006f9c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b087      	sub	sp, #28
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4603      	mov	r3, r0
 8006fba:	70fb      	strb	r3, [r7, #3]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70bb      	strb	r3, [r7, #2]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006fd2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fd4:	e025      	b.n	8007022 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	221a      	movs	r2, #26
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	3308      	adds	r3, #8
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	795b      	ldrb	r3, [r3, #5]
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d002      	beq.n	8006ff8 <USBH_FindInterface+0x4e>
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	2bff      	cmp	r3, #255	@ 0xff
 8006ff6:	d111      	bne.n	800701c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ffc:	78ba      	ldrb	r2, [r7, #2]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d002      	beq.n	8007008 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007002:	78bb      	ldrb	r3, [r7, #2]
 8007004:	2bff      	cmp	r3, #255	@ 0xff
 8007006:	d109      	bne.n	800701c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800700c:	787a      	ldrb	r2, [r7, #1]
 800700e:	429a      	cmp	r2, r3
 8007010:	d002      	beq.n	8007018 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007012:	787b      	ldrb	r3, [r7, #1]
 8007014:	2bff      	cmp	r3, #255	@ 0xff
 8007016:	d101      	bne.n	800701c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	e006      	b.n	800702a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	3301      	adds	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d9d6      	bls.n	8006fd6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007028:	23ff      	movs	r3, #255	@ 0xff
}
 800702a:	4618      	mov	r0, r3
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fce6 	bl	8007a10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007044:	2101      	movs	r1, #1
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fdbd 	bl	8007bc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f804 	bl	8007098 <USBH_HandleSof>
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b0b      	cmp	r3, #11
 80070a8:	d10a      	bne.n	80070c0 <USBH_HandleSof+0x28>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
  }
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80070d8:	bf00      	nop
}
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80070f4:	bf00      	nop
}
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fc79 	bl	8007a46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	791b      	ldrb	r3, [r3, #4]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fad0 	bl	8007700 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	795b      	ldrb	r3, [r3, #5]
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 faca 	bl	8007700 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	789b      	ldrb	r3, [r3, #2]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10f      	bne.n	80071aa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	b29a      	uxth	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071aa:	2200      	movs	r2, #0
 80071ac:	2100      	movs	r1, #0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f805 	bl	80071be <USBH_CtlReq>
 80071b4:	4603      	mov	r3, r0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	789b      	ldrb	r3, [r3, #2]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d002      	beq.n	80071de <USBH_CtlReq+0x20>
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d00f      	beq.n	80071fc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80071dc:	e027      	b.n	800722e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2202      	movs	r2, #2
 80071f4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80071f6:	2301      	movs	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
      break;
 80071fa:	e018      	b.n	800722e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f81b 	bl	8007238 <USBH_HandleControl>
 8007202:	4603      	mov	r3, r0
 8007204:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007206:	7dfb      	ldrb	r3, [r7, #23]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <USBH_CtlReq+0x54>
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d106      	bne.n	8007220 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	761a      	strb	r2, [r3, #24]
      break;
 800721e:	e005      	b.n	800722c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d102      	bne.n	800722c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	709a      	strb	r2, [r3, #2]
      break;
 800722c:	bf00      	nop
  }
  return status;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af02      	add	r7, sp, #8
 800723e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007244:	2300      	movs	r3, #0
 8007246:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7e1b      	ldrb	r3, [r3, #24]
 800724c:	3b01      	subs	r3, #1
 800724e:	2b0a      	cmp	r3, #10
 8007250:	f200 8156 	bhi.w	8007500 <USBH_HandleControl+0x2c8>
 8007254:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <USBH_HandleControl+0x24>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	08007289 	.word	0x08007289
 8007260:	080072a3 	.word	0x080072a3
 8007264:	0800730d 	.word	0x0800730d
 8007268:	08007333 	.word	0x08007333
 800726c:	0800736b 	.word	0x0800736b
 8007270:	08007395 	.word	0x08007395
 8007274:	080073e7 	.word	0x080073e7
 8007278:	08007409 	.word	0x08007409
 800727c:	08007445 	.word	0x08007445
 8007280:	0800746b 	.word	0x0800746b
 8007284:	080074a9 	.word	0x080074a9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f103 0110 	add.w	r1, r3, #16
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	795b      	ldrb	r3, [r3, #5]
 8007292:	461a      	mov	r2, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f943 	bl	8007520 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	761a      	strb	r2, [r3, #24]
      break;
 80072a0:	e139      	b.n	8007516 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	795b      	ldrb	r3, [r3, #5]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc79 	bl	8007ba0 <USBH_LL_GetURBState>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d11e      	bne.n	80072f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7c1b      	ldrb	r3, [r3, #16]
 80072bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80072c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8adb      	ldrh	r3, [r3, #22]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80072ca:	7b7b      	ldrb	r3, [r7, #13]
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d103      	bne.n	80072d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2203      	movs	r2, #3
 80072d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072d6:	e115      	b.n	8007504 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2205      	movs	r2, #5
 80072dc:	761a      	strb	r2, [r3, #24]
      break;
 80072de:	e111      	b.n	8007504 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80072e0:	7b7b      	ldrb	r3, [r7, #13]
 80072e2:	2b80      	cmp	r3, #128	@ 0x80
 80072e4:	d103      	bne.n	80072ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2209      	movs	r2, #9
 80072ea:	761a      	strb	r2, [r3, #24]
      break;
 80072ec:	e10a      	b.n	8007504 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2207      	movs	r2, #7
 80072f2:	761a      	strb	r2, [r3, #24]
      break;
 80072f4:	e106      	b.n	8007504 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d003      	beq.n	8007304 <USBH_HandleControl+0xcc>
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	f040 8100 	bne.w	8007504 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	220b      	movs	r2, #11
 8007308:	761a      	strb	r2, [r3, #24]
      break;
 800730a:	e0fb      	b.n	8007504 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007312:	b29a      	uxth	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6899      	ldr	r1, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	899a      	ldrh	r2, [r3, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	791b      	ldrb	r3, [r3, #4]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f93a 	bl	800759e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2204      	movs	r2, #4
 800732e:	761a      	strb	r2, [r3, #24]
      break;
 8007330:	e0f1      	b.n	8007516 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	791b      	ldrb	r3, [r3, #4]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fc31 	bl	8007ba0 <USBH_LL_GetURBState>
 800733e:	4603      	mov	r3, r0
 8007340:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d102      	bne.n	800734e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2209      	movs	r2, #9
 800734c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b05      	cmp	r3, #5
 8007352:	d102      	bne.n	800735a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007358:	e0d6      	b.n	8007508 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b04      	cmp	r3, #4
 800735e:	f040 80d3 	bne.w	8007508 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	220b      	movs	r2, #11
 8007366:	761a      	strb	r2, [r3, #24]
      break;
 8007368:	e0ce      	b.n	8007508 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6899      	ldr	r1, [r3, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	899a      	ldrh	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	795b      	ldrb	r3, [r3, #5]
 8007376:	2001      	movs	r0, #1
 8007378:	9000      	str	r0, [sp, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f8ea 	bl	8007554 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007386:	b29a      	uxth	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2206      	movs	r2, #6
 8007390:	761a      	strb	r2, [r3, #24]
      break;
 8007392:	e0c0      	b.n	8007516 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	795b      	ldrb	r3, [r3, #5]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fc00 	bl	8007ba0 <USBH_LL_GetURBState>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d103      	bne.n	80073b2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2207      	movs	r2, #7
 80073ae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073b0:	e0ac      	b.n	800750c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d105      	bne.n	80073c4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	220c      	movs	r2, #12
 80073bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80073be:	2303      	movs	r3, #3
 80073c0:	73fb      	strb	r3, [r7, #15]
      break;
 80073c2:	e0a3      	b.n	800750c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d103      	bne.n	80073d2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2205      	movs	r2, #5
 80073ce:	761a      	strb	r2, [r3, #24]
      break;
 80073d0:	e09c      	b.n	800750c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	f040 8099 	bne.w	800750c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	220b      	movs	r2, #11
 80073de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80073e0:	2302      	movs	r3, #2
 80073e2:	73fb      	strb	r3, [r7, #15]
      break;
 80073e4:	e092      	b.n	800750c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	791b      	ldrb	r3, [r3, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	2100      	movs	r1, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f8d5 	bl	800759e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2208      	movs	r2, #8
 8007404:	761a      	strb	r2, [r3, #24]

      break;
 8007406:	e086      	b.n	8007516 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fbc6 	bl	8007ba0 <USBH_LL_GetURBState>
 8007414:	4603      	mov	r3, r0
 8007416:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d105      	bne.n	800742a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	220d      	movs	r2, #13
 8007422:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007428:	e072      	b.n	8007510 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b04      	cmp	r3, #4
 800742e:	d103      	bne.n	8007438 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	220b      	movs	r2, #11
 8007434:	761a      	strb	r2, [r3, #24]
      break;
 8007436:	e06b      	b.n	8007510 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b05      	cmp	r3, #5
 800743c:	d168      	bne.n	8007510 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800743e:	2303      	movs	r3, #3
 8007440:	73fb      	strb	r3, [r7, #15]
      break;
 8007442:	e065      	b.n	8007510 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	795b      	ldrb	r3, [r3, #5]
 8007448:	2201      	movs	r2, #1
 800744a:	9200      	str	r2, [sp, #0]
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f87f 	bl	8007554 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	220a      	movs	r2, #10
 8007466:	761a      	strb	r2, [r3, #24]
      break;
 8007468:	e055      	b.n	8007516 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	795b      	ldrb	r3, [r3, #5]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb95 	bl	8007ba0 <USBH_LL_GetURBState>
 8007476:	4603      	mov	r3, r0
 8007478:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d105      	bne.n	800748c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	220d      	movs	r2, #13
 8007488:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800748a:	e043      	b.n	8007514 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d103      	bne.n	800749a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2209      	movs	r2, #9
 8007496:	761a      	strb	r2, [r3, #24]
      break;
 8007498:	e03c      	b.n	8007514 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d139      	bne.n	8007514 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	220b      	movs	r2, #11
 80074a4:	761a      	strb	r2, [r3, #24]
      break;
 80074a6:	e035      	b.n	8007514 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7e5b      	ldrb	r3, [r3, #25]
 80074ac:	3301      	adds	r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	765a      	strb	r2, [r3, #25]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7e5b      	ldrb	r3, [r3, #25]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d806      	bhi.n	80074ca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80074c8:	e025      	b.n	8007516 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074d0:	2106      	movs	r1, #6
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	795b      	ldrb	r3, [r3, #5]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f90c 	bl	8007700 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f906 	bl	8007700 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80074fa:	2302      	movs	r3, #2
 80074fc:	73fb      	strb	r3, [r7, #15]
      break;
 80074fe:	e00a      	b.n	8007516 <USBH_HandleControl+0x2de>

    default:
      break;
 8007500:	bf00      	nop
 8007502:	e008      	b.n	8007516 <USBH_HandleControl+0x2de>
      break;
 8007504:	bf00      	nop
 8007506:	e006      	b.n	8007516 <USBH_HandleControl+0x2de>
      break;
 8007508:	bf00      	nop
 800750a:	e004      	b.n	8007516 <USBH_HandleControl+0x2de>
      break;
 800750c:	bf00      	nop
 800750e:	e002      	b.n	8007516 <USBH_HandleControl+0x2de>
      break;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <USBH_HandleControl+0x2de>
      break;
 8007514:	bf00      	nop
  }

  return status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af04      	add	r7, sp, #16
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4613      	mov	r3, r2
 800752c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800752e:	79f9      	ldrb	r1, [r7, #7]
 8007530:	2300      	movs	r3, #0
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	2308      	movs	r3, #8
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	2200      	movs	r2, #0
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fafa 	bl	8007b3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af04      	add	r7, sp, #16
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	460b      	mov	r3, r1
 8007564:	80fb      	strh	r3, [r7, #6]
 8007566:	4613      	mov	r3, r2
 8007568:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007578:	7979      	ldrb	r1, [r7, #5]
 800757a:	7e3b      	ldrb	r3, [r7, #24]
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	2301      	movs	r3, #1
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	2200      	movs	r2, #0
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fad5 	bl	8007b3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b088      	sub	sp, #32
 80075a2:	af04      	add	r7, sp, #16
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	4611      	mov	r1, r2
 80075aa:	461a      	mov	r2, r3
 80075ac:	460b      	mov	r3, r1
 80075ae:	80fb      	strh	r3, [r7, #6]
 80075b0:	4613      	mov	r3, r2
 80075b2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80075b4:	7979      	ldrb	r1, [r7, #5]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	9302      	str	r3, [sp, #8]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	2301      	movs	r3, #1
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2300      	movs	r3, #0
 80075c8:	2201      	movs	r2, #1
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fab7 	bl	8007b3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80075d0:	2300      	movs	r3, #0

}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b088      	sub	sp, #32
 80075de:	af04      	add	r7, sp, #16
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	4611      	mov	r1, r2
 80075e6:	461a      	mov	r2, r3
 80075e8:	460b      	mov	r3, r1
 80075ea:	80fb      	strh	r3, [r7, #6]
 80075ec:	4613      	mov	r3, r2
 80075ee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80075fe:	7979      	ldrb	r1, [r7, #5]
 8007600:	7e3b      	ldrb	r3, [r7, #24]
 8007602:	9303      	str	r3, [sp, #12]
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	9302      	str	r3, [sp, #8]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	2301      	movs	r3, #1
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	2302      	movs	r3, #2
 8007612:	2200      	movs	r2, #0
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fa92 	bl	8007b3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af04      	add	r7, sp, #16
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4611      	mov	r1, r2
 8007630:	461a      	mov	r2, r3
 8007632:	460b      	mov	r3, r1
 8007634:	80fb      	strh	r3, [r7, #6]
 8007636:	4613      	mov	r3, r2
 8007638:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800763a:	7979      	ldrb	r1, [r7, #5]
 800763c:	2300      	movs	r3, #0
 800763e:	9303      	str	r3, [sp, #12]
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	2301      	movs	r3, #1
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	2302      	movs	r3, #2
 800764e:	2201      	movs	r2, #1
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fa74 	bl	8007b3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af04      	add	r7, sp, #16
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	4608      	mov	r0, r1
 800766a:	4611      	mov	r1, r2
 800766c:	461a      	mov	r2, r3
 800766e:	4603      	mov	r3, r0
 8007670:	70fb      	strb	r3, [r7, #3]
 8007672:	460b      	mov	r3, r1
 8007674:	70bb      	strb	r3, [r7, #2]
 8007676:	4613      	mov	r3, r2
 8007678:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800767a:	7878      	ldrb	r0, [r7, #1]
 800767c:	78ba      	ldrb	r2, [r7, #2]
 800767e:	78f9      	ldrb	r1, [r7, #3]
 8007680:	8b3b      	ldrh	r3, [r7, #24]
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	7d3b      	ldrb	r3, [r7, #20]
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	7c3b      	ldrb	r3, [r7, #16]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	4603      	mov	r3, r0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa07 	bl	8007aa2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa26 	bl	8007b00 <USBH_LL_ClosePipe>

  return USBH_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f836 	bl	800773c <USBH_GetFreePipe>
 80076d0:	4603      	mov	r3, r0
 80076d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80076d4:	89fb      	ldrh	r3, [r7, #14]
 80076d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00a      	beq.n	80076f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	33e0      	adds	r3, #224	@ 0xe0
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80076f4:	89fb      	ldrh	r3, [r7, #14]
 80076f6:	b2db      	uxtb	r3, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	2b0f      	cmp	r3, #15
 8007710:	d80d      	bhi.n	800772e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	33e0      	adds	r3, #224	@ 0xe0
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	33e0      	adds	r3, #224	@ 0xe0
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e00f      	b.n	800776e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	33e0      	adds	r3, #224	@ 0xe0
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	b29b      	uxth	r3, r3
 8007766:	e007      	b.n	8007778 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	3301      	adds	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b0f      	cmp	r3, #15
 8007772:	d9ec      	bls.n	800774e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007788:	2201      	movs	r2, #1
 800778a:	490e      	ldr	r1, [pc, #56]	@ (80077c4 <MX_USB_HOST_Init+0x40>)
 800778c:	480e      	ldr	r0, [pc, #56]	@ (80077c8 <MX_USB_HOST_Init+0x44>)
 800778e:	f7ff fb19 	bl	8006dc4 <USBH_Init>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007798:	f7f9 f948 	bl	8000a2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800779c:	490b      	ldr	r1, [pc, #44]	@ (80077cc <MX_USB_HOST_Init+0x48>)
 800779e:	480a      	ldr	r0, [pc, #40]	@ (80077c8 <MX_USB_HOST_Init+0x44>)
 80077a0:	f7ff fbbd 	bl	8006f1e <USBH_RegisterClass>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80077aa:	f7f9 f93f 	bl	8000a2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80077ae:	4806      	ldr	r0, [pc, #24]	@ (80077c8 <MX_USB_HOST_Init+0x44>)
 80077b0:	f7ff fc41 	bl	8007036 <USBH_Start>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80077ba:	f7f9 f937 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80077be:	bf00      	nop
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	080077d1 	.word	0x080077d1
 80077c8:	20000198 	.word	0x20000198
 80077cc:	2000000c 	.word	0x2000000c

080077d0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	3b01      	subs	r3, #1
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d819      	bhi.n	8007818 <USBH_UserProcess+0x48>
 80077e4:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <USBH_UserProcess+0x1c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007819 	.word	0x08007819
 80077f0:	08007809 	.word	0x08007809
 80077f4:	08007819 	.word	0x08007819
 80077f8:	08007811 	.word	0x08007811
 80077fc:	08007801 	.word	0x08007801
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007800:	4b09      	ldr	r3, [pc, #36]	@ (8007828 <USBH_UserProcess+0x58>)
 8007802:	2203      	movs	r2, #3
 8007804:	701a      	strb	r2, [r3, #0]
  break;
 8007806:	e008      	b.n	800781a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007808:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <USBH_UserProcess+0x58>)
 800780a:	2202      	movs	r2, #2
 800780c:	701a      	strb	r2, [r3, #0]
  break;
 800780e:	e004      	b.n	800781a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <USBH_UserProcess+0x58>)
 8007812:	2201      	movs	r2, #1
 8007814:	701a      	strb	r2, [r3, #0]
  break;
 8007816:	e000      	b.n	800781a <USBH_UserProcess+0x4a>

  default:
  break;
 8007818:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	20000570 	.word	0x20000570

0800782c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007834:	f107 0314 	add.w	r3, r7, #20
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	60da      	str	r2, [r3, #12]
 8007842:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800784c:	d147      	bne.n	80078de <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800784e:	2300      	movs	r3, #0
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	4b25      	ldr	r3, [pc, #148]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007856:	4a24      	ldr	r2, [pc, #144]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	6313      	str	r3, [r2, #48]	@ 0x30
 800785e:	4b22      	ldr	r3, [pc, #136]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800786a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800786e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007874:	2300      	movs	r3, #0
 8007876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	4619      	mov	r1, r3
 800787e:	481b      	ldr	r0, [pc, #108]	@ (80078ec <HAL_HCD_MspInit+0xc0>)
 8007880:	f7f9 fc4e 	bl	8001120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007884:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800788a:	2302      	movs	r3, #2
 800788c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007892:	2300      	movs	r3, #0
 8007894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007896:	230a      	movs	r3, #10
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800789a:	f107 0314 	add.w	r3, r7, #20
 800789e:	4619      	mov	r1, r3
 80078a0:	4812      	ldr	r0, [pc, #72]	@ (80078ec <HAL_HCD_MspInit+0xc0>)
 80078a2:	f7f9 fc3d 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078a6:	4b10      	ldr	r3, [pc, #64]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 80078a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078aa:	4a0f      	ldr	r2, [pc, #60]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 80078ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	4b0c      	ldr	r3, [pc, #48]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 80078b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ba:	4a0b      	ldr	r2, [pc, #44]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 80078bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80078c2:	4b09      	ldr	r3, [pc, #36]	@ (80078e8 <HAL_HCD_MspInit+0xbc>)
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078ce:	2200      	movs	r2, #0
 80078d0:	2100      	movs	r1, #0
 80078d2:	2043      	movs	r0, #67	@ 0x43
 80078d4:	f7f9 fbed 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078d8:	2043      	movs	r0, #67	@ 0x43
 80078da:	f7f9 fc06 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078de:	bf00      	nop
 80078e0:	3728      	adds	r7, #40	@ 0x28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40023800 	.word	0x40023800
 80078ec:	40020000 	.word	0x40020000

080078f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fbb8 	bl	8007074 <USBH_LL_IncTimer>
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fbf0 	bl	8007100 <USBH_LL_Connect>
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff fbf9 	bl	800712e <USBH_LL_Disconnect>
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
 8007950:	4613      	mov	r3, r2
 8007952:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fbaa 	bl	80070c8 <USBH_LL_PortEnabled>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fbaa 	bl	80070e4 <USBH_LL_PortDisabled>
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d12a      	bne.n	8007a00 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80079aa:	4a18      	ldr	r2, [pc, #96]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a15      	ldr	r2, [pc, #84]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079b6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079ba:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80079c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80079c2:	4b12      	ldr	r3, [pc, #72]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079c4:	2208      	movs	r2, #8
 80079c6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80079c8:	4b10      	ldr	r3, [pc, #64]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079ce:	4b0f      	ldr	r3, [pc, #60]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80079d4:	4b0d      	ldr	r3, [pc, #52]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079d6:	2202      	movs	r2, #2
 80079d8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079da:	4b0c      	ldr	r3, [pc, #48]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079dc:	2200      	movs	r2, #0
 80079de:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80079e0:	480a      	ldr	r0, [pc, #40]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079e2:	f7f9 fd52 	bl	800148a <HAL_HCD_Init>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80079ec:	f7f9 f81e 	bl	8000a2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079f0:	4806      	ldr	r0, [pc, #24]	@ (8007a0c <USBH_LL_Init+0x74>)
 80079f2:	f7fa f9a5 	bl	8001d40 <HAL_HCD_GetCurrentFrame>
 80079f6:	4603      	mov	r3, r0
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fb2b 	bl	8007056 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000574 	.word	0x20000574

08007a10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fa f920 	bl	8001c6c <HAL_HCD_Start>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 f912 	bl	8007c5c <USBH_Get_USB_Status>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fa f928 	bl	8001cb2 <HAL_HCD_Stop>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f8f7 	bl	8007c5c <USBH_Get_USB_Status>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fa f93f 	bl	8001d16 <HAL_HCD_HC_GetXferCount>
 8007a98:	4603      	mov	r3, r0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007aa2:	b590      	push	{r4, r7, lr}
 8007aa4:	b089      	sub	sp, #36	@ 0x24
 8007aa6:	af04      	add	r7, sp, #16
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	4608      	mov	r0, r1
 8007aac:	4611      	mov	r1, r2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	70fb      	strb	r3, [r7, #3]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70bb      	strb	r3, [r7, #2]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007aca:	787c      	ldrb	r4, [r7, #1]
 8007acc:	78ba      	ldrb	r2, [r7, #2]
 8007ace:	78f9      	ldrb	r1, [r7, #3]
 8007ad0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ad2:	9302      	str	r3, [sp, #8]
 8007ad4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	f7f9 fd39 	bl	8001558 <HAL_HCD_HC_Init>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f8b5 	bl	8007c5c <USBH_Get_USB_Status>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd90      	pop	{r4, r7, pc}

08007b00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7f9 fdd2 	bl	80016c8 <HAL_HCD_HC_Halt>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f896 	bl	8007c5c <USBH_Get_USB_Status>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007b3e:	b590      	push	{r4, r7, lr}
 8007b40:	b089      	sub	sp, #36	@ 0x24
 8007b42:	af04      	add	r7, sp, #16
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	4608      	mov	r0, r1
 8007b48:	4611      	mov	r1, r2
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	70fb      	strb	r3, [r7, #3]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70bb      	strb	r3, [r7, #2]
 8007b54:	4613      	mov	r3, r2
 8007b56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007b66:	787c      	ldrb	r4, [r7, #1]
 8007b68:	78ba      	ldrb	r2, [r7, #2]
 8007b6a:	78f9      	ldrb	r1, [r7, #3]
 8007b6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b70:	9303      	str	r3, [sp, #12]
 8007b72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b74:	9302      	str	r3, [sp, #8]
 8007b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4623      	mov	r3, r4
 8007b82:	f7f9 fdc5 	bl	8001710 <HAL_HCD_HC_SubmitRequest>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f865 	bl	8007c5c <USBH_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd90      	pop	{r4, r7, pc}

08007ba0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007bb2:	78fa      	ldrb	r2, [r7, #3]
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fa f898 	bl	8001cec <HAL_HCD_HC_GetURBState>
 8007bbc:	4603      	mov	r3, r0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d103      	bne.n	8007be4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f868 	bl	8007cb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007be4:	20c8      	movs	r0, #200	@ 0xc8
 8007be6:	f7f9 f965 	bl	8000eb4 <HAL_Delay>
  return USBH_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
 8007c00:	4613      	mov	r3, r2
 8007c02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007c0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	4613      	mov	r3, r2
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	3317      	adds	r3, #23
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	68f9      	ldr	r1, [r7, #12]
 8007c26:	4613      	mov	r3, r2
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	333c      	adds	r3, #60	@ 0x3c
 8007c32:	78ba      	ldrb	r2, [r7, #2]
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e009      	b.n	8007c4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007c38:	78fa      	ldrb	r2, [r7, #3]
 8007c3a:	68f9      	ldr	r1, [r7, #12]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	333d      	adds	r3, #61	@ 0x3d
 8007c48:	78ba      	ldrb	r2, [r7, #2]
 8007c4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
	...

08007c5c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d817      	bhi.n	8007ca0 <USBH_Get_USB_Status+0x44>
 8007c70:	a201      	add	r2, pc, #4	@ (adr r2, 8007c78 <USBH_Get_USB_Status+0x1c>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007c89 	.word	0x08007c89
 8007c7c:	08007c8f 	.word	0x08007c8f
 8007c80:	08007c95 	.word	0x08007c95
 8007c84:	08007c9b 	.word	0x08007c9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c8c:	e00b      	b.n	8007ca6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	73fb      	strb	r3, [r7, #15]
    break;
 8007c92:	e008      	b.n	8007ca6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c94:	2301      	movs	r3, #1
 8007c96:	73fb      	strb	r3, [r7, #15]
    break;
 8007c98:	e005      	b.n	8007ca6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c9e:	e002      	b.n	8007ca6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca4:	bf00      	nop
  }
  return usb_status;
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
 8007ccc:	e001      	b.n	8007cd2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4803      	ldr	r0, [pc, #12]	@ (8007ce8 <MX_DriverVbusFS+0x34>)
 8007cda:	f7f9 fbbd 	bl	8001458 <HAL_GPIO_WritePin>
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40020800 	.word	0x40020800

08007cec <malloc>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	@ (8007cf8 <malloc+0xc>)
 8007cee:	4601      	mov	r1, r0
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	f000 b82d 	b.w	8007d50 <_malloc_r>
 8007cf6:	bf00      	nop
 8007cf8:	2000002c 	.word	0x2000002c

08007cfc <free>:
 8007cfc:	4b02      	ldr	r3, [pc, #8]	@ (8007d08 <free+0xc>)
 8007cfe:	4601      	mov	r1, r0
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f000 b8f5 	b.w	8007ef0 <_free_r>
 8007d06:	bf00      	nop
 8007d08:	2000002c 	.word	0x2000002c

08007d0c <sbrk_aligned>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d4c <sbrk_aligned+0x40>)
 8007d10:	460c      	mov	r4, r1
 8007d12:	6831      	ldr	r1, [r6, #0]
 8007d14:	4605      	mov	r5, r0
 8007d16:	b911      	cbnz	r1, 8007d1e <sbrk_aligned+0x12>
 8007d18:	f000 f8ae 	bl	8007e78 <_sbrk_r>
 8007d1c:	6030      	str	r0, [r6, #0]
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 f8a9 	bl	8007e78 <_sbrk_r>
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	d103      	bne.n	8007d32 <sbrk_aligned+0x26>
 8007d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d2e:	4620      	mov	r0, r4
 8007d30:	bd70      	pop	{r4, r5, r6, pc}
 8007d32:	1cc4      	adds	r4, r0, #3
 8007d34:	f024 0403 	bic.w	r4, r4, #3
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d0f8      	beq.n	8007d2e <sbrk_aligned+0x22>
 8007d3c:	1a21      	subs	r1, r4, r0
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f000 f89a 	bl	8007e78 <_sbrk_r>
 8007d44:	3001      	adds	r0, #1
 8007d46:	d1f2      	bne.n	8007d2e <sbrk_aligned+0x22>
 8007d48:	e7ef      	b.n	8007d2a <sbrk_aligned+0x1e>
 8007d4a:	bf00      	nop
 8007d4c:	20000954 	.word	0x20000954

08007d50 <_malloc_r>:
 8007d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d54:	1ccd      	adds	r5, r1, #3
 8007d56:	f025 0503 	bic.w	r5, r5, #3
 8007d5a:	3508      	adds	r5, #8
 8007d5c:	2d0c      	cmp	r5, #12
 8007d5e:	bf38      	it	cc
 8007d60:	250c      	movcc	r5, #12
 8007d62:	2d00      	cmp	r5, #0
 8007d64:	4606      	mov	r6, r0
 8007d66:	db01      	blt.n	8007d6c <_malloc_r+0x1c>
 8007d68:	42a9      	cmp	r1, r5
 8007d6a:	d904      	bls.n	8007d76 <_malloc_r+0x26>
 8007d6c:	230c      	movs	r3, #12
 8007d6e:	6033      	str	r3, [r6, #0]
 8007d70:	2000      	movs	r0, #0
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e4c <_malloc_r+0xfc>
 8007d7a:	f000 f869 	bl	8007e50 <__malloc_lock>
 8007d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d82:	461c      	mov	r4, r3
 8007d84:	bb44      	cbnz	r4, 8007dd8 <_malloc_r+0x88>
 8007d86:	4629      	mov	r1, r5
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff ffbf 	bl	8007d0c <sbrk_aligned>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	4604      	mov	r4, r0
 8007d92:	d158      	bne.n	8007e46 <_malloc_r+0xf6>
 8007d94:	f8d8 4000 	ldr.w	r4, [r8]
 8007d98:	4627      	mov	r7, r4
 8007d9a:	2f00      	cmp	r7, #0
 8007d9c:	d143      	bne.n	8007e26 <_malloc_r+0xd6>
 8007d9e:	2c00      	cmp	r4, #0
 8007da0:	d04b      	beq.n	8007e3a <_malloc_r+0xea>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	4639      	mov	r1, r7
 8007da6:	4630      	mov	r0, r6
 8007da8:	eb04 0903 	add.w	r9, r4, r3
 8007dac:	f000 f864 	bl	8007e78 <_sbrk_r>
 8007db0:	4581      	cmp	r9, r0
 8007db2:	d142      	bne.n	8007e3a <_malloc_r+0xea>
 8007db4:	6821      	ldr	r1, [r4, #0]
 8007db6:	1a6d      	subs	r5, r5, r1
 8007db8:	4629      	mov	r1, r5
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff ffa6 	bl	8007d0c <sbrk_aligned>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d03a      	beq.n	8007e3a <_malloc_r+0xea>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	442b      	add	r3, r5
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	f8d8 3000 	ldr.w	r3, [r8]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	bb62      	cbnz	r2, 8007e2c <_malloc_r+0xdc>
 8007dd2:	f8c8 7000 	str.w	r7, [r8]
 8007dd6:	e00f      	b.n	8007df8 <_malloc_r+0xa8>
 8007dd8:	6822      	ldr	r2, [r4, #0]
 8007dda:	1b52      	subs	r2, r2, r5
 8007ddc:	d420      	bmi.n	8007e20 <_malloc_r+0xd0>
 8007dde:	2a0b      	cmp	r2, #11
 8007de0:	d917      	bls.n	8007e12 <_malloc_r+0xc2>
 8007de2:	1961      	adds	r1, r4, r5
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	6025      	str	r5, [r4, #0]
 8007de8:	bf18      	it	ne
 8007dea:	6059      	strne	r1, [r3, #4]
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	bf08      	it	eq
 8007df0:	f8c8 1000 	streq.w	r1, [r8]
 8007df4:	5162      	str	r2, [r4, r5]
 8007df6:	604b      	str	r3, [r1, #4]
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f000 f82f 	bl	8007e5c <__malloc_unlock>
 8007dfe:	f104 000b 	add.w	r0, r4, #11
 8007e02:	1d23      	adds	r3, r4, #4
 8007e04:	f020 0007 	bic.w	r0, r0, #7
 8007e08:	1ac2      	subs	r2, r0, r3
 8007e0a:	bf1c      	itt	ne
 8007e0c:	1a1b      	subne	r3, r3, r0
 8007e0e:	50a3      	strne	r3, [r4, r2]
 8007e10:	e7af      	b.n	8007d72 <_malloc_r+0x22>
 8007e12:	6862      	ldr	r2, [r4, #4]
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	bf0c      	ite	eq
 8007e18:	f8c8 2000 	streq.w	r2, [r8]
 8007e1c:	605a      	strne	r2, [r3, #4]
 8007e1e:	e7eb      	b.n	8007df8 <_malloc_r+0xa8>
 8007e20:	4623      	mov	r3, r4
 8007e22:	6864      	ldr	r4, [r4, #4]
 8007e24:	e7ae      	b.n	8007d84 <_malloc_r+0x34>
 8007e26:	463c      	mov	r4, r7
 8007e28:	687f      	ldr	r7, [r7, #4]
 8007e2a:	e7b6      	b.n	8007d9a <_malloc_r+0x4a>
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d1fb      	bne.n	8007e2c <_malloc_r+0xdc>
 8007e34:	2300      	movs	r3, #0
 8007e36:	6053      	str	r3, [r2, #4]
 8007e38:	e7de      	b.n	8007df8 <_malloc_r+0xa8>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	6033      	str	r3, [r6, #0]
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f80c 	bl	8007e5c <__malloc_unlock>
 8007e44:	e794      	b.n	8007d70 <_malloc_r+0x20>
 8007e46:	6005      	str	r5, [r0, #0]
 8007e48:	e7d6      	b.n	8007df8 <_malloc_r+0xa8>
 8007e4a:	bf00      	nop
 8007e4c:	20000958 	.word	0x20000958

08007e50 <__malloc_lock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	@ (8007e58 <__malloc_lock+0x8>)
 8007e52:	f000 b84b 	b.w	8007eec <__retarget_lock_acquire_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000a98 	.word	0x20000a98

08007e5c <__malloc_unlock>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	@ (8007e64 <__malloc_unlock+0x8>)
 8007e5e:	f000 b846 	b.w	8007eee <__retarget_lock_release_recursive>
 8007e62:	bf00      	nop
 8007e64:	20000a98 	.word	0x20000a98

08007e68 <memset>:
 8007e68:	4402      	add	r2, r0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d100      	bne.n	8007e72 <memset+0xa>
 8007e70:	4770      	bx	lr
 8007e72:	f803 1b01 	strb.w	r1, [r3], #1
 8007e76:	e7f9      	b.n	8007e6c <memset+0x4>

08007e78 <_sbrk_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d06      	ldr	r5, [pc, #24]	@ (8007e94 <_sbrk_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	602b      	str	r3, [r5, #0]
 8007e84:	f7f8 ff32 	bl	8000cec <_sbrk>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_sbrk_r+0x1a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_sbrk_r+0x1a>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20000a94 	.word	0x20000a94

08007e98 <__errno>:
 8007e98:	4b01      	ldr	r3, [pc, #4]	@ (8007ea0 <__errno+0x8>)
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	2000002c 	.word	0x2000002c

08007ea4 <__libc_init_array>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8007edc <__libc_init_array+0x38>)
 8007ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ee0 <__libc_init_array+0x3c>)
 8007eaa:	1b64      	subs	r4, r4, r5
 8007eac:	10a4      	asrs	r4, r4, #2
 8007eae:	2600      	movs	r6, #0
 8007eb0:	42a6      	cmp	r6, r4
 8007eb2:	d109      	bne.n	8007ec8 <__libc_init_array+0x24>
 8007eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ee4 <__libc_init_array+0x40>)
 8007eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ee8 <__libc_init_array+0x44>)
 8007eb8:	f000 f864 	bl	8007f84 <_init>
 8007ebc:	1b64      	subs	r4, r4, r5
 8007ebe:	10a4      	asrs	r4, r4, #2
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	42a6      	cmp	r6, r4
 8007ec4:	d105      	bne.n	8007ed2 <__libc_init_array+0x2e>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ecc:	4798      	blx	r3
 8007ece:	3601      	adds	r6, #1
 8007ed0:	e7ee      	b.n	8007eb0 <__libc_init_array+0xc>
 8007ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed6:	4798      	blx	r3
 8007ed8:	3601      	adds	r6, #1
 8007eda:	e7f2      	b.n	8007ec2 <__libc_init_array+0x1e>
 8007edc:	08007fc0 	.word	0x08007fc0
 8007ee0:	08007fc0 	.word	0x08007fc0
 8007ee4:	08007fc0 	.word	0x08007fc0
 8007ee8:	08007fc4 	.word	0x08007fc4

08007eec <__retarget_lock_acquire_recursive>:
 8007eec:	4770      	bx	lr

08007eee <__retarget_lock_release_recursive>:
 8007eee:	4770      	bx	lr

08007ef0 <_free_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d041      	beq.n	8007f7c <_free_r+0x8c>
 8007ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007efc:	1f0c      	subs	r4, r1, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	bfb8      	it	lt
 8007f02:	18e4      	addlt	r4, r4, r3
 8007f04:	f7ff ffa4 	bl	8007e50 <__malloc_lock>
 8007f08:	4a1d      	ldr	r2, [pc, #116]	@ (8007f80 <_free_r+0x90>)
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	b933      	cbnz	r3, 8007f1c <_free_r+0x2c>
 8007f0e:	6063      	str	r3, [r4, #4]
 8007f10:	6014      	str	r4, [r2, #0]
 8007f12:	4628      	mov	r0, r5
 8007f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f18:	f7ff bfa0 	b.w	8007e5c <__malloc_unlock>
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d908      	bls.n	8007f32 <_free_r+0x42>
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	1821      	adds	r1, r4, r0
 8007f24:	428b      	cmp	r3, r1
 8007f26:	bf01      	itttt	eq
 8007f28:	6819      	ldreq	r1, [r3, #0]
 8007f2a:	685b      	ldreq	r3, [r3, #4]
 8007f2c:	1809      	addeq	r1, r1, r0
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	e7ed      	b.n	8007f0e <_free_r+0x1e>
 8007f32:	461a      	mov	r2, r3
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b10b      	cbz	r3, 8007f3c <_free_r+0x4c>
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d9fa      	bls.n	8007f32 <_free_r+0x42>
 8007f3c:	6811      	ldr	r1, [r2, #0]
 8007f3e:	1850      	adds	r0, r2, r1
 8007f40:	42a0      	cmp	r0, r4
 8007f42:	d10b      	bne.n	8007f5c <_free_r+0x6c>
 8007f44:	6820      	ldr	r0, [r4, #0]
 8007f46:	4401      	add	r1, r0
 8007f48:	1850      	adds	r0, r2, r1
 8007f4a:	4283      	cmp	r3, r0
 8007f4c:	6011      	str	r1, [r2, #0]
 8007f4e:	d1e0      	bne.n	8007f12 <_free_r+0x22>
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6053      	str	r3, [r2, #4]
 8007f56:	4408      	add	r0, r1
 8007f58:	6010      	str	r0, [r2, #0]
 8007f5a:	e7da      	b.n	8007f12 <_free_r+0x22>
 8007f5c:	d902      	bls.n	8007f64 <_free_r+0x74>
 8007f5e:	230c      	movs	r3, #12
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	e7d6      	b.n	8007f12 <_free_r+0x22>
 8007f64:	6820      	ldr	r0, [r4, #0]
 8007f66:	1821      	adds	r1, r4, r0
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf04      	itt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	bf04      	itt	eq
 8007f74:	1809      	addeq	r1, r1, r0
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	6054      	str	r4, [r2, #4]
 8007f7a:	e7ca      	b.n	8007f12 <_free_r+0x22>
 8007f7c:	bd38      	pop	{r3, r4, r5, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000958 	.word	0x20000958

08007f84 <_init>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr

08007f90 <_fini>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	bf00      	nop
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr
