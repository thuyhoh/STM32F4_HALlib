
014_LowPowerMode_SLEEPONEXIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800319c  0800319c  0000419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0000501c  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031c0  080031c0  000041c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080031c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          000000b0  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2f9  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d30  00000000  00000000  00012345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00014078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a00  00000000  00000000  00014d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203d5  00000000  00000000  00015740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e623  00000000  00000000  00035b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c78df  00000000  00000000  00044138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ba17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035d8  00000000  00000000  0010ba5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0010f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003184 	.word	0x08003184

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003184 	.word	0x08003184

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa9c 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f814 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f8da 	bl	800067c <MX_GPIO_Init>
  MX_TIM6_Init();
 80004c8:	f000 f878 	bl	80005bc <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f8ac 	bl	8000628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableSleepOnExit(),// SCB->SCR = (1<<1); -> set SLEEPONEXIT bit
 80004d0:	f000 fe78 	bl	80011c4 <HAL_PWR_EnableSleepOnExit>

  TIM6->SR = 0;
 80004d4:	4b03      	ldr	r3, [pc, #12]	@ (80004e4 <main+0x2c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 80004da:	4803      	ldr	r0, [pc, #12]	@ (80004e8 <main+0x30>)
 80004dc:	f001 fb6a 	bl	8001bb4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <main+0x28>
 80004e4:	40001000 	.word	0x40001000
 80004e8:	20000038 	.word	0x20000038

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	@ 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	@ 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fe16 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b27      	ldr	r3, [pc, #156]	@ (80005b4 <SystemClock_Config+0xc8>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000518:	4a26      	ldr	r2, [pc, #152]	@ (80005b4 <SystemClock_Config+0xc8>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000520:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <SystemClock_Config+0xcc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a20      	ldr	r2, [pc, #128]	@ (80005b8 <SystemClock_Config+0xcc>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800055c:	2304      	movs	r3, #4
 800055e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000568:	2307      	movs	r3, #7
 800056a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fe37 	bl	80011e4 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800057c:	f000 f90a 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000588:	2390      	movs	r3, #144	@ 0x90
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f89a 	bl	80016d4 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005a6:	f000 f8f5 	bl	8000794 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	@ 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_TIM6_Init+0x64>)
 80005cc:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <MX_TIM6_Init+0x68>)
 80005ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4999;
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <MX_TIM6_Init+0x64>)
 80005d2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_TIM6_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32;
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <MX_TIM6_Init+0x64>)
 80005e0:	2220      	movs	r2, #32
 80005e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_TIM6_Init+0x64>)
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005ea:	480d      	ldr	r0, [pc, #52]	@ (8000620 <MX_TIM6_Init+0x64>)
 80005ec:	f001 fa92 	bl	8001b14 <HAL_TIM_Base_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80005f6:	f000 f8cd 	bl	8000794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	@ (8000620 <MX_TIM6_Init+0x64>)
 8000608:	f001 fd08 	bl	800201c <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000612:	f000 f8bf 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000038 	.word	0x20000038
 8000624:	40001000 	.word	0x40001000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f001 fd6c 	bl	800213c <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f893 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000080 	.word	0x20000080
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <MX_GPIO_Init+0xb8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a26      	ldr	r2, [pc, #152]	@ (8000734 <MX_GPIO_Init+0xb8>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <MX_GPIO_Init+0xbc>)
 800070a:	f000 fd27 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800070e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_GPIO_Init+0xbc>)
 8000728:	f000 fb7c 	bl	8000e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40020c00 	.word	0x40020c00

0800073c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart2, pData, sizeof(pData), HAL_MAX_DELAY) != HAL_OK)
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	220e      	movs	r2, #14
 800074a:	4906      	ldr	r1, [pc, #24]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800074c:	4806      	ldr	r0, [pc, #24]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800074e:	f001 fd45 	bl	80021dc <HAL_UART_Transmit>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		Error_Handler();
 8000758:	f000 f81c 	bl	8000794 <Error_Handler>
	}
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000080 	.word	0x20000080

0800076c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000774:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <HAL_UART_TxCpltCallback+0x24>)
 800077a:	f000 fd08 	bl	800118e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800077e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <HAL_UART_TxCpltCallback+0x24>)
 8000784:	f000 fd03 	bl	800118e <HAL_GPIO_TogglePin>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020c00 	.word	0x40020c00

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <Error_Handler+0x8>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a0f      	ldr	r2, [pc, #60]	@ (80007ec <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <HAL_TIM_Base_MspInit+0x48>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d115      	bne.n	800082e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <HAL_TIM_Base_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <HAL_TIM_Base_MspInit+0x4c>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_TIM_Base_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2036      	movs	r0, #54	@ 0x36
 8000824:	f000 fa35 	bl	8000c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000828:	2036      	movs	r0, #54	@ 0x36
 800082a:	f000 fa4e 	bl	8000cca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1d      	ldr	r2, [pc, #116]	@ (80008d4 <HAL_UART_MspInit+0x94>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d133      	bne.n	80008ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	@ (80008dc <HAL_UART_MspInit+0x9c>)
 80008b6:	f000 fab5 	bl	8000e24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2026      	movs	r0, #38	@ 0x26
 80008c0:	f000 f9e7 	bl	8000c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c4:	2026      	movs	r0, #38	@ 0x26
 80008c6:	f000 fa00 	bl	8000cca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	@ 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f8b1 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <USART2_IRQHandler+0x10>)
 8000946:	f001 fcd5 	bl	80022f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000080 	.word	0x20000080

08000954 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	4806      	ldr	r0, [pc, #24]	@ (8000978 <TIM6_DAC_IRQHandler+0x24>)
 800095e:	f000 fc16 	bl	800118e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000962:	4806      	ldr	r0, [pc, #24]	@ (800097c <TIM6_DAC_IRQHandler+0x28>)
 8000964:	f001 f996 	bl	8001c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <TIM6_DAC_IRQHandler+0x24>)
 800096e:	f000 fc0e 	bl	800118e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40020c00 	.word	0x40020c00
 800097c:	20000038 	.word	0x20000038

08000980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	@ (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009a8:	f7ff ffea 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	@ (80009e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	@ (80009f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f002 fbb3 	bl	800313c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fd6f 	bl	80004b8 <main>
  bx  lr    
 80009da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009e8:	080031c4 	.word	0x080031c4
  ldr r2, =_sbss
 80009ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009f0:	200000cc 	.word	0x200000cc

080009f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <HAL_Init+0x40>)
 8000a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a08:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <HAL_Init+0x40>)
 8000a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <HAL_Init+0x40>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f92b 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff feb8 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023c00 	.word	0x40023c00

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f943 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f90b 	bl	8000c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000010 	.word	0x20000010
 8000a94:	20000018 	.word	0x20000018
 8000a98:	20000014 	.word	0x20000014

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000018 	.word	0x20000018
 8000ac0:	200000c8 	.word	0x200000c8

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200000c8 	.word	0x200000c8

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	@ (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	@ (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	@ 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c48:	d301      	bcc.n	8000c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00f      	b.n	8000c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <SysTick_Config+0x40>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c56:	210f      	movs	r1, #15
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f7ff ff8e 	bl	8000b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <SysTick_Config+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <SysTick_Config+0x40>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff29 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca4:	f7ff ff3e 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff8e 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5d 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff31 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffa2 	bl	8000c38 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff feda 	bl	8000ac4 <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d008      	beq.n	8000d30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2280      	movs	r2, #128	@ 0x80
 8000d22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e052      	b.n	8000dd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0216 	bic.w	r2, r2, #22
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	695a      	ldr	r2, [r3, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d103      	bne.n	8000d60 <HAL_DMA_Abort+0x62>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0208 	bic.w	r2, r2, #8
 8000d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d80:	e013      	b.n	8000daa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d82:	f7ff fe9f 	bl	8000ac4 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d90c      	bls.n	8000daa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2220      	movs	r2, #32
 8000d94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2203      	movs	r2, #3
 8000d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e015      	b.n	8000dd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1e4      	bne.n	8000d82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dbc:	223f      	movs	r2, #63	@ 0x3f
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d004      	beq.n	8000dfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e00c      	b.n	8000e16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2205      	movs	r2, #5
 8000e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0201 	bic.w	r2, r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e16b      	b.n	8001118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 815a 	bne.w	8001112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80b4 	beq.w	8001112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b60      	ldr	r3, [pc, #384]	@ (8001130 <HAL_GPIO_Init+0x30c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001130 <HAL_GPIO_Init+0x30c>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fba:	4b5d      	ldr	r3, [pc, #372]	@ (8001130 <HAL_GPIO_Init+0x30c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001134 <HAL_GPIO_Init+0x310>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a52      	ldr	r2, [pc, #328]	@ (8001138 <HAL_GPIO_Init+0x314>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a51      	ldr	r2, [pc, #324]	@ (800113c <HAL_GPIO_Init+0x318>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a50      	ldr	r2, [pc, #320]	@ (8001140 <HAL_GPIO_Init+0x31c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4f      	ldr	r2, [pc, #316]	@ (8001144 <HAL_GPIO_Init+0x320>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <HAL_GPIO_Init+0x324>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4d      	ldr	r2, [pc, #308]	@ (800114c <HAL_GPIO_Init+0x328>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4c      	ldr	r2, [pc, #304]	@ (8001150 <HAL_GPIO_Init+0x32c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4b      	ldr	r2, [pc, #300]	@ (8001154 <HAL_GPIO_Init+0x330>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x20a>
 800102a:	2307      	movs	r3, #7
 800102c:	e00e      	b.n	800104c <HAL_GPIO_Init+0x228>
 800102e:	2308      	movs	r3, #8
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001032:	2306      	movs	r3, #6
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x228>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	@ (8001134 <HAL_GPIO_Init+0x310>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <HAL_GPIO_Init+0x334>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a32      	ldr	r2, [pc, #200]	@ (8001158 <HAL_GPIO_Init+0x334>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <HAL_GPIO_Init+0x334>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <HAL_GPIO_Init+0x334>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae90 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40021c00 	.word	0x40021c00
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a0:	887a      	ldrh	r2, [r7, #2]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	041a      	lsls	r2, r3, #16
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	400b      	ands	r3, r1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <HAL_PWR_EnableSleepOnExit+0x1c>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <HAL_PWR_EnableSleepOnExit+0x1c>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	6113      	str	r3, [r2, #16]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e267      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d075      	beq.n	80012ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001202:	4b88      	ldr	r3, [pc, #544]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d00c      	beq.n	8001228 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b85      	ldr	r3, [pc, #532]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001216:	2b08      	cmp	r3, #8
 8001218:	d112      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b82      	ldr	r3, [pc, #520]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001226:	d10b      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4b7e      	ldr	r3, [pc, #504]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d05b      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d157      	bne.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e242      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001248:	d106      	bne.n	8001258 <HAL_RCC_OscConfig+0x74>
 800124a:	4b76      	ldr	r3, [pc, #472]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a75      	ldr	r2, [pc, #468]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b70      	ldr	r3, [pc, #448]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6f      	ldr	r2, [pc, #444]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b6d      	ldr	r3, [pc, #436]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6c      	ldr	r2, [pc, #432]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 800127c:	4b69      	ldr	r3, [pc, #420]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a68      	ldr	r2, [pc, #416]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b66      	ldr	r3, [pc, #408]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a65      	ldr	r2, [pc, #404]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fc12 	bl	8000ac4 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fc0e 	bl	8000ac4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	@ 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e207      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xc0>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fbfe 	bl	8000ac4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fbfa 	bl	8000ac4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1f3      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	4b51      	ldr	r3, [pc, #324]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0xe8>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b47      	ldr	r3, [pc, #284]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b44      	ldr	r3, [pc, #272]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1c7      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4937      	ldr	r1, [pc, #220]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	e03a      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <HAL_RCC_OscConfig+0x244>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fbb3 	bl	8000ac4 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fbaf 	bl	8000ac4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e1a8      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4925      	ldr	r1, [pc, #148]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_RCC_OscConfig+0x244>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fb92 	bl	8000ac4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fb8e 	bl	8000ac4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e187      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d036      	beq.n	800143c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d016      	beq.n	8001404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_RCC_OscConfig+0x248>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fb72 	bl	8000ac4 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fb6e 	bl	8000ac4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e167      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x200>
 8001402:	e01b      	b.n	800143c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_RCC_OscConfig+0x248>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fb5b 	bl	8000ac4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	e00e      	b.n	8001430 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fb57 	bl	8000ac4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d907      	bls.n	8001430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e150      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
 8001424:	40023800 	.word	0x40023800
 8001428:	42470000 	.word	0x42470000
 800142c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b88      	ldr	r3, [pc, #544]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ea      	bne.n	8001412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8097 	beq.w	8001578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b81      	ldr	r3, [pc, #516]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b7d      	ldr	r3, [pc, #500]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4a7c      	ldr	r2, [pc, #496]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	4b7a      	ldr	r3, [pc, #488]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b77      	ldr	r3, [pc, #476]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001486:	4b74      	ldr	r3, [pc, #464]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a73      	ldr	r2, [pc, #460]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb17 	bl	8000ac4 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff fb13 	bl	8000ac4 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e10c      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x2ea>
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c4:	4a63      	ldr	r2, [pc, #396]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x324>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x30c>
 80014d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014da:	4a5e      	ldr	r2, [pc, #376]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x324>
 80014f0:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f4:	4a57      	ldr	r2, [pc, #348]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fc:	4b55      	ldr	r3, [pc, #340]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001500:	4a54      	ldr	r2, [pc, #336]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0304 	bic.w	r3, r3, #4
 8001506:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d015      	beq.n	800153c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fad8 	bl	8000ac4 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fad4 	bl	8000ac4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0cb      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	4b49      	ldr	r3, [pc, #292]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0ee      	beq.n	8001518 <HAL_RCC_OscConfig+0x334>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fac2 	bl	8000ac4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	e00a      	b.n	800155a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fabe 	bl	8000ac4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e0b5      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155a:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ee      	bne.n	8001544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b39      	ldr	r3, [pc, #228]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	4a38      	ldr	r2, [pc, #224]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a1 	beq.w	80016c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d05c      	beq.n	8001648 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d141      	bne.n	800161a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <HAL_RCC_OscConfig+0x478>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fa92 	bl	8000ac4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fa8e 	bl	8000ac4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e087      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	019b      	lsls	r3, r3, #6
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	085b      	lsrs	r3, r3, #1
 80015da:	3b01      	subs	r3, #1
 80015dc:	041b      	lsls	r3, r3, #16
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	491b      	ldr	r1, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x478>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fa67 	bl	8000ac4 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff fa63 	bl	8000ac4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e05c      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x416>
 8001618:	e054      	b.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_RCC_OscConfig+0x478>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fa50 	bl	8000ac4 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fa4c 	bl	8000ac4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e045      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x444>
 8001646:	e03d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e038      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000
 800165c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_RCC_OscConfig+0x4ec>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d028      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d121      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d11a      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	4293      	cmp	r3, r2
 800169a:	d111      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	3b01      	subs	r3, #1
 80016aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0cc      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b68      	ldr	r3, [pc, #416]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d90c      	bls.n	8001710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b65      	ldr	r3, [pc, #404]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b63      	ldr	r3, [pc, #396]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0b8      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001728:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001740:	4b53      	ldr	r3, [pc, #332]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a52      	ldr	r2, [pc, #328]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800174a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	4b50      	ldr	r3, [pc, #320]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	494d      	ldr	r1, [pc, #308]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d044      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e07f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d003      	beq.n	8001792 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	2b03      	cmp	r3, #3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	4b3f      	ldr	r3, [pc, #252]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e067      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b2:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0203 	bic.w	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4934      	ldr	r1, [pc, #208]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c4:	f7ff f97e 	bl	8000ac4 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017cc:	f7ff f97a 	bl	8000ac4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e04f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 020c 	and.w	r2, r3, #12
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1eb      	bne.n	80017cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f4:	4b25      	ldr	r3, [pc, #148]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d20c      	bcs.n	800181c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e032      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4916      	ldr	r1, [pc, #88]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	490e      	ldr	r1, [pc, #56]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185a:	f000 f821 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 800185e:	4602      	mov	r2, r0
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	490a      	ldr	r1, [pc, #40]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	4a09      	ldr	r2, [pc, #36]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f8de 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00
 8001890:	40023800 	.word	0x40023800
 8001894:	0800319c 	.word	0x0800319c
 8001898:	20000010 	.word	0x20000010
 800189c:	20000014 	.word	0x20000014

080018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a4:	b094      	sub	sp, #80	@ 0x50
 80018a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b8:	4b79      	ldr	r3, [pc, #484]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d00d      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x40>
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	f200 80e1 	bhi.w	8001a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d003      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x3a>
 80018d2:	e0db      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80018d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018d8:	e0db      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018da:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80018dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018de:	e0d8      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	2200      	movs	r2, #0
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
 800190a:	2300      	movs	r3, #0
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
 800190e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001912:	4622      	mov	r2, r4
 8001914:	462b      	mov	r3, r5
 8001916:	f04f 0000 	mov.w	r0, #0
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	0159      	lsls	r1, r3, #5
 8001920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001924:	0150      	lsls	r0, r2, #5
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4621      	mov	r1, r4
 800192c:	1a51      	subs	r1, r2, r1
 800192e:	6139      	str	r1, [r7, #16]
 8001930:	4629      	mov	r1, r5
 8001932:	eb63 0301 	sbc.w	r3, r3, r1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001944:	4659      	mov	r1, fp
 8001946:	018b      	lsls	r3, r1, #6
 8001948:	4651      	mov	r1, sl
 800194a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194e:	4651      	mov	r1, sl
 8001950:	018a      	lsls	r2, r1, #6
 8001952:	4651      	mov	r1, sl
 8001954:	ebb2 0801 	subs.w	r8, r2, r1
 8001958:	4659      	mov	r1, fp
 800195a:	eb63 0901 	sbc.w	r9, r3, r1
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800196a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800196e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001972:	4690      	mov	r8, r2
 8001974:	4699      	mov	r9, r3
 8001976:	4623      	mov	r3, r4
 8001978:	eb18 0303 	adds.w	r3, r8, r3
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	462b      	mov	r3, r5
 8001980:	eb49 0303 	adc.w	r3, r9, r3
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001992:	4629      	mov	r1, r5
 8001994:	024b      	lsls	r3, r1, #9
 8001996:	4621      	mov	r1, r4
 8001998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800199c:	4621      	mov	r1, r4
 800199e:	024a      	lsls	r2, r1, #9
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a6:	2200      	movs	r2, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019b0:	f7fe fc0a 	bl	80001c8 <__aeabi_uldivmod>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019bc:	e058      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b38      	ldr	r3, [pc, #224]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	4611      	mov	r1, r2
 80019ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d8:	4642      	mov	r2, r8
 80019da:	464b      	mov	r3, r9
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0159      	lsls	r1, r3, #5
 80019e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ea:	0150      	lsls	r0, r2, #5
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4641      	mov	r1, r8
 80019f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019f6:	4649      	mov	r1, r9
 80019f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a10:	ebb2 040a 	subs.w	r4, r2, sl
 8001a14:	eb63 050b 	sbc.w	r5, r3, fp
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	00eb      	lsls	r3, r5, #3
 8001a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a26:	00e2      	lsls	r2, r4, #3
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	464b      	mov	r3, r9
 8001a34:	eb45 0303 	adc.w	r3, r5, r3
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a46:	4629      	mov	r1, r5
 8001a48:	028b      	lsls	r3, r1, #10
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a50:	4621      	mov	r1, r4
 8001a52:	028a      	lsls	r2, r1, #10
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	61fa      	str	r2, [r7, #28]
 8001a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a64:	f7fe fbb0 	bl	80001c8 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3750      	adds	r7, #80	@ 0x50
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000010 	.word	0x20000010

08001ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac8:	f7ff fff0 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0a9b      	lsrs	r3, r3, #10
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	@ (8001ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	080031ac 	.word	0x080031ac

08001aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af0:	f7ff ffdc 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0b5b      	lsrs	r3, r3, #13
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	@ (8001b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	080031ac 	.word	0x080031ac

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e041      	b.n	8001baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe fe58 	bl	80007f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 f9b6 	bl	8001ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d001      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e04e      	b.n	8001c6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a23      	ldr	r2, [pc, #140]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d022      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf6:	d01d      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c7c <HAL_TIM_Base_Start_IT+0xc8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d018      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00e      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d009      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x80>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a18      	ldr	r2, [pc, #96]	@ (8001c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d111      	bne.n	8001c58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d010      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c56:	e007      	b.n	8001c68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	40000800 	.word	0x40000800
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	40010400 	.word	0x40010400
 8001c8c:	40014000 	.word	0x40014000
 8001c90:	40001800 	.word	0x40001800

08001c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d020      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01b      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0202 	mvn.w	r2, #2
 8001cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8d2 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8c4 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8d5 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d020      	beq.n	8001d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01b      	beq.n	8001d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0204 	mvn.w	r2, #4
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8ac 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f89e 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8af 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d020      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01b      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0208 	mvn.w	r2, #8
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2204      	movs	r2, #4
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f886 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f878 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f889 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d020      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0210 	mvn.w	r2, #16
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2208      	movs	r2, #8
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f860 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f852 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f863 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0201 	mvn.w	r2, #1
 8001df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fc9e 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00c      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f982 	bl	8002128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f834 	bl	8001eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f954 	bl	8002114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a46      	ldr	r2, [pc, #280]	@ (8001ff0 <TIM_Base_SetConfig+0x12c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee2:	d00f      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a43      	ldr	r2, [pc, #268]	@ (8001ff4 <TIM_Base_SetConfig+0x130>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a42      	ldr	r2, [pc, #264]	@ (8001ff8 <TIM_Base_SetConfig+0x134>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a41      	ldr	r2, [pc, #260]	@ (8001ffc <TIM_Base_SetConfig+0x138>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a40      	ldr	r2, [pc, #256]	@ (8002000 <TIM_Base_SetConfig+0x13c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a35      	ldr	r2, [pc, #212]	@ (8001ff0 <TIM_Base_SetConfig+0x12c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d02b      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f24:	d027      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a32      	ldr	r2, [pc, #200]	@ (8001ff4 <TIM_Base_SetConfig+0x130>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d023      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a31      	ldr	r2, [pc, #196]	@ (8001ff8 <TIM_Base_SetConfig+0x134>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a30      	ldr	r2, [pc, #192]	@ (8001ffc <TIM_Base_SetConfig+0x138>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01b      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2f      	ldr	r2, [pc, #188]	@ (8002000 <TIM_Base_SetConfig+0x13c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d017      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2e      	ldr	r2, [pc, #184]	@ (8002004 <TIM_Base_SetConfig+0x140>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2d      	ldr	r2, [pc, #180]	@ (8002008 <TIM_Base_SetConfig+0x144>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00f      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <TIM_Base_SetConfig+0x148>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00b      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	@ (8002010 <TIM_Base_SetConfig+0x14c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	@ (8002014 <TIM_Base_SetConfig+0x150>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d003      	beq.n	8001f76 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a29      	ldr	r2, [pc, #164]	@ (8002018 <TIM_Base_SetConfig+0x154>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d108      	bne.n	8001f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <TIM_Base_SetConfig+0x12c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0xf8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <TIM_Base_SetConfig+0x13c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d103      	bne.n	8001fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f023 0201 	bic.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	40000c00 	.word	0x40000c00
 8002000:	40010400 	.word	0x40010400
 8002004:	40014000 	.word	0x40014000
 8002008:	40014400 	.word	0x40014400
 800200c:	40014800 	.word	0x40014800
 8002010:	40001800 	.word	0x40001800
 8002014:	40001c00 	.word	0x40001c00
 8002018:	40002000 	.word	0x40002000

0800201c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002030:	2302      	movs	r3, #2
 8002032:	e05a      	b.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a21      	ldr	r2, [pc, #132]	@ (80020f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d022      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002080:	d01d      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d018      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1a      	ldr	r2, [pc, #104]	@ (8002104 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00e      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a18      	ldr	r2, [pc, #96]	@ (8002108 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d009      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a17      	ldr	r2, [pc, #92]	@ (800210c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a15      	ldr	r2, [pc, #84]	@ (8002110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10c      	bne.n	80020d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800
 8002104:	40000c00 	.word	0x40000c00
 8002108:	40010400 	.word	0x40010400
 800210c:	40014000 	.word	0x40014000
 8002110:	40001800 	.word	0x40001800

08002114 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e042      	b.n	80021d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fb6c 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	@ 0x24
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800217e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fd5f 	bl	8002c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d175      	bne.n	80022e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_UART_Transmit+0x2c>
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e06e      	b.n	80022ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2221      	movs	r2, #33	@ 0x21
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800221a:	f7fe fc53 	bl	8000ac4 <HAL_GetTick>
 800221e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002234:	d108      	bne.n	8002248 <HAL_UART_Transmit+0x6c>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d104      	bne.n	8002248 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	e003      	b.n	8002250 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002250:	e02e      	b.n	80022b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	2180      	movs	r1, #128	@ 0x80
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fafb 	bl	8002858 <UART_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e03a      	b.n	80022ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10b      	bne.n	8002292 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	3302      	adds	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e007      	b.n	80022a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3301      	adds	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1cb      	bne.n	8002252 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2140      	movs	r1, #64	@ 0x40
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fac7 	bl	8002858 <UART_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e006      	b.n	80022ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e000      	b.n	80022ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
  }
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0ba      	sub	sp, #232	@ 0xe8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_UART_IRQHandler+0x66>
 8002346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fbb8 	bl	8002ac8 <UART_Receive_IT>
      return;
 8002358:	e25b      	b.n	8002812 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800235a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80de 	beq.w	8002520 <HAL_UART_IRQHandler+0x22c>
 8002364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d106      	bne.n	800237e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002374:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80d1 	beq.w	8002520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_UART_IRQHandler+0xae>
 800238a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_UART_IRQHandler+0xd2>
 80023ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f043 0202 	orr.w	r2, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_UART_IRQHandler+0xf6>
 80023d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f043 0204 	orr.w	r2, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d011      	beq.n	800241a <HAL_UART_IRQHandler+0x126>
 80023f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	f043 0208 	orr.w	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 81f2 	beq.w	8002808 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_UART_IRQHandler+0x14e>
 8002430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fb43 	bl	8002ac8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244c:	2b40      	cmp	r3, #64	@ 0x40
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_UART_IRQHandler+0x17a>
 8002466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d04f      	beq.n	800250e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa4b 	bl	800290a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247e:	2b40      	cmp	r3, #64	@ 0x40
 8002480:	d141      	bne.n	8002506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800249c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3314      	adds	r3, #20
 80024aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80024ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80024b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80024ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80024be:	e841 2300 	strex	r3, r2, [r1]
 80024c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80024c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1d9      	bne.n	8002482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d013      	beq.n	80024fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024da:	4a7e      	ldr	r2, [pc, #504]	@ (80026d4 <HAL_UART_IRQHandler+0x3e0>)
 80024dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fc7b 	bl	8000dde <HAL_DMA_Abort_IT>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024f8:	4610      	mov	r0, r2
 80024fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fc:	e00e      	b.n	800251c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f994 	bl	800282c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002504:	e00a      	b.n	800251c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f990 	bl	800282c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250c:	e006      	b.n	800251c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f98c 	bl	800282c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800251a:	e175      	b.n	8002808 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251c:	bf00      	nop
    return;
 800251e:	e173      	b.n	8002808 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	2b01      	cmp	r3, #1
 8002526:	f040 814f 	bne.w	80027c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800252a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8148 	beq.w	80027c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8141 	beq.w	80027c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002566:	2b40      	cmp	r3, #64	@ 0x40
 8002568:	f040 80b6 	bne.w	80026d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8145 	beq.w	800280c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800258a:	429a      	cmp	r2, r3
 800258c:	f080 813e 	bcs.w	800280c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002596:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a2:	f000 8088 	beq.w	80026b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025b4:	e853 3f00 	ldrex	r3, [r3]
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80025bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80025d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80025de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025e2:	e841 2300 	strex	r3, r2, [r1]
 80025e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80025ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1d9      	bne.n	80025a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002616:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800261a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800261e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002622:	e841 2300 	strex	r3, r2, [r1]
 8002626:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1e1      	bne.n	80025f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3314      	adds	r3, #20
 8002634:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002638:	e853 3f00 	ldrex	r3, [r3]
 800263c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800263e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3314      	adds	r3, #20
 800264e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002652:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002654:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002656:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002658:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e3      	bne.n	800262e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800267e:	e853 3f00 	ldrex	r3, [r3]
 8002682:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002686:	f023 0310 	bic.w	r3, r3, #16
 800268a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002698:	65ba      	str	r2, [r7, #88]	@ 0x58
 800269a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800269e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026a0:	e841 2300 	strex	r3, r2, [r1]
 80026a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80026a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e3      	bne.n	8002674 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fb24 	bl	8000cfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f8b7 	bl	8002840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026d2:	e09b      	b.n	800280c <HAL_UART_IRQHandler+0x518>
 80026d4:	080029d1 	.word	0x080029d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 808e 	beq.w	8002810 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80026f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8089 	beq.w	8002810 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800270e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002714:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002722:	647a      	str	r2, [r7, #68]	@ 0x44
 8002724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002726:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e3      	bne.n	80026fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	623b      	str	r3, [r7, #32]
   return(result);
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800275a:	633a      	str	r2, [r7, #48]	@ 0x30
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002762:	e841 2300 	strex	r3, r2, [r1]
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e3      	bne.n	8002736 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	60fb      	str	r3, [r7, #12]
   return(result);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0310 	bic.w	r3, r3, #16
 8002792:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80027a0:	61fa      	str	r2, [r7, #28]
 80027a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a4:	69b9      	ldr	r1, [r7, #24]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	e841 2300 	strex	r3, r2, [r1]
 80027ac:	617b      	str	r3, [r7, #20]
   return(result);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e3      	bne.n	800277c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f83d 	bl	8002840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027c6:	e023      	b.n	8002810 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d009      	beq.n	80027e8 <HAL_UART_IRQHandler+0x4f4>
 80027d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f909 	bl	80029f8 <UART_Transmit_IT>
    return;
 80027e6:	e014      	b.n	8002812 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <HAL_UART_IRQHandler+0x51e>
 80027f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f949 	bl	8002a98 <UART_EndTransmit_IT>
    return;
 8002806:	e004      	b.n	8002812 <HAL_UART_IRQHandler+0x51e>
    return;
 8002808:	bf00      	nop
 800280a:	e002      	b.n	8002812 <HAL_UART_IRQHandler+0x51e>
      return;
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <HAL_UART_IRQHandler+0x51e>
      return;
 8002810:	bf00      	nop
  }
}
 8002812:	37e8      	adds	r7, #232	@ 0xe8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002868:	e03b      	b.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d037      	beq.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7fe f927 	bl	8000ac4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <UART_WaitOnFlagUntilTimeout+0x30>
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03a      	b.n	8002902 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d023      	beq.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b80      	cmp	r3, #128	@ 0x80
 800289e:	d020      	beq.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b40      	cmp	r3, #64	@ 0x40
 80028a4:	d01d      	beq.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d116      	bne.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f81d 	bl	800290a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2208      	movs	r2, #8
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e00f      	b.n	8002902 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	bf0c      	ite	eq
 80028f2:	2301      	moveq	r3, #1
 80028f4:	2300      	movne	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d0b4      	beq.n	800286a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800290a:	b480      	push	{r7}
 800290c:	b095      	sub	sp, #84	@ 0x54
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	330c      	adds	r3, #12
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291c:	e853 3f00 	ldrex	r3, [r3]
 8002920:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002928:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002932:	643a      	str	r2, [r7, #64]	@ 0x40
 8002934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002938:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e5      	bne.n	8002912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3314      	adds	r3, #20
 800294c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	61fb      	str	r3, [r7, #28]
   return(result);
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3314      	adds	r3, #20
 8002964:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800296c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e5      	bne.n	8002946 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	2b01      	cmp	r3, #1
 8002980:	d119      	bne.n	80029b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	60bb      	str	r3, [r7, #8]
   return(result);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f023 0310 	bic.w	r3, r3, #16
 8002998:	647b      	str	r3, [r7, #68]	@ 0x44
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029a2:	61ba      	str	r2, [r7, #24]
 80029a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	613b      	str	r3, [r7, #16]
   return(result);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029c4:	bf00      	nop
 80029c6:	3754      	adds	r7, #84	@ 0x54
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff1e 	bl	800282c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b21      	cmp	r3, #33	@ 0x21
 8002a0a:	d13e      	bne.n	8002a8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a14:	d114      	bne.n	8002a40 <UART_Transmit_IT+0x48>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d110      	bne.n	8002a40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]
 8002a3e:	e008      	b.n	8002a52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	1c59      	adds	r1, r3, #1
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6211      	str	r1, [r2, #32]
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fd fe57 	bl	800076c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b22      	cmp	r3, #34	@ 0x22
 8002ada:	f040 80ae 	bne.w	8002c3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae6:	d117      	bne.n	8002b18 <UART_Receive_IT+0x50>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d113      	bne.n	8002b18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	1c9a      	adds	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b16:	e026      	b.n	8002b66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2a:	d007      	beq.n	8002b3c <UART_Receive_IT+0x74>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <UART_Receive_IT+0x82>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e008      	b.n	8002b5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4619      	mov	r1, r3
 8002b74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d15d      	bne.n	8002c36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0220 	bic.w	r2, r2, #32
 8002b88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d135      	bne.n	8002c2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f023 0310 	bic.w	r3, r3, #16
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	330c      	adds	r3, #12
 8002be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be6:	623a      	str	r2, [r7, #32]
 8002be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	69f9      	ldr	r1, [r7, #28]
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e5      	bne.n	8002bc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d10a      	bne.n	8002c1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fe0b 	bl	8002840 <HAL_UARTEx_RxEventCallback>
 8002c2a:	e002      	b.n	8002c32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fdf3 	bl	8002818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e002      	b.n	8002c3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3730      	adds	r7, #48	@ 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b0c0      	sub	sp, #256	@ 0x100
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c60:	68d9      	ldr	r1, [r3, #12]
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	ea40 0301 	orr.w	r3, r0, r1
 8002c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c9c:	f021 010c 	bic.w	r1, r1, #12
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002caa:	430b      	orrs	r3, r1
 8002cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbe:	6999      	ldr	r1, [r3, #24]
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	ea40 0301 	orr.w	r3, r0, r1
 8002cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8002f10 <UART_SetConfig+0x2cc>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d005      	beq.n	8002ce4 <UART_SetConfig+0xa0>
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b8d      	ldr	r3, [pc, #564]	@ (8002f14 <UART_SetConfig+0x2d0>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d104      	bne.n	8002cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ce4:	f7fe ff02 	bl	8001aec <HAL_RCC_GetPCLK2Freq>
 8002ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002cec:	e003      	b.n	8002cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cee:	f7fe fee9 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 8002cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d00:	f040 810c 	bne.w	8002f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	1891      	adds	r1, r2, r2
 8002d1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d1e:	415b      	adcs	r3, r3
 8002d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d26:	4621      	mov	r1, r4
 8002d28:	eb12 0801 	adds.w	r8, r2, r1
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	eb43 0901 	adc.w	r9, r3, r1
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d46:	4690      	mov	r8, r2
 8002d48:	4699      	mov	r9, r3
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	eb18 0303 	adds.w	r3, r8, r3
 8002d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d54:	462b      	mov	r3, r5
 8002d56:	eb49 0303 	adc.w	r3, r9, r3
 8002d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d72:	460b      	mov	r3, r1
 8002d74:	18db      	adds	r3, r3, r3
 8002d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d78:	4613      	mov	r3, r2
 8002d7a:	eb42 0303 	adc.w	r3, r2, r3
 8002d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d88:	f7fd fa1e 	bl	80001c8 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4b61      	ldr	r3, [pc, #388]	@ (8002f18 <UART_SetConfig+0x2d4>)
 8002d92:	fba3 2302 	umull	r2, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	011c      	lsls	r4, r3, #4
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002da4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002db4:	415b      	adcs	r3, r3
 8002db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ddc:	4692      	mov	sl, r2
 8002dde:	469b      	mov	fp, r3
 8002de0:	4643      	mov	r3, r8
 8002de2:	eb1a 0303 	adds.w	r3, sl, r3
 8002de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dea:	464b      	mov	r3, r9
 8002dec:	eb4b 0303 	adc.w	r3, fp, r3
 8002df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	18db      	adds	r3, r3, r3
 8002e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e0e:	4613      	mov	r3, r2
 8002e10:	eb42 0303 	adc.w	r3, r2, r3
 8002e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e1e:	f7fd f9d3 	bl	80001c8 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <UART_SetConfig+0x2d4>)
 8002e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2264      	movs	r2, #100	@ 0x64
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	1acb      	subs	r3, r1, r3
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e3e:	4b36      	ldr	r3, [pc, #216]	@ (8002f18 <UART_SetConfig+0x2d4>)
 8002e40:	fba3 2302 	umull	r2, r3, r3, r2
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e4c:	441c      	add	r4, r3
 8002e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	1891      	adds	r1, r2, r2
 8002e66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e68:	415b      	adcs	r3, r3
 8002e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e70:	4641      	mov	r1, r8
 8002e72:	1851      	adds	r1, r2, r1
 8002e74:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e76:	4649      	mov	r1, r9
 8002e78:	414b      	adcs	r3, r1
 8002e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e88:	4659      	mov	r1, fp
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4651      	mov	r1, sl
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	eb42 0303 	adc.w	r3, r2, r3
 8002eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	18db      	adds	r3, r3, r3
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eca:	4613      	mov	r3, r2
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002eda:	f7fd f975 	bl	80001c8 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <UART_SetConfig+0x2d4>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	@ 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	3332      	adds	r3, #50	@ 0x32
 8002ef6:	4a08      	ldr	r2, [pc, #32]	@ (8002f18 <UART_SetConfig+0x2d4>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 0207 	and.w	r2, r3, #7
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4422      	add	r2, r4
 8002f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f0c:	e106      	b.n	800311c <UART_SetConfig+0x4d8>
 8002f0e:	bf00      	nop
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f2e:	4642      	mov	r2, r8
 8002f30:	464b      	mov	r3, r9
 8002f32:	1891      	adds	r1, r2, r2
 8002f34:	6239      	str	r1, [r7, #32]
 8002f36:	415b      	adcs	r3, r3
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f3e:	4641      	mov	r1, r8
 8002f40:	1854      	adds	r4, r2, r1
 8002f42:	4649      	mov	r1, r9
 8002f44:	eb43 0501 	adc.w	r5, r3, r1
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	00eb      	lsls	r3, r5, #3
 8002f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f64:	464b      	mov	r3, r9
 8002f66:	eb45 0303 	adc.w	r3, r5, r3
 8002f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	008b      	lsls	r3, r1, #2
 8002f8e:	4621      	mov	r1, r4
 8002f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f94:	4621      	mov	r1, r4
 8002f96:	008a      	lsls	r2, r1, #2
 8002f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f9c:	f7fd f914 	bl	80001c8 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4b60      	ldr	r3, [pc, #384]	@ (8003128 <UART_SetConfig+0x4e4>)
 8002fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	011c      	lsls	r4, r3, #4
 8002fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	1891      	adds	r1, r2, r2
 8002fc6:	61b9      	str	r1, [r7, #24]
 8002fc8:	415b      	adcs	r3, r3
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	1851      	adds	r1, r2, r1
 8002fd4:	6139      	str	r1, [r7, #16]
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	414b      	adcs	r3, r1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fe8:	4659      	mov	r1, fp
 8002fea:	00cb      	lsls	r3, r1, #3
 8002fec:	4651      	mov	r1, sl
 8002fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	00ca      	lsls	r2, r1, #3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003004:	464b      	mov	r3, r9
 8003006:	460a      	mov	r2, r1
 8003008:	eb42 0303 	adc.w	r3, r2, r3
 800300c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800301a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003028:	4649      	mov	r1, r9
 800302a:	008b      	lsls	r3, r1, #2
 800302c:	4641      	mov	r1, r8
 800302e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003032:	4641      	mov	r1, r8
 8003034:	008a      	lsls	r2, r1, #2
 8003036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800303a:	f7fd f8c5 	bl	80001c8 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4611      	mov	r1, r2
 8003044:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <UART_SetConfig+0x4e4>)
 8003046:	fba3 2301 	umull	r2, r3, r3, r1
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2264      	movs	r2, #100	@ 0x64
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	1acb      	subs	r3, r1, r3
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	3332      	adds	r3, #50	@ 0x32
 8003058:	4a33      	ldr	r2, [pc, #204]	@ (8003128 <UART_SetConfig+0x4e4>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003064:	441c      	add	r4, r3
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	673b      	str	r3, [r7, #112]	@ 0x70
 800306e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003074:	4642      	mov	r2, r8
 8003076:	464b      	mov	r3, r9
 8003078:	1891      	adds	r1, r2, r2
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	415b      	adcs	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003084:	4641      	mov	r1, r8
 8003086:	1851      	adds	r1, r2, r1
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	4649      	mov	r1, r9
 800308c:	414b      	adcs	r3, r1
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800309c:	4659      	mov	r1, fp
 800309e:	00cb      	lsls	r3, r1, #3
 80030a0:	4651      	mov	r1, sl
 80030a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030a6:	4651      	mov	r1, sl
 80030a8:	00ca      	lsls	r2, r1, #3
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	4642      	mov	r2, r8
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030b6:	464b      	mov	r3, r9
 80030b8:	460a      	mov	r2, r1
 80030ba:	eb42 0303 	adc.w	r3, r2, r3
 80030be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80030ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80030d8:	4649      	mov	r1, r9
 80030da:	008b      	lsls	r3, r1, #2
 80030dc:	4641      	mov	r1, r8
 80030de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e2:	4641      	mov	r1, r8
 80030e4:	008a      	lsls	r2, r1, #2
 80030e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80030ea:	f7fd f86d 	bl	80001c8 <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <UART_SetConfig+0x4e4>)
 80030f4:	fba3 1302 	umull	r1, r3, r3, r2
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	2164      	movs	r1, #100	@ 0x64
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	3332      	adds	r3, #50	@ 0x32
 8003106:	4a08      	ldr	r2, [pc, #32]	@ (8003128 <UART_SetConfig+0x4e4>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4422      	add	r2, r4
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003122:	46bd      	mov	sp, r7
 8003124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003128:	51eb851f 	.word	0x51eb851f

0800312c <memset>:
 800312c:	4402      	add	r2, r0
 800312e:	4603      	mov	r3, r0
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	f803 1b01 	strb.w	r1, [r3], #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <__libc_init_array>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	4d0d      	ldr	r5, [pc, #52]	@ (8003174 <__libc_init_array+0x38>)
 8003140:	4c0d      	ldr	r4, [pc, #52]	@ (8003178 <__libc_init_array+0x3c>)
 8003142:	1b64      	subs	r4, r4, r5
 8003144:	10a4      	asrs	r4, r4, #2
 8003146:	2600      	movs	r6, #0
 8003148:	42a6      	cmp	r6, r4
 800314a:	d109      	bne.n	8003160 <__libc_init_array+0x24>
 800314c:	4d0b      	ldr	r5, [pc, #44]	@ (800317c <__libc_init_array+0x40>)
 800314e:	4c0c      	ldr	r4, [pc, #48]	@ (8003180 <__libc_init_array+0x44>)
 8003150:	f000 f818 	bl	8003184 <_init>
 8003154:	1b64      	subs	r4, r4, r5
 8003156:	10a4      	asrs	r4, r4, #2
 8003158:	2600      	movs	r6, #0
 800315a:	42a6      	cmp	r6, r4
 800315c:	d105      	bne.n	800316a <__libc_init_array+0x2e>
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	f855 3b04 	ldr.w	r3, [r5], #4
 8003164:	4798      	blx	r3
 8003166:	3601      	adds	r6, #1
 8003168:	e7ee      	b.n	8003148 <__libc_init_array+0xc>
 800316a:	f855 3b04 	ldr.w	r3, [r5], #4
 800316e:	4798      	blx	r3
 8003170:	3601      	adds	r6, #1
 8003172:	e7f2      	b.n	800315a <__libc_init_array+0x1e>
 8003174:	080031bc 	.word	0x080031bc
 8003178:	080031bc 	.word	0x080031bc
 800317c:	080031bc 	.word	0x080031bc
 8003180:	080031c0 	.word	0x080031c0

08003184 <_init>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr

08003190 <_fini>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr
