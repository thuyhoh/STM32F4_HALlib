
017_Current_Measurement_Run_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003344  08003344  00004344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800340c  0800340c  0000507c  2**0
                  CONTENTS
  4 .ARM          00000000  0800340c  0800340c  0000507c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800340c  0800340c  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800340c  0800340c  0000440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003410  08003410  00004410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003414  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  2000007c  08003490  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000898  08003490  00005898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075cd  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d03  00000000  00000000  0000c679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e2  00000000  00000000  0000ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ca5  00000000  00000000  0000f61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdab  00000000  00000000  000242bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074fea  00000000  00000000  0003106a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af0  00000000  00000000  000a6098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000a8b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800332c 	.word	0x0800332c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	0800332c 	.word	0x0800332c

08000204 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]
 8000214:	230f      	movs	r3, #15
 8000216:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	78db      	ldrb	r3, [r3, #3]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d039      	beq.n	8000294 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000220:	4b27      	ldr	r3, [pc, #156]	@ (80002c0 <NVIC_Init+0xbc>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	43db      	mvns	r3, r3
 8000226:	0a1b      	lsrs	r3, r3, #8
 8000228:	b2db      	uxtb	r3, r3
 800022a:	f003 0307 	and.w	r3, r3, #7
 800022e:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	f1c3 0304 	rsb	r3, r3, #4
 8000236:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000238:	7b7a      	ldrb	r2, [r7, #13]
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	fa42 f303 	asr.w	r3, r2, r3
 8000240:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	461a      	mov	r2, r3
 8000248:	7bbb      	ldrb	r3, [r7, #14]
 800024a:	fa02 f303 	lsl.w	r3, r2, r3
 800024e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	789a      	ldrb	r2, [r3, #2]
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	4013      	ands	r3, r2
 8000258:	b2da      	uxtb	r2, r3
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	4313      	orrs	r3, r2
 800025e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000260:	7bfb      	ldrb	r3, [r7, #15]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000266:	4a17      	ldr	r2, [pc, #92]	@ (80002c4 <NVIC_Init+0xc0>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	4413      	add	r3, r2
 800026e:	7bfa      	ldrb	r2, [r7, #15]
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	4911      	ldr	r1, [pc, #68]	@ (80002c4 <NVIC_Init+0xc0>)
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	0952      	lsrs	r2, r2, #5
 8000284:	b2d2      	uxtb	r2, r2
 8000286:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	2201      	movs	r2, #1
 800028a:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800028e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000292:	e00f      	b.n	80002b4 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800029c:	4909      	ldr	r1, [pc, #36]	@ (80002c4 <NVIC_Init+0xc0>)
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	0952      	lsrs	r2, r2, #5
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002a8:	2201      	movs	r2, #1
 80002aa:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002ac:	f100 0320 	add.w	r3, r0, #32
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80002de:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <EXTI_DeInit+0x2c>)
 80002e6:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <EXTI_DeInit+0x30>)
 80002e8:	615a      	str	r2, [r3, #20]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40013c00 	.word	0x40013c00
 80002f8:	007fffff 	.word	0x007fffff

080002fc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000308:	4b34      	ldr	r3, [pc, #208]	@ (80003dc <EXTI_Init+0xe0>)
 800030a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	799b      	ldrb	r3, [r3, #6]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d04f      	beq.n	80003b4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <EXTI_Init+0xe0>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	43db      	mvns	r3, r3
 800031e:	492f      	ldr	r1, [pc, #188]	@ (80003dc <EXTI_Init+0xe0>)
 8000320:	4013      	ands	r3, r2
 8000322:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000324:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <EXTI_Init+0xe0>)
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	43db      	mvns	r3, r3
 800032e:	492b      	ldr	r1, [pc, #172]	@ (80003dc <EXTI_Init+0xe0>)
 8000330:	4013      	ands	r3, r2
 8000332:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	461a      	mov	r2, r3
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	4413      	add	r3, r2
 800033e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	6819      	ldr	r1, [r3, #0]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	430a      	orrs	r2, r1
 800034c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <EXTI_Init+0xe0>)
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	43db      	mvns	r3, r3
 8000358:	4920      	ldr	r1, [pc, #128]	@ (80003dc <EXTI_Init+0xe0>)
 800035a:	4013      	ands	r3, r2
 800035c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800035e:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <EXTI_Init+0xe0>)
 8000360:	68da      	ldr	r2, [r3, #12]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	43db      	mvns	r3, r3
 8000368:	491c      	ldr	r1, [pc, #112]	@ (80003dc <EXTI_Init+0xe0>)
 800036a:	4013      	ands	r3, r2
 800036c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	795b      	ldrb	r3, [r3, #5]
 8000372:	2b10      	cmp	r3, #16
 8000374:	d10e      	bne.n	8000394 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000376:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <EXTI_Init+0xe0>)
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4917      	ldr	r1, [pc, #92]	@ (80003dc <EXTI_Init+0xe0>)
 8000380:	4313      	orrs	r3, r2
 8000382:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <EXTI_Init+0xe0>)
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4913      	ldr	r1, [pc, #76]	@ (80003dc <EXTI_Init+0xe0>)
 800038e:	4313      	orrs	r3, r2
 8000390:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000392:	e01d      	b.n	80003d0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <EXTI_Init+0xe0>)
 8000396:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	461a      	mov	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	4413      	add	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	6819      	ldr	r1, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
}
 80003b2:	e00d      	b.n	80003d0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	4413      	add	r3, r2
 80003be:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	43da      	mvns	r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	400a      	ands	r2, r1
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40013c00 	.word	0x40013c00

080003e0 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <EXTI_GetITStatus+0x30>)
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4013      	ands	r3, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e001      	b.n	8000402 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40013c00 	.word	0x40013c00

08000414 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800041c:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <EXTI_ClearITPendingBit+0x1c>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6153      	str	r3, [r2, #20]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40013c00 	.word	0x40013c00

08000434 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800043c:	4b04      	ldr	r3, [pc, #16]	@ (8000450 <FLASH_SetLatency+0x1c>)
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	701a      	strb	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40023c00 	.word	0x40023c00

08000454 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d006      	beq.n	8000472 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <FLASH_PrefetchBufferCmd+0x38>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a08      	ldr	r2, [pc, #32]	@ (800048c <FLASH_PrefetchBufferCmd+0x38>)
 800046a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800046e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8000470:	e005      	b.n	800047e <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <FLASH_PrefetchBufferCmd+0x38>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a05      	ldr	r2, [pc, #20]	@ (800048c <FLASH_PrefetchBufferCmd+0x38>)
 8000478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800047c:	6013      	str	r3, [r2, #0]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40023c00 	.word	0x40023c00

08000490 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d006      	beq.n	80004ae <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <FLASH_InstructionCacheCmd+0x38>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a08      	ldr	r2, [pc, #32]	@ (80004c8 <FLASH_InstructionCacheCmd+0x38>)
 80004a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004aa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
  }
}
 80004ac:	e005      	b.n	80004ba <FLASH_InstructionCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <FLASH_InstructionCacheCmd+0x38>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a05      	ldr	r2, [pc, #20]	@ (80004c8 <FLASH_InstructionCacheCmd+0x38>)
 80004b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80004b8:	6013      	str	r3, [r2, #0]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40023c00 	.word	0x40023c00

080004cc <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d006      	beq.n	80004ea <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80004dc:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <FLASH_DataCacheCmd+0x38>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <FLASH_DataCacheCmd+0x38>)
 80004e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
  }
}
 80004e8:	e005      	b.n	80004f6 <FLASH_DataCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <FLASH_DataCacheCmd+0x38>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <FLASH_DataCacheCmd+0x38>)
 80004f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40023c00 	.word	0x40023c00

08000508 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e076      	b.n	8000612 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000524:	2201      	movs	r2, #1
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	429a      	cmp	r2, r3
 800053e:	d165      	bne.n	800060c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	2103      	movs	r1, #3
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	4619      	mov	r1, r3
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d003      	beq.n	800057e <GPIO_Init+0x76>
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d12e      	bne.n	80005dc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2103      	movs	r1, #3
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	401a      	ands	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	4619      	mov	r1, r3
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	431a      	orrs	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	2301      	movs	r3, #1
 80005b8:	408b      	lsls	r3, r1
 80005ba:	43db      	mvns	r3, r3
 80005bc:	401a      	ands	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	7992      	ldrb	r2, [r2, #6]
 80005ca:	4611      	mov	r1, r2
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	b292      	uxth	r2, r2
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	b292      	uxth	r2, r2
 80005d6:	431a      	orrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68da      	ldr	r2, [r3, #12]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	2103      	movs	r1, #3
 80005e8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ec:	43db      	mvns	r3, r3
 80005ee:	401a      	ands	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	68da      	ldr	r2, [r3, #12]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	79db      	ldrb	r3, [r3, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	431a      	orrs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d985      	bls.n	8000524 <GPIO_Init+0x1c>
    }
  }
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	371c      	adds	r7, #28
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	887a      	ldrh	r2, [r7, #2]
 8000636:	831a      	strh	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	887a      	ldrh	r2, [r7, #2]
 8000654:	835a      	strh	r2, [r3, #26]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz (only for STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <PWR_MainRegulatorModeConfig+0x34>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800067c:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8000686:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <PWR_MainRegulatorModeConfig+0x34>)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40007000 	.word	0x40007000

0800069c <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 80006a6:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <PWR_OverDriveCmd+0x1c>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	420e0040 	.word	0x420e0040

080006bc <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 80006c6:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <PWR_OverDriveSWCmd+0x1c>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	420e0044 	.word	0x420e0044

080006dc <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <PWR_GetFlagStatus+0x30>)
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4013      	ands	r3, r2
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80006f4:	2301      	movs	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40007000 	.word	0x40007000

08000710 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <RCC_DeInit+0x60>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <RCC_DeInit+0x60>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <RCC_DeInit+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <RCC_DeInit+0x60>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <RCC_DeInit+0x60>)
 800072c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000730:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000734:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <RCC_DeInit+0x60>)
 8000738:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <RCC_DeInit+0x64>)
 800073a:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <RCC_DeInit+0x60>)
 800073e:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <RCC_DeInit+0x68>)
 8000740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <RCC_DeInit+0x60>)
 8000746:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <RCC_DeInit+0x6c>)
 8000748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <RCC_DeInit+0x60>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <RCC_DeInit+0x60>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <RCC_DeInit+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800075e:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <RCC_DeInit+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40023800 	.word	0x40023800
 8000774:	24003010 	.word	0x24003010
 8000778:	20003000 	.word	0x20003000
 800077c:	24003000 	.word	0x24003000

08000780 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <RCC_HSEConfig+0x24>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <RCC_HSEConfig+0x24>)
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	7013      	strb	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023802 	.word	0x40023802

080007a8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80007ba:	2031      	movs	r0, #49	@ 0x31
 80007bc:	f000 f91e 	bl	80009fc <RCC_GetFlagStatus>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80007d0:	d002      	beq.n	80007d8 <RCC_WaitForHSEStartUp+0x30>
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f0      	beq.n	80007ba <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80007d8:	2031      	movs	r0, #49	@ 0x31
 80007da:	f000 f90f 	bl	80009fc <RCC_GetFlagStatus>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 80007e4:	2301      	movs	r3, #1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	e001      	b.n	80007ee <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 80007ea:	2300      	movs	r3, #0
 80007ec:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <RCC_HSICmd+0x1c>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	42470000 	.word	0x42470000

08000818 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000822:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <RCC_PLLCmd+0x1c>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	42470060 	.word	0x42470060

08000838 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <RCC_SYSCLKConfig+0x34>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f023 0303 	bic.w	r3, r3, #3
 8000850:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4313      	orrs	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800085a:	4a04      	ldr	r2, [pc, #16]	@ (800086c <RCC_SYSCLKConfig+0x34>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	6093      	str	r3, [r2, #8]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40023800 	.word	0x40023800

08000870 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <RCC_GetSYSCLKSource+0x1c>)
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 030c 	and.w	r3, r3, #12
 800087e:	b2db      	uxtb	r3, r3
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <RCC_HCLKConfig+0x34>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80008b2:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <RCC_HCLKConfig+0x34>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6093      	str	r3, [r2, #8]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40023800 	.word	0x40023800

080008c8 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <RCC_PCLK1Config+0x34>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80008e0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80008ea:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <RCC_PCLK1Config+0x34>)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6093      	str	r3, [r2, #8]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40023800 	.word	0x40023800

08000900 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <RCC_PCLK2Config+0x38>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000918:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4313      	orrs	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <RCC_PCLK2Config+0x38>)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6093      	str	r3, [r2, #8]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d006      	beq.n	800095c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000952:	4909      	ldr	r1, [pc, #36]	@ (8000978 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4313      	orrs	r3, r2
 8000958:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800095a:	e006      	b.n	800096a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <RCC_AHB1PeriphClockCmd+0x3c>)
 800095e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	43db      	mvns	r3, r3
 8000964:	4904      	ldr	r1, [pc, #16]	@ (8000978 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000966:	4013      	ands	r3, r2
 8000968:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d006      	beq.n	800099c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000992:	4909      	ldr	r1, [pc, #36]	@ (80009b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4313      	orrs	r3, r2
 8000998:	640b      	str	r3, [r1, #64]	@ 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800099a:	e006      	b.n	80009aa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <RCC_APB1PeriphClockCmd+0x3c>)
 800099e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	43db      	mvns	r3, r3
 80009a4:	4904      	ldr	r1, [pc, #16]	@ (80009b8 <RCC_APB1PeriphClockCmd+0x3c>)
 80009a6:	4013      	ands	r3, r2
 80009a8:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d006      	beq.n	80009dc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009d2:	4909      	ldr	r1, [pc, #36]	@ (80009f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	644b      	str	r3, [r1, #68]	@ 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80009da:	e006      	b.n	80009ea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	4904      	ldr	r1, [pc, #16]	@ (80009f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	644b      	str	r3, [r1, #68]	@ 0x44
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	095b      	lsrs	r3, r3, #5
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d103      	bne.n	8000a28 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <RCC_GetFlagStatus+0x70>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e009      	b.n	8000a3c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d103      	bne.n	8000a36 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <RCC_GetFlagStatus+0x70>)
 8000a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e002      	b.n	8000a3c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <RCC_GetFlagStatus+0x70>)
 8000a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a3a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 031f 	and.w	r3, r3, #31
 8000a42:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000a54:	2301      	movs	r3, #1
 8000a56:	74fb      	strb	r3, [r7, #19]
 8000a58:	e001      	b.n	8000a5e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000a5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40023800 	.word	0x40023800

08000a70 <RTC_GetITStatus>:
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
  *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <RTC_GetITStatus+0x70>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 16)));
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <RTC_GetITStatus+0x70>)
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	401a      	ands	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0bd9      	lsrs	r1, r3, #15
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	400b      	ands	r3, r1
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	0c19      	lsrs	r1, r3, #16
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <RTC_GetITStatus+0x70>)
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <RTC_GetITStatus+0x5c>
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <RTC_GetITStatus+0x5c>
  {
    bitstatus = SET;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	75fb      	strb	r3, [r7, #23]
 8000aca:	e001      	b.n	8000ad0 <RTC_GetITStatus+0x60>
  }
  else
  {
    bitstatus = RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40002800 	.word	0x40002800

08000ae4 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
  *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000afe:	43da      	mvns	r2, r3
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <RTC_ClearITPendingBit+0x38>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b08:	4904      	ldr	r1, [pc, #16]	@ (8000b1c <RTC_ClearITPendingBit+0x38>)
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60cb      	str	r3, [r1, #12]
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40002800 	.word	0x40002800

08000b20 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000b44:	4a16      	ldr	r2, [pc, #88]	@ (8000ba0 <SYSCFG_EXTILineConfig+0x80>)
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <SYSCFG_EXTILineConfig+0x80>)
 8000b58:	79b9      	ldrb	r1, [r7, #6]
 8000b5a:	0889      	lsrs	r1, r1, #2
 8000b5c:	b2c9      	uxtb	r1, r1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	1c8b      	adds	r3, r1, #2
 8000b62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000b66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <SYSCFG_EXTILineConfig+0x80>)
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	3302      	adds	r3, #2
 8000b70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b74:	79f9      	ldrb	r1, [r7, #7]
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <SYSCFG_EXTILineConfig+0x80>)
 8000b84:	79b9      	ldrb	r1, [r7, #6]
 8000b86:	0889      	lsrs	r1, r1, #2
 8000b88:	b2c9      	uxtb	r1, r1
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	1c8b      	adds	r3, r1, #2
 8000b8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40013800 	.word	0x40013800

08000ba4 <calc_func>:
                                , list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b089      	sub	sp, #36	@ 0x24
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  ee_s16 data_raisonance = *pdata;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	827b      	strh	r3, [r7, #18]
  ee_s16 retval;
  ee_u8 optype = (data_raisonance >> 7) & 1; /* bit 7 indicates if the function result has been cached */
 8000bb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bb8:	11db      	asrs	r3, r3, #7
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	747b      	strb	r3, [r7, #17]
  if (optype) /* if cached, use cache */
 8000bc4:	7c7b      	ldrb	r3, [r7, #17]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <calc_func+0x30>
    return (data_raisonance & 0x007f);
 8000bca:	8a7b      	ldrh	r3, [r7, #18]
 8000bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	e072      	b.n	8000cba <calc_func+0x116>
  else
  { /* otherwise calculate and cache the result */
    ee_s16 flag = data_raisonance & 0x7; /* bits 0-2 is type of function to perform */
 8000bd4:	8a7b      	ldrh	r3, [r7, #18]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	81fb      	strh	r3, [r7, #14]
    ee_s16 dtype = ((data_raisonance >> 3) & 0xf); /* bits 3-6 is specific data for the operation */
 8000bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000be0:	10db      	asrs	r3, r3, #3
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	82bb      	strh	r3, [r7, #20]
    dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 8000bea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	8abb      	ldrh	r3, [r7, #20]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	82bb      	strh	r3, [r7, #20]
    switch (flag)
 8000bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <calc_func+0x62>
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d023      	beq.n	8000c4c <calc_func+0xa8>
 8000c04:	e036      	b.n	8000c74 <calc_func+0xd0>
    {
      case 0:
        if (dtype < 0x22) /* set min period for bit corruption */
 8000c06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c0a:	2b21      	cmp	r3, #33	@ 0x21
 8000c0c:	dc01      	bgt.n	8000c12 <calc_func+0x6e>
          dtype = 0x22;
 8000c0e:	2322      	movs	r3, #34	@ 0x22
 8000c10:	82bb      	strh	r3, [r7, #20]
        retval = core_bench_state(res->size, res->memblock[3], res->seed1, res->seed2, dtype, res->crc);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	6998      	ldr	r0, [r3, #24]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	6959      	ldr	r1, [r3, #20]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	f001 fb4c 	bl	80022d0 <core_bench_state>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	82fb      	strh	r3, [r7, #22]
        if (res->crcstate == 0)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d11a      	bne.n	8000c7a <calc_func+0xd6>
          res->crcstate = retval;
 8000c44:	8afa      	ldrh	r2, [r7, #22]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        break;
 8000c4a:	e016      	b.n	8000c7a <calc_func+0xd6>
      case 1:
        retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8000c56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f000 ff5e 	bl	8001b1c <core_bench_matrix>
 8000c60:	4603      	mov	r3, r0
 8000c62:	82fb      	strh	r3, [r7, #22]
        if (res->crcmatrix == 0)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d108      	bne.n	8000c7e <calc_func+0xda>
          res->crcmatrix = retval;
 8000c6c:	8afa      	ldrh	r2, [r7, #22]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	879a      	strh	r2, [r3, #60]	@ 0x3c
        break;
 8000c72:	e004      	b.n	8000c7e <calc_func+0xda>
      default:
        retval = data_raisonance;
 8000c74:	8a7b      	ldrh	r3, [r7, #18]
 8000c76:	82fb      	strh	r3, [r7, #22]
        break;
 8000c78:	e002      	b.n	8000c80 <calc_func+0xdc>
        break;
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <calc_func+0xdc>
        break;
 8000c7e:	bf00      	nop
    }
    res->crc = crcu16(retval, res->crc);
 8000c80:	8afa      	ldrh	r2, [r7, #22]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000c86:	4619      	mov	r1, r3
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f001 fe41 	bl	8002910 <crcu16>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	871a      	strh	r2, [r3, #56]	@ 0x38
    retval &= 0x007f;
 8000c96:	8afb      	ldrh	r3, [r7, #22]
 8000c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c9c:	82fb      	strh	r3, [r7, #22]
    *pdata = (data_raisonance & 0xff00) | 0x0080 | retval; /* cache the result */
 8000c9e:	8a7b      	ldrh	r3, [r7, #18]
 8000ca0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	8afb      	ldrh	r3, [r7, #22]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	801a      	strh	r2, [r3, #0]
    return retval;
 8000cb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  }
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}

08000cc2 <cmp_complex>:
 Compare the data item in a list cell.

 Can be used by mergesort.
*/
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
  ee_s16 val1 = calc_func(&(a->data16), res);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff66 	bl	8000ba4 <calc_func>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	82fb      	strh	r3, [r7, #22]
  ee_s16 val2 = calc_func(&(b->data16), res);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5f 	bl	8000ba4 <calc_func>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	82bb      	strh	r3, [r7, #20]
  return val1 - val2;
 8000cea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000cee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cf2:	1ad3      	subs	r3, r2, r3
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <cmp_idx>:
 Compare the idx item in a list cell, and regen the data.

 Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  if (res == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d121      	bne.n	8000d52 <cmp_idx+0x56>
  {
    a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d14:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	801a      	strh	r2, [r3, #0]
    b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	801a      	strh	r2, [r3, #0]
  }
  return a->idx - b->idx;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d60:	1ad3      	subs	r3, r2, r3
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <copy_info>:

void copy_info(list_data *to, list_data *from)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  to->data16 = from->data16;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	801a      	strh	r2, [r3, #0]
  to->idx = from->idx;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	805a      	strh	r2, [r3, #2]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <core_bench_list>:
 - Operate on data from list (crc)
 - Single remove/reinsert
 * At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
  ee_u16 retval = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  ee_u16 found = 0, missed = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000dac:	2300      	movs	r3, #0
 8000dae:	847b      	strh	r3, [r7, #34]	@ 0x22
  list_head *list = res->list;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db4:	61fb      	str	r3, [r7, #28]
  ee_s16 find_num = res->seed3;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	889b      	ldrh	r3, [r3, #4]
 8000dba:	82bb      	strh	r3, [r7, #20]
  list_head *this_find;
  list_head *finder, *remover;
  list_data info;
  ee_s16 i;

  info.idx = finder_idx;
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	817b      	strh	r3, [r7, #10]
  /* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
  for (i = 0; i < find_num; i++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	82fb      	strh	r3, [r7, #22]
 8000dc4:	e05f      	b.n	8000e86 <core_bench_list+0xee>
  {
    info.data16 = (i & 0xff) ;
 8000dc6:	8afb      	ldrh	r3, [r7, #22]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	813b      	strh	r3, [r7, #8]
    this_find = core_list_find(list, &info);
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	69f8      	ldr	r0, [r7, #28]
 8000dd6:	f000 f9f3 	bl	80011c0 <core_list_find>
 8000dda:	60f8      	str	r0, [r7, #12]
    list = core_list_reverse(list);
 8000ddc:	69f8      	ldr	r0, [r7, #28]
 8000dde:	f000 fa23 	bl	8001228 <core_list_reverse>
 8000de2:	61f8      	str	r0, [r7, #28]
    if (this_find == NULL)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d111      	bne.n	8000e0e <core_bench_list+0x76>
    {
      missed++;
 8000dea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000dec:	3301      	adds	r3, #1
 8000dee:	847b      	strh	r3, [r7, #34]	@ 0x22
      retval += (list->next->info->data16 >> 8) & 1;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfa:	121b      	asrs	r3, r3, #8
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e08:	4413      	add	r3, r2
 8000e0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e0c:	e02a      	b.n	8000e64 <core_bench_list+0xcc>
    }
    else
    {
      found++;
 8000e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e10:	3301      	adds	r3, #1
 8000e12:	84bb      	strh	r3, [r7, #36]	@ 0x24
      if (this_find->info->data16 & 0x1) /* use found value */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00c      	beq.n	8000e40 <core_bench_list+0xa8>
        retval += (this_find->info->data16 >> 9) & 1;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2e:	125b      	asrs	r3, r3, #9
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e3c:	4413      	add	r3, r2
 8000e3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      /* and cache next item at the head of the list (if any) */
      if (this_find->next != NULL)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00d      	beq.n	8000e64 <core_bench_list+0xcc>
      {
        finder = this_find->next;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
        this_find->next = finder->next;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	601a      	str	r2, [r3, #0]
        finder->next = list->next;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	601a      	str	r2, [r3, #0]
        list->next = finder;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	601a      	str	r2, [r3, #0]
      }
    }
    if (info.idx >= 0)
 8000e64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db06      	blt.n	8000e7a <core_bench_list+0xe2>
      info.idx++;
 8000e6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < find_num; i++)
 8000e7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3301      	adds	r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	82fb      	strh	r3, [r7, #22]
 8000e86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	db99      	blt.n	8000dc6 <core_bench_list+0x2e>
#if CORE_DEBUG
    ee_printf("List find %d: [%d,%d,%d]\n", i, retval, missed, found);
#endif
  }
  retval += found * 4 - missed;
 8000e92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ea0:	4413      	add	r3, r2
 8000ea2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* sort the list by data content and remove one item*/
  if (finder_idx > 0)
 8000ea4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dd05      	ble.n	8000eb8 <core_bench_list+0x120>
    list = core_list_mergesort(list, cmp_complex, res);
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4928      	ldr	r1, [pc, #160]	@ (8000f50 <core_bench_list+0x1b8>)
 8000eb0:	69f8      	ldr	r0, [r7, #28]
 8000eb2:	f000 f9d4 	bl	800125e <core_list_mergesort>
 8000eb6:	61f8      	str	r0, [r7, #28]
  remover = core_list_remove(list->next);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f942 	bl	8001146 <core_list_remove>
 8000ec2:	6138      	str	r0, [r7, #16]
  /* CRC data content of list from location of index N forward, and then undo remove */
  finder = core_list_find(list, &info);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	69f8      	ldr	r0, [r7, #28]
 8000ecc:	f000 f978 	bl	80011c0 <core_list_find>
 8000ed0:	61b8      	str	r0, [r7, #24]
  if (!finder)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d111      	bne.n	8000efc <core_bench_list+0x164>
    finder = list->next;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
  while (finder)
 8000ede:	e00d      	b.n	8000efc <core_bench_list+0x164>
  {
    retval = crc16(list->info->data16, retval);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fd4e 	bl	800298e <crc16>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    finder = finder->next;
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	61bb      	str	r3, [r7, #24]
  while (finder)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1ee      	bne.n	8000ee0 <core_bench_list+0x148>
  }
#if CORE_DEBUG
  ee_printf("List sort 1: %04x\n", retval);
#endif
  remover = core_list_undo_remove(remover, list->next);
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	6938      	ldr	r0, [r7, #16]
 8000f0a:	f000 f93c 	bl	8001186 <core_list_undo_remove>
 8000f0e:	6138      	str	r0, [r7, #16]
  /* sort the list by index, in effect returning the list to original state */
  list = core_list_mergesort(list, cmp_idx, NULL);
 8000f10:	2200      	movs	r2, #0
 8000f12:	4910      	ldr	r1, [pc, #64]	@ (8000f54 <core_bench_list+0x1bc>)
 8000f14:	69f8      	ldr	r0, [r7, #28]
 8000f16:	f000 f9a2 	bl	800125e <core_list_mergesort>
 8000f1a:	61f8      	str	r0, [r7, #28]
  /* CRC data content of list */
  finder = list->next;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
  while (finder)
 8000f22:	e00d      	b.n	8000f40 <core_bench_list+0x1a8>
  {
    retval = crc16(list->info->data16, retval);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fd2c 	bl	800298e <crc16>
 8000f36:	4603      	mov	r3, r0
 8000f38:	84fb      	strh	r3, [r7, #38]	@ 0x26
    finder = finder->next;
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	61bb      	str	r3, [r7, #24]
  while (finder)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1ee      	bne.n	8000f24 <core_bench_list+0x18c>
  }
#if CORE_DEBUG
  ee_printf("List sort 2: %04x\n", retval);
#endif
  return retval;
 8000f46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08000cc3 	.word	0x08000cc3
 8000f54:	08000cfd 	.word	0x08000cfd

08000f58 <core_list_init>:
 Returns:
 Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b092      	sub	sp, #72	@ 0x48
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4613      	mov	r3, r2
 8000f64:	80fb      	strh	r3, [r7, #6]
  /* calculated pointers for the list */
  ee_u32 per_item = 16 + sizeof(struct list_data_s);
 8000f66:	2314      	movs	r3, #20
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
  ee_u32 size = (blksize / per_item) - 2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	3b02      	subs	r3, #2
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  list_head *memblock_end = memblock + size;
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  list_data *datablock = (list_data *)(memblock_end);
 8000f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f82:	61bb      	str	r3, [r7, #24]
  list_data *datablock_end = datablock + size;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* some useful variables */
  ee_u32 i;
  list_head *finder, *list = memblock;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  list_data info;

  /* create a fake items for the list head and tail */
  list->next = NULL;
 8000f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
  list->info = datablock;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	605a      	str	r2, [r3, #4]
  list->info->idx = 0x0000;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	805a      	strh	r2, [r3, #2]
  list->info->data16 = (ee_s16)0x8080;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f248 0280 	movw	r2, #32896	@ 0x8080
 8000fae:	801a      	strh	r2, [r3, #0]
  memblock++;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	60bb      	str	r3, [r7, #8]
  datablock++;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	61bb      	str	r3, [r7, #24]
  info.idx = 0x7fff;
 8000fbc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000fc0:	82fb      	strh	r3, [r7, #22]
  info.data16 = (ee_s16)0xffff;
 8000fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fc6:	82bb      	strh	r3, [r7, #20]
  core_list_insert_new(list, &info, &memblock, &datablock, memblock_end, datablock_end);
 8000fc8:	f107 0018 	add.w	r0, r7, #24
 8000fcc:	f107 0208 	add.w	r2, r7, #8
 8000fd0:	f107 0114 	add.w	r1, r7, #20
 8000fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fe0:	f000 f876 	bl	80010d0 <core_list_insert_new>

  /* then insert size items */
  for (i = 0; i < size; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fe8:	e02a      	b.n	8001040 <core_list_init+0xe8>
  {
    ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
 8000fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	843b      	strh	r3, [r7, #32]
    ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
 8000ffa:	8c3b      	ldrh	r3, [r7, #32]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001002:	b29b      	uxth	r3, r3
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	b29b      	uxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	83fb      	strh	r3, [r7, #30]
    info.data16 = (dat << 8) | dat;  /* fill the data with actual data and upper bits with rebuild value */
 800100e:	8bfb      	ldrh	r3, [r7, #30]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	82bb      	strh	r3, [r7, #20]
    core_list_insert_new(list, &info, &memblock, &datablock, memblock_end, datablock_end);
 800101e:	f107 0018 	add.w	r0, r7, #24
 8001022:	f107 0208 	add.w	r2, r7, #8
 8001026:	f107 0114 	add.w	r1, r7, #20
 800102a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4603      	mov	r3, r0
 8001034:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001036:	f000 f84b 	bl	80010d0 <core_list_insert_new>
  for (i = 0; i < size; i++)
 800103a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800103c:	3301      	adds	r3, #1
 800103e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001040:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001044:	429a      	cmp	r2, r3
 8001046:	d3d0      	bcc.n	8000fea <core_list_init+0x92>
  }
  /* and now index the list so we know initial seed order of the list */
  finder = list->next;
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	63bb      	str	r3, [r7, #56]	@ 0x38
  i = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while (finder->next != NULL)
 8001052:	e02a      	b.n	80010aa <core_list_init+0x152>
  {
    if (i < size / 5) /* first 20% of the list in order */
 8001054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001056:	4a1c      	ldr	r2, [pc, #112]	@ (80010c8 <core_list_init+0x170>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <core_list_init+0x11c>
      finder->info->idx = i++;
 8001064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800106a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800106c:	6852      	ldr	r2, [r2, #4]
 800106e:	b21b      	sxth	r3, r3
 8001070:	8053      	strh	r3, [r2, #2]
 8001072:	e017      	b.n	80010a4 <core_list_init+0x14c>
    else
    {
      ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 8001074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800107a:	b29a      	uxth	r2, r3
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	4053      	eors	r3, r2
 8001080:	847b      	strh	r3, [r7, #34]	@ 0x22
      finder->info->idx = 0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 8001082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001084:	b29b      	uxth	r3, r3
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b29b      	uxth	r3, r3
 800108a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800108e:	b29a      	uxth	r2, r3
 8001090:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001092:	4313      	orrs	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80010a0:	b212      	sxth	r2, r2
 80010a2:	805a      	strh	r2, [r3, #2]
    }
    finder = finder->next;
 80010a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (finder->next != NULL)
 80010aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1d0      	bne.n	8001054 <core_list_init+0xfc>
  }
  list = core_list_mergesort(list, cmp_idx, NULL);
 80010b2:	2200      	movs	r2, #0
 80010b4:	4905      	ldr	r1, [pc, #20]	@ (80010cc <core_list_init+0x174>)
 80010b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010b8:	f000 f8d1 	bl	800125e <core_list_mergesort>
 80010bc:	6278      	str	r0, [r7, #36]	@ 0x24
    ee_printf("[%04x,%04x]", finder->info->idx, (ee_u16)finder->info->data16);
    finder = finder->next;
  }
  ee_printf("\n");
#endif
  return list;
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3740      	adds	r7, #64	@ 0x40
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	cccccccd 	.word	0xcccccccd
 80010cc:	08000cfd 	.word	0x08000cfd

080010d0 <core_list_insert_new>:
 Returns:
 Pointer to new item.
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
                                , list_head *memblock_end, list_data *datablock_end)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
  list_head *newitem;

  if ((*memblock + 1) >= memblock_end)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3308      	adds	r3, #8
 80010e4:	6a3a      	ldr	r2, [r7, #32]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d801      	bhi.n	80010ee <core_list_insert_new+0x1e>
    return NULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e027      	b.n	800113e <core_list_insert_new+0x6e>
  if ((*datablock + 1) >= datablock_end)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3304      	adds	r3, #4
 80010f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d801      	bhi.n	80010fe <core_list_insert_new+0x2e>
    return NULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e01f      	b.n	800113e <core_list_insert_new+0x6e>

  newitem = *memblock;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	617b      	str	r3, [r7, #20]
  (*memblock)++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f103 0208 	add.w	r2, r3, #8
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
  newitem->next = insert_point->next;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	601a      	str	r2, [r3, #0]
  insert_point->next = newitem;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]

  newitem->info = *datablock;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	605a      	str	r2, [r3, #4]
  (*datablock)++;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	601a      	str	r2, [r3, #0]
  copy_info(newitem->info, info);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fe19 	bl	8000d6e <copy_info>

  return newitem;
 800113c:	697b      	ldr	r3, [r7, #20]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <core_list_remove>:

 Returns:
 Removed item.
*/
list_head *core_list_remove(list_head *item)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  list_data *tmp;
  list_head *ret = item->next;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]
  /* swap data pointers */
  tmp = item->info;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	60bb      	str	r3, [r7, #8]
  item->info = ret->info;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
  ret->info = tmp;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	605a      	str	r2, [r3, #4]
  /* and eliminate item */
  item->next = item->next->next;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
  ret->next = NULL;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
  return ret;
 8001178:	68fb      	ldr	r3, [r7, #12]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <core_list_undo_remove>:
 Returns:
 The item that was linked back to the list.

*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
  list_data *tmp;
  /* swap data pointers */
  tmp = item_removed->info;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	60fb      	str	r3, [r7, #12]
  item_removed->info = item_modified->info;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]
  item_modified->info = tmp;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	605a      	str	r2, [r3, #4]
  /* and insert item */
  item_removed->next = item_modified->next;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	601a      	str	r2, [r3, #0]
  item_modified->next = item_removed;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
  return item_removed;
 80011b2:	687b      	ldr	r3, [r7, #4]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <core_list_find>:

 Returns:
 Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list, list_data *info)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  if (info->idx >= 0)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db14      	blt.n	80011fe <core_list_find+0x3e>
  {
    while (list && (list->info->idx != info->idx))
 80011d4:	e002      	b.n	80011dc <core_list_find+0x1c>
      list = list->next;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	607b      	str	r3, [r7, #4]
    while (list && (list->info->idx != info->idx))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d008      	beq.n	80011f4 <core_list_find+0x34>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d1f0      	bne.n	80011d6 <core_list_find+0x16>
    return list;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	e011      	b.n	800121c <core_list_find+0x5c>
  }
  else
  {
    while (list && ((list->info->data16 & 0xff) != info->data16))
      list = list->next;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	607b      	str	r3, [r7, #4]
    while (list && ((list->info->data16 & 0xff) != info->data16))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00a      	beq.n	800121a <core_list_find+0x5a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	b29b      	uxth	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001216:	4293      	cmp	r3, r2
 8001218:	d1ee      	bne.n	80011f8 <core_list_find+0x38>
    return list;
 800121a:	687b      	ldr	r3, [r7, #4]
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <core_list_reverse>:
 Returns:
 Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  list_head *next = NULL, *tmp;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  while (list)
 8001234:	e009      	b.n	800124a <core_list_reverse+0x22>
  {
    tmp = list->next;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60bb      	str	r3, [r7, #8]
    list->next = next;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	601a      	str	r2, [r3, #0]
    next = list;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]
    list = tmp;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	607b      	str	r3, [r7, #4]
  while (list)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f2      	bne.n	8001236 <core_list_reverse+0xe>
  }
  return next;
 8001250:	68fb      	ldr	r3, [r7, #12]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <core_list_mergesort>:
 We have a special header for the list that will always be first,
 but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b08e      	sub	sp, #56	@ 0x38
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  list_head *p, *q, *e, *tail;
  ee_s32 insize, nmerges, psize, qsize, i;

  insize = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24

  while (1)
  {
    p = list;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34
    list = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
    tail = NULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28

    nmerges = 0;  /* count number of merges we do in this pass */
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]

    while (p)
 800127e:	e06a      	b.n	8001356 <core_list_mergesort+0xf8>
    {
      nmerges++;  /* there exists a merge to be done */
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	3301      	adds	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
      /* step `insize' places along from p */
      q = p;
 8001286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001288:	633b      	str	r3, [r7, #48]	@ 0x30
      psize = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
      for (i = 0; i < insize; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e00b      	b.n	80012ac <core_list_mergesort+0x4e>
      {
        psize++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
        q = q->next;
 800129a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
        if (!q) break;
 80012a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <core_list_mergesort+0x58>
      for (i = 0; i < insize; i++)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbef      	blt.n	8001294 <core_list_mergesort+0x36>
 80012b4:	e000      	b.n	80012b8 <core_list_mergesort+0x5a>
        if (!q) break;
 80012b6:	bf00      	nop
      }

      /* if q hasn't fallen off end, we have two lists to merge */
      qsize = insize;
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	61bb      	str	r3, [r7, #24]

      /* now we have two lists; merge them */
      while (psize > 0 || (qsize > 0 && q))
 80012bc:	e040      	b.n	8001340 <core_list_mergesort+0xe2>
      {

        /* decide whether next element of merge comes from p or q */
        if (psize == 0)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <core_list_mergesort+0x78>
        {
          /* p is empty; e must come from q. */
          e = q;
 80012c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          q = q->next;
 80012c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	633b      	str	r3, [r7, #48]	@ 0x30
          qsize--;
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	e029      	b.n	800132a <core_list_mergesort+0xcc>
        }
        else if (qsize == 0 || !q)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <core_list_mergesort+0x84>
 80012dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <core_list_mergesort+0x96>
        {
          /* q is empty; e must come from p. */
          e = p;
 80012e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          p = p->next;
 80012e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
          psize--;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e01a      	b.n	800132a <core_list_mergesort+0xcc>
        }
        else if (cmp(p->info, q->info, res) <= 0)
 80012f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f6:	6858      	ldr	r0, [r3, #4]
 80012f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4798      	blx	r3
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	dc08      	bgt.n	800131a <core_list_mergesort+0xbc>
        {
          /* First element of p is lower (or same); e must come from p. */
          e = p;
 8001308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          p = p->next;
 800130c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	637b      	str	r3, [r7, #52]	@ 0x34
          psize--;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b01      	subs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e007      	b.n	800132a <core_list_mergesort+0xcc>
        }
        else
        {
          /* First element of q is lower; e must come from q. */
          e = q;
 800131a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          q = q->next;
 800131e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
          qsize--;
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3b01      	subs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
        }

        /* add the next element to the merged list */
        if (tail)
 800132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <core_list_mergesort+0xda>
        {
          tail->next = e;
 8001330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e001      	b.n	800133c <core_list_mergesort+0xde>
        }
        else
        {
          list = e;
 8001338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133a:	60fb      	str	r3, [r7, #12]
        }
        tail = e;
 800133c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (psize > 0 || (qsize > 0 && q))
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dcbb      	bgt.n	80012be <core_list_mergesort+0x60>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd02      	ble.n	8001352 <core_list_mergesort+0xf4>
 800134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1b5      	bne.n	80012be <core_list_mergesort+0x60>
      }

      /* now p has stepped `insize' places along, and q has too */
      p = q;
 8001352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
    while (p)
 8001356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001358:	2b00      	cmp	r3, #0
 800135a:	d191      	bne.n	8001280 <core_list_mergesort+0x22>
    }

    tail->next = NULL;
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]

    /* If we have done only one merge, we're finished. */
    if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	2b01      	cmp	r3, #1
 8001366:	dc01      	bgt.n	800136c <core_list_mergesort+0x10e>
      return list;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	e003      	b.n	8001374 <core_list_mergesort+0x116>

    /* Otherwise repeat, merging lists twice the size */
    insize *= 2;
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    p = list;
 8001372:	e77c      	b.n	800126e <core_list_mergesort+0x10>
  }
#if COMPILER_REQUIRES_SORT_RETURN
  return list;
#endif
}
 8001374:	4618      	mov	r0, r3
 8001376:	3738      	adds	r7, #56	@ 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <iterate>:
static ee_u16 state_known_crc[]  =
  {
    (ee_u16)0x5e47, (ee_u16)0x39bf, (ee_u16)0xe5a4, (ee_u16)0x8e3a, (ee_u16)0x8d84
  };
void *iterate(void *pres)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  ee_u32 i;
  ee_u16 crc;
  core_results *res = (core_results *)pres;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	613b      	str	r3, [r7, #16]
  ee_u32 iterations = res->iterations;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	60fb      	str	r3, [r7, #12]
  res->crc = 0;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2200      	movs	r2, #0
 8001392:	871a      	strh	r2, [r3, #56]	@ 0x38
  res->crclist = 0;
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2200      	movs	r2, #0
 8001398:	875a      	strh	r2, [r3, #58]	@ 0x3a
  res->crcmatrix = 0;
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2200      	movs	r2, #0
 800139e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  res->crcstate = 0;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2200      	movs	r2, #0
 80013a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  for (i = 0; i < iterations; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e02c      	b.n	8001406 <iterate+0x8a>
  {
    crc = core_bench_list(res, 1);
 80013ac:	2101      	movs	r1, #1
 80013ae:	6938      	ldr	r0, [r7, #16]
 80013b0:	f7ff fcf2 	bl	8000d98 <core_bench_list>
 80013b4:	4603      	mov	r3, r0
 80013b6:	817b      	strh	r3, [r7, #10]
    res->crc = crcu16(crc, res->crc);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80013bc:	897b      	ldrh	r3, [r7, #10]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 faa5 	bl	8002910 <crcu16>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	871a      	strh	r2, [r3, #56]	@ 0x38
    crc = core_bench_list(res, -1);
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	6938      	ldr	r0, [r7, #16]
 80013d4:	f7ff fce0 	bl	8000d98 <core_bench_list>
 80013d8:	4603      	mov	r3, r0
 80013da:	817b      	strh	r3, [r7, #10]
    res->crc = crcu16(crc, res->crc);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80013e0:	897b      	ldrh	r3, [r7, #10]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fa93 	bl	8002910 <crcu16>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	871a      	strh	r2, [r3, #56]	@ 0x38
    if (i == 0) res->crclist = res->crc;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <iterate+0x84>
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	875a      	strh	r2, [r3, #58]	@ 0x3a
  for (i = 0; i < iterations; i++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	429a      	cmp	r2, r3
 800140c:	d3ce      	bcc.n	80013ac <iterate+0x30>
  }
  return NULL;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <main_core>:

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE main_core(void)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b09c      	sub	sp, #112	@ 0x70
 800141c:	af00      	add	r7, sp, #0
  int argc = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	64fb      	str	r3, [r7, #76]	@ 0x4c
  char *argv[1];
#else
MAIN_RETURN_TYPE main_core(int argc, char *argv[])
{
#endif
  ee_u16 i, j = 0, num_algorithms = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001428:	2300      	movs	r3, #0
 800142a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  ee_s16 known_id = -1, total_errors = 0;
 800142e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001432:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8001436:	2300      	movs	r3, #0
 8001438:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
  ee_u16 seedcrc = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
  ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
  /* first call any initializations needed */
  portable_init(&(results[0].port), &argc, argv);
 8001442:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001446:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	3342      	adds	r3, #66	@ 0x42
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fef0 	bl	8002234 <portable_init>
  if (sizeof(struct list_head_s) > 128)
  {
    ee_printf("list_head structure too big for comparable data!\n");
    return MAIN_RETURN_VAL;
  }
  results[0].seed1 = get_seed(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f001 f9d3 	bl	8002800 <get_seed_32>
 800145a:	4603      	mov	r3, r0
 800145c:	b21b      	sxth	r3, r3
 800145e:	80bb      	strh	r3, [r7, #4]
  results[0].seed2 = get_seed(2);
 8001460:	2002      	movs	r0, #2
 8001462:	f001 f9cd 	bl	8002800 <get_seed_32>
 8001466:	4603      	mov	r3, r0
 8001468:	b21b      	sxth	r3, r3
 800146a:	80fb      	strh	r3, [r7, #6]
  results[0].seed3 = get_seed(3);
 800146c:	2003      	movs	r0, #3
 800146e:	f001 f9c7 	bl	8002800 <get_seed_32>
 8001472:	4603      	mov	r3, r0
 8001474:	b21b      	sxth	r3, r3
 8001476:	813b      	strh	r3, [r7, #8]
  results[0].iterations = get_seed_32(4);
 8001478:	2004      	movs	r0, #4
 800147a:	f001 f9c1 	bl	8002800 <get_seed_32>
 800147e:	4603      	mov	r3, r0
 8001480:	623b      	str	r3, [r7, #32]
#if CORE_DEBUG
  results[0].iterations = 1;
#endif
  results[0].execs = get_seed_32(5);
 8001482:	2005      	movs	r0, #5
 8001484:	f001 f9bc 	bl	8002800 <get_seed_32>
 8001488:	4603      	mov	r3, r0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (results[0].execs == 0)
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <main_core+0x7e>
  { /* if not supplied, execute all algorithms */
    results[0].execs = ALL_ALGORITHMS_MASK;
 8001492:	2307      	movs	r3, #7
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  /* put in some default values based on one seed only for easy testing */
  if ((results[0].seed1 == 0) && (results[0].seed2 == 0) && (results[0].seed3 == 0))
 8001496:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <main_core+0xa2>
 800149e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <main_core+0xa2>
 80014a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <main_core+0xa2>
  { /* validation run */
    results[0].seed1 = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	80bb      	strh	r3, [r7, #4]
    results[0].seed2 = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	80fb      	strh	r3, [r7, #6]
    results[0].seed3 = 0x66;
 80014b6:	2366      	movs	r3, #102	@ 0x66
 80014b8:	813b      	strh	r3, [r7, #8]
  }
  if ((results[0].seed1 == 1) && (results[0].seed2 == 0) && (results[0].seed3 == 0))
 80014ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d10f      	bne.n	80014e2 <main_core+0xca>
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10b      	bne.n	80014e2 <main_core+0xca>
 80014ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d107      	bne.n	80014e2 <main_core+0xca>
  { /* perfromance run */
    results[0].seed1 = 0x3415;
 80014d2:	f243 4315 	movw	r3, #13333	@ 0x3415
 80014d6:	80bb      	strh	r3, [r7, #4]
    results[0].seed2 = 0x3415;
 80014d8:	f243 4315 	movw	r3, #13333	@ 0x3415
 80014dc:	80fb      	strh	r3, [r7, #6]
    results[0].seed3 = 0x66;
 80014de:	2366      	movs	r3, #102	@ 0x66
 80014e0:	813b      	strh	r3, [r7, #8]
  }
#if (MEM_METHOD==MEM_STATIC)
  results[0].memblock[0] = (void *)static_memblk;
 80014e2:	4b9d      	ldr	r3, [pc, #628]	@ (8001758 <main_core+0x340>)
 80014e4:	60fb      	str	r3, [r7, #12]
  results[0].size = TOTAL_DATA_SIZE;
 80014e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014ea:	61fb      	str	r3, [r7, #28]
  results[0].err = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
#else
#error "Please define a way to initialize a memory block."
#endif
  /* Data init */
  /* Find out how space much we have based on number of algorithms */
  for (i = 0; i < 32; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80014f8:	e013      	b.n	8001522 <main_core+0x10a>
  {
    if ((1 << i) & results[0].execs)
 80014fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80014fe:	2201      	movs	r2, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	461a      	mov	r2, r3
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <main_core+0x100>
      num_algorithms++;
 800150e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001512:	3301      	adds	r3, #1
 8001514:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  for (i = 0; i < 32; i++)
 8001518:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800151c:	3301      	adds	r3, #1
 800151e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001522:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001526:	2b1f      	cmp	r3, #31
 8001528:	d9e7      	bls.n	80014fa <main_core+0xe2>
  }
  for (i = 0 ; i < MULTITHREAD; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001530:	e01c      	b.n	800156c <main_core+0x154>
    results[i].size = results[i].size / num_algorithms;
 8001532:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001536:	4613      	mov	r3, r2
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	3370      	adds	r3, #112	@ 0x70
 8001540:	443b      	add	r3, r7
 8001542:	3b54      	subs	r3, #84	@ 0x54
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800154a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800154e:	fbb1 f1f3 	udiv	r1, r1, r3
 8001552:	4613      	mov	r3, r2
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	3370      	adds	r3, #112	@ 0x70
 800155c:	443b      	add	r3, r7
 800155e:	3b54      	subs	r3, #84	@ 0x54
 8001560:	6019      	str	r1, [r3, #0]
  for (i = 0 ; i < MULTITHREAD; i++)
 8001562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001566:	3301      	adds	r3, #1
 8001568:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800156c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0de      	beq.n	8001532 <main_core+0x11a>
  /* Assign pointers */
  for (i = 0; i < 32; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800157a:	e039      	b.n	80015f0 <main_core+0x1d8>
  {
    ee_u32 ctx;
    if ((1 << i) & results[0].execs)
 800157c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001580:	2201      	movs	r2, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	461a      	mov	r2, r3
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d02a      	beq.n	80015e6 <main_core+0x1ce>
    {
      for (ctx = 0 ; ctx < MULTITHREAD; ctx++)
 8001590:	2300      	movs	r3, #0
 8001592:	663b      	str	r3, [r7, #96]	@ 0x60
 8001594:	e01f      	b.n	80015d6 <main_core+0x1be>
        results[ctx].memblock[i+1] = (char *)(results[ctx].memblock[0]) + results[0].size * j;
 8001596:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001598:	4613      	mov	r3, r2
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	3370      	adds	r3, #112	@ 0x70
 80015a2:	443b      	add	r3, r7
 80015a4:	3b64      	subs	r3, #100	@ 0x64
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f8b7 106c 	ldrh.w	r1, [r7, #108]	@ 0x6c
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	f8b7 106e 	ldrh.w	r1, [r7, #110]	@ 0x6e
 80015b6:	1c48      	adds	r0, r1, #1
 80015b8:	18d1      	adds	r1, r2, r3
 80015ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015bc:	4613      	mov	r3, r2
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	4403      	add	r3, r0
 80015c4:	3302      	adds	r3, #2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	3370      	adds	r3, #112	@ 0x70
 80015ca:	443b      	add	r3, r7
 80015cc:	f843 1c6c 	str.w	r1, [r3, #-108]
      for (ctx = 0 ; ctx < MULTITHREAD; ctx++)
 80015d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015d2:	3301      	adds	r3, #1
 80015d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80015d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0dc      	beq.n	8001596 <main_core+0x17e>
      j++;
 80015dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80015e0:	3301      	adds	r3, #1
 80015e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  for (i = 0; i < 32; i++)
 80015e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80015ea:	3301      	adds	r3, #1
 80015ec:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80015f0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80015f4:	2b1f      	cmp	r3, #31
 80015f6:	d9c1      	bls.n	800157c <main_core+0x164>
    }
  }
  /* call inits */
  for (i = 0 ; i < MULTITHREAD; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80015fe:	e09d      	b.n	800173c <main_core+0x324>
  {
    if (results[i].execs & ID_LIST)
 8001600:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001604:	4613      	mov	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	3370      	adds	r3, #112	@ 0x70
 800160e:	443b      	add	r3, r7
 8001610:	3b4c      	subs	r3, #76	@ 0x4c
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d023      	beq.n	8001664 <main_core+0x24c>
    {
      results[i].list = core_list_init(results[0].size, results[i].memblock[1], results[i].seed1);
 800161c:	69f8      	ldr	r0, [r7, #28]
 800161e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001622:	4613      	mov	r3, r2
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	3370      	adds	r3, #112	@ 0x70
 800162c:	443b      	add	r3, r7
 800162e:	3b60      	subs	r3, #96	@ 0x60
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001636:	4613      	mov	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	3370      	adds	r3, #112	@ 0x70
 8001640:	443b      	add	r3, r7
 8001642:	3b6c      	subs	r3, #108	@ 0x6c
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	f8b7 406e 	ldrh.w	r4, [r7, #110]	@ 0x6e
 800164c:	461a      	mov	r2, r3
 800164e:	f7ff fc83 	bl	8000f58 <core_list_init>
 8001652:	4602      	mov	r2, r0
 8001654:	4623      	mov	r3, r4
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4423      	add	r3, r4
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	3370      	adds	r3, #112	@ 0x70
 800165e:	443b      	add	r3, r7
 8001660:	3b48      	subs	r3, #72	@ 0x48
 8001662:	601a      	str	r2, [r3, #0]
    }
    if (results[i].execs & ID_MATRIX)
 8001664:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001668:	4613      	mov	r3, r2
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	3370      	adds	r3, #112	@ 0x70
 8001672:	443b      	add	r3, r7
 8001674:	3b4c      	subs	r3, #76	@ 0x4c
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d031      	beq.n	80016e4 <main_core+0x2cc>
    {
      core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
 8001680:	69f8      	ldr	r0, [r7, #28]
 8001682:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001686:	4613      	mov	r3, r2
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	3370      	adds	r3, #112	@ 0x70
 8001690:	443b      	add	r3, r7
 8001692:	3b5c      	subs	r3, #92	@ 0x5c
 8001694:	681c      	ldr	r4, [r3, #0]
 8001696:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	3370      	adds	r3, #112	@ 0x70
 80016a4:	443b      	add	r3, r7
 80016a6:	3b6c      	subs	r3, #108	@ 0x6c
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	3370      	adds	r3, #112	@ 0x70
 80016bc:	443b      	add	r3, r7
 80016be:	3b6a      	subs	r3, #106	@ 0x6a
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	ea41 0503 	orr.w	r5, r1, r3
 80016ca:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80016ce:	1d39      	adds	r1, r7, #4
 80016d0:	4613      	mov	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	3328      	adds	r3, #40	@ 0x28
 80016da:	440b      	add	r3, r1
 80016dc:	462a      	mov	r2, r5
 80016de:	4621      	mov	r1, r4
 80016e0:	f000 fac7 	bl	8001c72 <core_init_matrix>
    }
    if (results[i].execs & ID_STATE)
 80016e4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80016e8:	4613      	mov	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	3370      	adds	r3, #112	@ 0x70
 80016f2:	443b      	add	r3, r7
 80016f4:	3b4c      	subs	r3, #76	@ 0x4c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d018      	beq.n	8001732 <main_core+0x31a>
    {
      core_init_state(results[0].size, results[i].seed1, results[i].memblock[3]);
 8001700:	69f8      	ldr	r0, [r7, #28]
 8001702:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001706:	4613      	mov	r3, r2
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	3370      	adds	r3, #112	@ 0x70
 8001710:	443b      	add	r3, r7
 8001712:	3b6c      	subs	r3, #108	@ 0x6c
 8001714:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001718:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	3370      	adds	r3, #112	@ 0x70
 8001726:	443b      	add	r3, r7
 8001728:	3b58      	subs	r3, #88	@ 0x58
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	f000 fe95 	bl	800245c <core_init_state>
  for (i = 0 ; i < MULTITHREAD; i++)
 8001732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001736:	3301      	adds	r3, #1
 8001738:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800173c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001740:	2b00      	cmp	r3, #0
 8001742:	f43f af5d 	beq.w	8001600 <main_core+0x1e8>
    }
  }

  /* automatically determine number of iterations if not set */
  if (results[0].iterations == 0)
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d12f      	bne.n	80017ac <main_core+0x394>
  {
    secs_ret secs_passed = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    ee_u32 divisor;
    results[0].iterations = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
    while (secs_passed < (secs_ret)1)
 8001754:	e017      	b.n	8001786 <main_core+0x36e>
 8001756:	bf00      	nop
 8001758:	20000098 	.word	0x20000098
    {
      results[0].iterations *= 10;
 800175c:	6a3a      	ldr	r2, [r7, #32]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	623b      	str	r3, [r7, #32]
      start_time();
 8001768:	f000 fd02 	bl	8002170 <start_time>
      iterate(&results[0]);
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fe04 	bl	800137c <iterate>
      stop_time();
 8001774:	f000 fd18 	bl	80021a8 <stop_time>
      secs_passed = time_in_secs(get_time());
 8001778:	f000 fd34 	bl	80021e4 <get_time>
 800177c:	4603      	mov	r3, r0
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fd44 	bl	800220c <time_in_secs>
 8001784:	65f8      	str	r0, [r7, #92]	@ 0x5c
    while (secs_passed < (secs_ret)1)
 8001786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0e7      	beq.n	800175c <main_core+0x344>
    }
    /* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
    divisor = (ee_u32)secs_passed;
 800178c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800178e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (divisor == 0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
 8001790:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <main_core+0x382>
      divisor = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	65bb      	str	r3, [r7, #88]	@ 0x58
    results[0].iterations *= 1 + 10 / divisor;
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	210a      	movs	r1, #10
 800179e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017a0:	fbb1 f2f2 	udiv	r2, r1, r2
 80017a4:	3201      	adds	r2, #1
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	623b      	str	r3, [r7, #32]
  }
  /* perform actual benchmark */
  start_time();
 80017ac:	f000 fce0 	bl	8002170 <start_time>
  {
    void *retval;
    core_stop_parallel(&results[i]);
  }
#else
  iterate(&results[0]);
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fde2 	bl	800137c <iterate>
#endif
  stop_time();
 80017b8:	f000 fcf6 	bl	80021a8 <stop_time>
  total_time = get_time();
 80017bc:	f000 fd12 	bl	80021e4 <get_time>
 80017c0:	6538      	str	r0, [r7, #80]	@ 0x50
  /* get a function of the input to report */
  seedcrc = crc16(results[0].seed1, seedcrc);
 80017c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017c6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 f8de 	bl	800298e <crc16>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  seedcrc = crc16(results[0].seed2, seedcrc);
 80017d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017dc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 f8d3 	bl	800298e <crc16>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  seedcrc = crc16(results[0].seed3, seedcrc);
 80017ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017f2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 f8c8 	bl	800298e <crc16>
 80017fe:	4603      	mov	r3, r0
 8001800:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  seedcrc = crc16(results[0].size, seedcrc);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	b21b      	sxth	r3, r3
 8001808:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f001 f8bd 	bl	800298e <crc16>
 8001814:	4603      	mov	r3, r0
 8001816:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

  switch (seedcrc)
 800181a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800181e:	f64e 12f5 	movw	r2, #59893	@ 0xe9f5
 8001822:	4293      	cmp	r3, r2
 8001824:	d028      	beq.n	8001878 <main_core+0x460>
 8001826:	f64e 12f5 	movw	r2, #59893	@ 0xe9f5
 800182a:	4293      	cmp	r3, r2
 800182c:	dc2c      	bgt.n	8001888 <main_core+0x470>
 800182e:	f648 2202 	movw	r2, #35330	@ 0x8a02
 8001832:	4293      	cmp	r3, r2
 8001834:	d014      	beq.n	8001860 <main_core+0x448>
 8001836:	f648 2202 	movw	r2, #35330	@ 0x8a02
 800183a:	4293      	cmp	r3, r2
 800183c:	dc24      	bgt.n	8001888 <main_core+0x470>
 800183e:	f647 3205 	movw	r2, #31493	@ 0x7b05
 8001842:	4293      	cmp	r3, r2
 8001844:	d010      	beq.n	8001868 <main_core+0x450>
 8001846:	f647 3205 	movw	r2, #31493	@ 0x7b05
 800184a:	4293      	cmp	r3, r2
 800184c:	dc1c      	bgt.n	8001888 <main_core+0x470>
 800184e:	f641 02f2 	movw	r2, #6386	@ 0x18f2
 8001852:	4293      	cmp	r3, r2
 8001854:	d014      	beq.n	8001880 <main_core+0x468>
 8001856:	f644 62af 	movw	r2, #20143	@ 0x4eaf
 800185a:	4293      	cmp	r3, r2
 800185c:	d008      	beq.n	8001870 <main_core+0x458>
 800185e:	e013      	b.n	8001888 <main_core+0x470>
  { /* test known output for common seeds */
    case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
      known_id = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
      ee_printf("6k performance run parameters for coremark.\n");
      break;
 8001866:	e014      	b.n	8001892 <main_core+0x47a>
    case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
      known_id = 1;
 8001868:	2301      	movs	r3, #1
 800186a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
      ee_printf("6k validation run parameters for coremark.\n");
      break;
 800186e:	e010      	b.n	8001892 <main_core+0x47a>
    case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
      known_id = 2;
 8001870:	2302      	movs	r3, #2
 8001872:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
      ee_printf("Profile generation run parameters for coremark.\n");
      break;
 8001876:	e00c      	b.n	8001892 <main_core+0x47a>
    case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
      known_id = 3;
 8001878:	2303      	movs	r3, #3
 800187a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
      ee_printf("2K performance run parameters for coremark.\n");
      break;
 800187e:	e008      	b.n	8001892 <main_core+0x47a>
    case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
      known_id = 4;
 8001880:	2304      	movs	r3, #4
 8001882:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
      ee_printf("2K validation run parameters for coremark.\n");
      break;
 8001886:	e004      	b.n	8001892 <main_core+0x47a>
    default:
      total_errors = -1;
 8001888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800188c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
      break;
 8001890:	bf00      	nop
  }
  if (known_id >= 0)
 8001892:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001896:	2b00      	cmp	r3, #0
 8001898:	f2c0 80d2 	blt.w	8001a40 <main_core+0x628>
  {
    for (i = 0 ; i < default_num_contexts; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80018a2:	e0c6      	b.n	8001a32 <main_core+0x61a>
    {
      results[i].err = 0;
 80018a4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	3370      	adds	r3, #112	@ 0x70
 80018b2:	443b      	add	r3, r7
 80018b4:	3b2c      	subs	r3, #44	@ 0x2c
 80018b6:	2200      	movs	r2, #0
 80018b8:	801a      	strh	r2, [r3, #0]
      if ((results[i].execs & ID_LIST) &&
 80018ba:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	3370      	adds	r3, #112	@ 0x70
 80018c8:	443b      	add	r3, r7
 80018ca:	3b4c      	subs	r3, #76	@ 0x4c
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d028      	beq.n	8001928 <main_core+0x510>
          (results[i].crclist != list_known_crc[known_id]))
 80018d6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	3370      	adds	r3, #112	@ 0x70
 80018e4:	443b      	add	r3, r7
 80018e6:	3b32      	subs	r3, #50	@ 0x32
 80018e8:	881a      	ldrh	r2, [r3, #0]
 80018ea:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 80018ee:	4987      	ldr	r1, [pc, #540]	@ (8001b0c <main_core+0x6f4>)
 80018f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      if ((results[i].execs & ID_LIST) &&
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d017      	beq.n	8001928 <main_core+0x510>
      {
        ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n", i, results[i].crclist, list_known_crc[known_id]);
        results[i].err++;
 80018f8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	3370      	adds	r3, #112	@ 0x70
 8001906:	443b      	add	r3, r7
 8001908:	3b2c      	subs	r3, #44	@ 0x2c
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	b29b      	uxth	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	b219      	sxth	r1, r3
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	3370      	adds	r3, #112	@ 0x70
 8001920:	443b      	add	r3, r7
 8001922:	3b2c      	subs	r3, #44	@ 0x2c
 8001924:	460a      	mov	r2, r1
 8001926:	801a      	strh	r2, [r3, #0]
      }
      if ((results[i].execs & ID_MATRIX) &&
 8001928:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800192c:	4613      	mov	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	3370      	adds	r3, #112	@ 0x70
 8001936:	443b      	add	r3, r7
 8001938:	3b4c      	subs	r3, #76	@ 0x4c
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d028      	beq.n	8001996 <main_core+0x57e>
          (results[i].crcmatrix != matrix_known_crc[known_id]))
 8001944:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	3370      	adds	r3, #112	@ 0x70
 8001952:	443b      	add	r3, r7
 8001954:	3b30      	subs	r3, #48	@ 0x30
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 800195c:	496c      	ldr	r1, [pc, #432]	@ (8001b10 <main_core+0x6f8>)
 800195e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      if ((results[i].execs & ID_MATRIX) &&
 8001962:	429a      	cmp	r2, r3
 8001964:	d017      	beq.n	8001996 <main_core+0x57e>
      {
        ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n", i, results[i].crcmatrix, matrix_known_crc[known_id]);
        results[i].err++;
 8001966:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800196a:	4613      	mov	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	3370      	adds	r3, #112	@ 0x70
 8001974:	443b      	add	r3, r7
 8001976:	3b2c      	subs	r3, #44	@ 0x2c
 8001978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197c:	b29b      	uxth	r3, r3
 800197e:	3301      	adds	r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	b219      	sxth	r1, r3
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	3370      	adds	r3, #112	@ 0x70
 800198e:	443b      	add	r3, r7
 8001990:	3b2c      	subs	r3, #44	@ 0x2c
 8001992:	460a      	mov	r2, r1
 8001994:	801a      	strh	r2, [r3, #0]
      }
      if ((results[i].execs & ID_STATE) &&
 8001996:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800199a:	4613      	mov	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	3370      	adds	r3, #112	@ 0x70
 80019a4:	443b      	add	r3, r7
 80019a6:	3b4c      	subs	r3, #76	@ 0x4c
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d028      	beq.n	8001a04 <main_core+0x5ec>
          (results[i].crcstate != state_known_crc[known_id]))
 80019b2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80019b6:	4613      	mov	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	3370      	adds	r3, #112	@ 0x70
 80019c0:	443b      	add	r3, r7
 80019c2:	3b2e      	subs	r3, #46	@ 0x2e
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 80019ca:	4952      	ldr	r1, [pc, #328]	@ (8001b14 <main_core+0x6fc>)
 80019cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      if ((results[i].execs & ID_STATE) &&
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d017      	beq.n	8001a04 <main_core+0x5ec>
      {
        ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n", i, results[i].crcstate, state_known_crc[known_id]);
        results[i].err++;
 80019d4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	3370      	adds	r3, #112	@ 0x70
 80019e2:	443b      	add	r3, r7
 80019e4:	3b2c      	subs	r3, #44	@ 0x2c
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b219      	sxth	r1, r3
 80019f2:	4613      	mov	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	3370      	adds	r3, #112	@ 0x70
 80019fc:	443b      	add	r3, r7
 80019fe:	3b2c      	subs	r3, #44	@ 0x2c
 8001a00:	460a      	mov	r2, r1
 8001a02:	801a      	strh	r2, [r3, #0]
      }
      total_errors += results[i].err;
 8001a04:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	3370      	adds	r3, #112	@ 0x70
 8001a12:	443b      	add	r3, r7
 8001a14:	3b2c      	subs	r3, #44	@ 0x2c
 8001a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    for (i = 0 ; i < default_num_contexts; i++)
 8001a28:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001a32:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001a36:	4b38      	ldr	r3, [pc, #224]	@ (8001b18 <main_core+0x700>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	f4ff af32 	bcc.w	80018a4 <main_core+0x48c>
  ee_printf("Total time (secs): %f\n", time_in_secs(total_time));
  if (time_in_secs(total_time) > 0)
    ee_printf("Iterations/Sec   : %f\n", default_num_contexts*results[0].iterations / time_in_secs(total_time));
#else
  ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
  if (time_in_secs(total_time) > 0)
 8001a40:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001a42:	f000 fbe3 	bl	800220c <time_in_secs>
    ee_printf("Iterations/Sec   : %d\n", default_num_contexts*results[0].iterations / time_in_secs(total_time));
#endif
  if (time_in_secs(total_time) < 10)
 8001a46:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001a48:	f000 fbe0 	bl	800220c <time_in_secs>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	d806      	bhi.n	8001a60 <main_core+0x648>
  {
    ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
    total_errors++;
 8001a52:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
  ee_printf("Parallel %s : %d\n", PARALLEL_METHOD, default_num_contexts);
#endif
  ee_printf("Memory location  : %s\n", MEM_LOCATION);
  /* output for verification */
  ee_printf("seedcrc          : 0x%04x\n", seedcrc);
  if (results[0].execs & ID_LIST)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <main_core+0x670>
    for (i = 0 ; i < default_num_contexts; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001a70:	e004      	b.n	8001a7c <main_core+0x664>
 8001a72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001a76:	3301      	adds	r3, #1
 8001a78:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001a7c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <main_core+0x700>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3f4      	bcc.n	8001a72 <main_core+0x65a>
      ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
  if (results[0].execs & ID_MATRIX)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00e      	beq.n	8001ab0 <main_core+0x698>
    for (i = 0 ; i < default_num_contexts; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001a98:	e004      	b.n	8001aa4 <main_core+0x68c>
 8001a9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001aa4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <main_core+0x700>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3f4      	bcc.n	8001a9a <main_core+0x682>
      ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
  if (results[0].execs & ID_STATE)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00e      	beq.n	8001ad8 <main_core+0x6c0>
    for (i = 0 ; i < default_num_contexts; i++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001ac0:	e004      	b.n	8001acc <main_core+0x6b4>
 8001ac2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001acc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <main_core+0x700>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3f4      	bcc.n	8001ac2 <main_core+0x6aa>
      ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
  for (i = 0 ; i < default_num_contexts; i++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001ade:	e004      	b.n	8001aea <main_core+0x6d2>
 8001ae0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001aea:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <main_core+0x700>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3f4      	bcc.n	8001ae0 <main_core+0x6c8>
#if (MEM_METHOD==MEM_MALLOC)
  for (i = 0 ; i < MULTITHREAD; i++)
    portable_free(results[i].memblock[0]);
#endif
  /* And last call any target specific code for finalizing */
  portable_fini(&(results[0].port));
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	3342      	adds	r3, #66	@ 0x42
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fba9 	bl	8002252 <portable_fini>

  return MAIN_RETURN_VAL;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3770      	adds	r7, #112	@ 0x70
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	20000018 	.word	0x20000018
 8001b18:	20000038 	.word	0x20000038

08001b1c <core_bench_matrix>:

 Iterate <matrix_test> N times,
 changing the matrix values slightly by a constant amount each time.
*/
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	803b      	strh	r3, [r7, #0]
  ee_u32 N = p->N;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61fb      	str	r3, [r7, #28]
  MATRES *C = p->C;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	61bb      	str	r3, [r7, #24]
  MATDAT *A = p->A;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	617b      	str	r3, [r7, #20]
  MATDAT *B = p->B;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	613b      	str	r3, [r7, #16]
  MATDAT val = (MATDAT)seed;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	81fb      	strh	r3, [r7, #14]

  crc = crc16(matrix_test(N, C, A, B, val), crc);
 8001b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	69f8      	ldr	r0, [r7, #28]
 8001b56:	f000 f80e 	bl	8001b76 <matrix_test>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	883b      	ldrh	r3, [r7, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f000 ff13 	bl	800298e <crc16>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	803b      	strh	r3, [r7, #0]

  return crc;
 8001b6c:	883b      	ldrh	r3, [r7, #0]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <matrix_test>:
 5 - Add a constant value to all elements of a matrix.

 After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
  ee_u16 crc = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	82fb      	strh	r3, [r7, #22]
  MATDAT clipval = matrix_big(val);
 8001b88:	8c3b      	ldrh	r3, [r7, #32]
 8001b8a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001b8e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001b92:	82bb      	strh	r3, [r7, #20]

  matrix_add_const(N, A, val); /* make sure data changes  */
 8001b94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f98d 	bl	8001ebc <matrix_add_const>
#if CORE_DEBUG
  printmat(A, N, "matrix_add_const");
#endif
  matrix_mul_const(N, C, A, val);
 8001ba2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f94a 	bl	8001e44 <matrix_mul_const>
  crc = crc16(matrix_sum(N, C, clipval), crc);
 8001bb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f8ef 	bl	8001d9c <matrix_sum>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	8afb      	ldrh	r3, [r7, #22]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 fee1 	bl	800298e <crc16>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
  printmatC(C, N, "matrix_mul_const");
#endif
  matrix_mul_vect(N, C, A, B);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f9ac 	bl	8001f34 <matrix_mul_vect>
  crc = crc16(matrix_sum(N, C, clipval), crc);
 8001bdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001be0:	461a      	mov	r2, r3
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f8d9 	bl	8001d9c <matrix_sum>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f000 fecb 	bl	800298e <crc16>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
  printmatC(C, N, "matrix_mul_vect");
#endif
  matrix_mul_matrix(N, C, A, B);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f9dd 	bl	8001fc2 <matrix_mul_matrix>
  crc = crc16(matrix_sum(N, C, clipval), crc);
 8001c08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f8c3 	bl	8001d9c <matrix_sum>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	8afb      	ldrh	r3, [r7, #22]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f000 feb5 	bl	800298e <crc16>
 8001c24:	4603      	mov	r3, r0
 8001c26:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
  printmatC(C, N, "matrix_mul_matrix");
#endif
  matrix_mul_matrix_bitextract(N, C, A, B);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fa2c 	bl	800208c <matrix_mul_matrix_bitextract>
  crc = crc16(matrix_sum(N, C, clipval), crc);
 8001c34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f8ad 	bl	8001d9c <matrix_sum>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	8afb      	ldrh	r3, [r7, #22]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 fe9f 	bl	800298e <crc16>
 8001c50:	4603      	mov	r3, r0
 8001c52:	82fb      	strh	r3, [r7, #22]
#if CORE_DEBUG
  printmatC(C, N, "matrix_mul_matrix_bitextract");
#endif

  matrix_add_const(N, A, -val); /* return matrix to initial value */
 8001c54:	8c3b      	ldrh	r3, [r7, #32]
 8001c56:	425b      	negs	r3, r3
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f92b 	bl	8001ebc <matrix_add_const>
  return crc;
 8001c66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <core_init_matrix>:

 Note:
 The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b08d      	sub	sp, #52	@ 0x34
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	603b      	str	r3, [r7, #0]
  ee_u32 N = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
  MATDAT *A;
  MATDAT *B;
  ee_s32 order = 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MATDAT val;
  ee_u32 i = 0, j = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seed == 0)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <core_init_matrix+0x3a>
    seed = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	607b      	str	r3, [r7, #4]
  while (j < blksize)
 8001c9a:	e007      	b.n	8001cac <core_init_matrix+0x3a>
  {
    i++;
 8001c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    j = i * i * 2 * 4;
 8001ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca4:	fb03 f303 	mul.w	r3, r3, r3
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (j < blksize)
 8001cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3f3      	bcc.n	8001c9c <core_init_matrix+0x2a>
  }
  N = i - 1;
 8001cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]
  A = (MATDAT *)align_mem(memblk);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	61fb      	str	r3, [r7, #28]
  B = A + N * N;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	fb03 f303 	mul.w	r3, r3, r3
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

  for (i = 0; i < N; i++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd8:	e03f      	b.n	8001d5a <core_init_matrix+0xe8>
  {
    for (j = 0; j < N; j++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cde:	e035      	b.n	8001d4c <core_init_matrix+0xda>
    {
      seed = ( ( order * seed ) % 65536 );
 8001ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	425a      	negs	r2, r3
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b292      	uxth	r2, r2
 8001cee:	bf58      	it	pl
 8001cf0:	4253      	negpl	r3, r2
 8001cf2:	607b      	str	r3, [r7, #4]
      val = (seed + order);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	82fb      	strh	r3, [r7, #22]
      val = matrix_clip(val, 0);
      B[i*N+j] = val;
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	6a3a      	ldr	r2, [r7, #32]
 8001d06:	fb03 f202 	mul.w	r2, r3, r2
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	4413      	add	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4413      	add	r3, r2
 8001d14:	8afa      	ldrh	r2, [r7, #22]
 8001d16:	801a      	strh	r2, [r3, #0]
      val =  (val + order);
 8001d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	8afb      	ldrh	r3, [r7, #22]
 8001d1e:	4413      	add	r3, r2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	82fb      	strh	r3, [r7, #22]
      val = matrix_clip(val, 1);
 8001d24:	8afb      	ldrh	r3, [r7, #22]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	82fb      	strh	r3, [r7, #22]
      A[i*N+j] = val;
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	fb03 f202 	mul.w	r2, r3, r2
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	4413      	add	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	8afa      	ldrh	r2, [r7, #22]
 8001d3e:	801a      	strh	r2, [r3, #0]
      order++;
 8001d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d42:	3301      	adds	r3, #1
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (j = 0; j < N; j++)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3c5      	bcc.n	8001ce0 <core_init_matrix+0x6e>
  for (i = 0; i < N; i++)
 8001d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d56:	3301      	adds	r3, #1
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d3bb      	bcc.n	8001cda <core_init_matrix+0x68>
    }
  }

  p->A = A;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	605a      	str	r2, [r3, #4]
  p->B = B;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]
  p->C = (MATRES *)align_mem(B + N * N);
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	fb03 f303 	mul.w	r3, r3, r3
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f023 0303 	bic.w	r3, r3, #3
 8001d80:	3304      	adds	r3, #4
 8001d82:	461a      	mov	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	60da      	str	r2, [r3, #12]
  p->N = N;
 8001d88:	6a3a      	ldr	r2, [r7, #32]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
#if CORE_DEBUG
  printmat(A, N, "A");
  printmat(B, N, "B");
#endif
  return N;
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3734      	adds	r7, #52	@ 0x34
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <matrix_sum>:
 add 1 to the result if the element is bigger then the previous.

 Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	@ 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80fb      	strh	r3, [r7, #6]
  MATRES tmp = 0, prev = 0, cur = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  ee_s16 ret = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	83fb      	strh	r3, [r7, #30]
  ee_u32 i, j;
  for (i = 0; i < N; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e035      	b.n	8001e2c <matrix_sum+0x90>
  {
    for (j = 0; j < N; j++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e02b      	b.n	8001e1e <matrix_sum+0x82>
    {
      cur = C[i*N+j];
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	fb03 f202 	mul.w	r2, r3, r2
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
      tmp += cur;
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
      if (tmp > clipval)
 8001de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dd06      	ble.n	8001dfc <matrix_sum+0x60>
      {
        ret += 10;
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	330a      	adds	r3, #10
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	83fb      	strh	r3, [r7, #30]
        tmp = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfa:	e00b      	b.n	8001e14 <matrix_sum+0x78>
      }
      else
      {
        ret += (cur > prev) ? 1 : 0;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	bfcc      	ite	gt
 8001e04:	2301      	movgt	r3, #1
 8001e06:	2300      	movle	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	8bfb      	ldrh	r3, [r7, #30]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	83fb      	strh	r3, [r7, #30]
      }
      prev = cur;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	623b      	str	r3, [r7, #32]
    for (j = 0; j < N; j++)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3cf      	bcc.n	8001dc6 <matrix_sum+0x2a>
  for (i = 0; i < N; i++)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3c5      	bcc.n	8001dc0 <matrix_sum+0x24>
    }
  }
  return ret;
 8001e34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	372c      	adds	r7, #44	@ 0x2c
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <matrix_mul_const>:
/* Function: matrix_mul_const
 Multiply a matrix by a constant.
 This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	807b      	strh	r3, [r7, #2]
  ee_u32 i, j;
  for (i = 0; i < N; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e026      	b.n	8001ea6 <matrix_mul_const+0x62>
  {
    for (j = 0; j < N; j++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e01c      	b.n	8001e98 <matrix_mul_const+0x54>
    {
      C[i*N+j] = (MATRES)A[i*N+j] * (MATRES)val;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	fb03 f202 	mul.w	r2, r3, r2
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	fb03 f101 	mul.w	r1, r3, r1
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	440b      	add	r3, r1
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	fb00 f202 	mul.w	r2, r0, r2
 8001e90:	601a      	str	r2, [r3, #0]
    for (j = 0; j < N; j++)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3301      	adds	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3de      	bcc.n	8001e5e <matrix_mul_const+0x1a>
  for (i = 0; i < N; i++)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3d4      	bcc.n	8001e58 <matrix_mul_const+0x14>
    }
  }
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <matrix_add_const>:

/* Function: matrix_add_const
 Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  ee_u32 i, j;
  for (i = 0; i < N; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e026      	b.n	8001f1e <matrix_add_const+0x62>
  {
    for (j = 0; j < N; j++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e01c      	b.n	8001f10 <matrix_add_const+0x54>
    {
      A[i*N+j] += val;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	fb03 f202 	mul.w	r2, r3, r2
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b299      	uxth	r1, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	fb03 f202 	mul.w	r2, r3, r2
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4413      	add	r3, r2
 8001f06:	b20a      	sxth	r2, r1
 8001f08:	801a      	strh	r2, [r3, #0]
    for (j = 0; j < N; j++)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3de      	bcc.n	8001ed6 <matrix_add_const+0x1a>
  for (i = 0; i < N; i++)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d3d4      	bcc.n	8001ed0 <matrix_add_const+0x14>
    }
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <matrix_mul_vect>:
/* Function: matrix_mul_vect
 Multiply a matrix by a vector.
 This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  ee_u32 i, j;
  for (i = 0; i < N; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e031      	b.n	8001fac <matrix_mul_vect+0x78>
  {
    C[i] = 0;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	4413      	add	r3, r2
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    for (j = 0; j < N; j++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e021      	b.n	8001f9e <matrix_mul_vect+0x6a>
    {
      C[i] += (MATRES)A[i*N+j] * (MATRES)B[j];
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4413      	add	r3, r2
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	fb03 f202 	mul.w	r2, r3, r2
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	fb03 f200 	mul.w	r2, r3, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	68b8      	ldr	r0, [r7, #8]
 8001f92:	4403      	add	r3, r0
 8001f94:	440a      	add	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
    for (j = 0; j < N; j++)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3d9      	bcc.n	8001f5a <matrix_mul_vect+0x26>
  for (i = 0; i < N; i++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3c9      	bcc.n	8001f48 <matrix_mul_vect+0x14>
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <matrix_mul_matrix>:
/* Function: matrix_mul_matrix
 Multiply a matrix by a matrix.
 Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b089      	sub	sp, #36	@ 0x24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
  ee_u32 i, j, k;
  for (i = 0; i < N; i++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	e04f      	b.n	8002076 <matrix_mul_matrix+0xb4>
  {
    for (j = 0; j < N; j++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	e045      	b.n	8002068 <matrix_mul_matrix+0xa6>
    {
      C[i*N+j] = 0;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	fb03 f202 	mul.w	r2, r3, r2
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	4413      	add	r3, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
      for (k = 0;k < N;k++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e030      	b.n	800205a <matrix_mul_matrix+0x98>
      {
        C[i*N+j] += (MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	fb03 f202 	mul.w	r2, r3, r2
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	4413      	add	r3, r2
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	fb03 f202 	mul.w	r2, r3, r2
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	4618      	mov	r0, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	fb03 f202 	mul.w	r2, r3, r2
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	fb03 f200 	mul.w	r2, r3, r0
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	fb03 f000 	mul.w	r0, r3, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4403      	add	r3, r0
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	68b8      	ldr	r0, [r7, #8]
 800204e:	4403      	add	r3, r0
 8002050:	440a      	add	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
      for (k = 0;k < N;k++)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3ca      	bcc.n	8001ff8 <matrix_mul_matrix+0x36>
    for (j = 0; j < N; j++)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	3301      	adds	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3b5      	bcc.n	8001fdc <matrix_mul_matrix+0x1a>
  for (i = 0; i < N; i++)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3301      	adds	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3ab      	bcc.n	8001fd6 <matrix_mul_matrix+0x14>
      }
    }
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3724      	adds	r7, #36	@ 0x24
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <matrix_mul_matrix_bitextract>:
/* Function: matrix_mul_matrix_bitextract
 Multiply a matrix by a matrix, and extract some bits from the result.
 Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  ee_u32 i, j, k;
  for (i = 0; i < N; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e05c      	b.n	800215a <matrix_mul_matrix_bitextract+0xce>
  {
    for (j = 0; j < N; j++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	e052      	b.n	800214c <matrix_mul_matrix_bitextract+0xc0>
    {
      C[i*N+j] = 0;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	fb03 f202 	mul.w	r2, r3, r2
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4413      	add	r3, r2
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
      for (k = 0;k < N;k++)
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e03d      	b.n	800213e <matrix_mul_matrix_bitextract+0xb2>
      {
        MATRES tmp = (MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	fb03 f202 	mul.w	r2, r3, r2
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4413      	add	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d8:	4619      	mov	r1, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	fb03 f202 	mul.w	r2, r3, r2
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	613b      	str	r3, [r7, #16]
        C[i*N+j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	fb03 f202 	mul.w	r2, r3, r2
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	109b      	asrs	r3, r3, #2
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	1152      	asrs	r2, r2, #5
 8002118:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	4419      	add	r1, r3
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	fb03 f202 	mul.w	r2, r3, r2
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	4413      	add	r3, r2
 8002134:	460a      	mov	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
      for (k = 0;k < N;k++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3bd      	bcc.n	80020c2 <matrix_mul_matrix_bitextract+0x36>
    for (j = 0; j < N; j++)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	3301      	adds	r3, #1
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3a8      	bcc.n	80020a6 <matrix_mul_matrix_bitextract+0x1a>
  for (i = 0; i < N; i++)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3301      	adds	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	429a      	cmp	r2, r3
 8002160:	d39e      	bcc.n	80020a0 <matrix_mul_matrix_bitextract+0x14>
      }
    }
  }
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	3724      	adds	r7, #36	@ 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <start_time>:

 Implementation may be capturing a system timer (as implemented in the example code)
 or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  Begin_Time = 0;
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <start_time+0x2c>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
  start_time_val  = 0;
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <start_time+0x30>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

  /* Enable the TIM Counter */
  TIM5->CR1 |= TIM_CR1_CEN;
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <start_time+0x34>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <start_time+0x34>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	b29b      	uxth	r3, r3
 800218e:	8013      	strh	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000868 	.word	0x20000868
 80021a0:	2000087c 	.word	0x2000087c
 80021a4:	40000c00 	.word	0x40000c00

080021a8 <stop_time>:

 Implementation may be capturing a system timer (as implemented in the example code)
 or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  stop_time_val = TIM5->CNT;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <stop_time+0x30>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <stop_time+0x34>)
 80021b2:	6013      	str	r3, [r2, #0]
  /* Disable the TIM Counter */
  TIM5->CR1 &= ~TIM_CR1_CEN;
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <stop_time+0x30>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <stop_time+0x30>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	8013      	strh	r3, [r2, #0]

  End_Time = stop_time_val;
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <stop_time+0x34>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <stop_time+0x38>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	20000880 	.word	0x20000880
 80021e0:	2000086c 	.word	0x2000086c

080021e4 <get_time>:
 This methodology is taken to accomodate any hardware or simulated platform.
 The sample implementation returns millisecs by default,
 and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  CORE_TICKS elapsed = (CORE_TICKS)((stop_time_val - start_time_val));
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <get_time+0x20>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <get_time+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	607b      	str	r3, [r7, #4]
  return elapsed;
 80021f6:	687b      	ldr	r3, [r7, #4]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	20000880 	.word	0x20000880
 8002208:	2000087c 	.word	0x2000087c

0800220c <time_in_secs>:

 The <secs_ret> type is used to accomodate systems with no support for floating point.
 Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a06      	ldr	r2, [pc, #24]	@ (8002230 <time_in_secs+0x24>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9b      	lsrs	r3, r3, #18
 800221e:	60fb      	str	r3, [r7, #12]
  return retval;
 8002220:	68fb      	ldr	r3, [r7, #12]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	431bde83 	.word	0x431bde83

08002234 <portable_init>:
/* Function : portable_init
 Target specific initialization code
 Test for some common mistakes.
*/
void portable_init(core_portable *p, int *argc, char *argv[])
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  }
  if (sizeof(ee_u32) != 4)
  {
    ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
  }
  p->portable_id = 1;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <portable_fini>:

/* Function : portable_fini
 Target specific final code
*/
void portable_fini(core_portable *p)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  p->portable_id = 0;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <SystemInit+0x58>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	4a13      	ldr	r2, [pc, #76]	@ (80022c4 <SystemInit+0x58>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <SystemInit+0x5c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a10      	ldr	r2, [pc, #64]	@ (80022c8 <SystemInit+0x5c>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <SystemInit+0x5c>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <SystemInit+0x5c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0c      	ldr	r2, [pc, #48]	@ (80022c8 <SystemInit+0x5c>)
 8002298:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800229c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <SystemInit+0x5c>)
 80022a4:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <SystemInit+0x60>)
 80022a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <SystemInit+0x5c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a06      	ldr	r2, [pc, #24]	@ (80022c8 <SystemInit+0x5c>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022b4:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <SystemInit+0x5c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]

}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	24003010 	.word	0x24003010

080022d0 <core_bench_state>:

 Go over the input twice, once direct, and once after introducing some corruption.
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock,
                        ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b098      	sub	sp, #96	@ 0x60
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	460b      	mov	r3, r1
 80022e0:	80fb      	strh	r3, [r7, #6]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80bb      	strh	r3, [r7, #4]
  ee_u32 final_counts[NUM_CORE_STATES];
  ee_u32 track_counts[NUM_CORE_STATES];
  ee_u8 *p = memblock;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	617b      	str	r3, [r7, #20]


#if CORE_DEBUG
  ee_printf("State Bench: %d,%d,%d,%04x\n", seed1, seed2, step, crc);
#endif
  for (i = 0; i < NUM_CORE_STATES; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022ee:	e015      	b.n	800231c <core_bench_state+0x4c>
  {
    final_counts[i] = track_counts[i] = 0;
 80022f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	3360      	adds	r3, #96	@ 0x60
 80022f6:	443b      	add	r3, r7
 80022f8:	2200      	movs	r2, #0
 80022fa:	f843 2c48 	str.w	r2, [r3, #-72]
 80022fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3360      	adds	r3, #96	@ 0x60
 8002304:	443b      	add	r3, r7
 8002306:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800230a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3360      	adds	r3, #96	@ 0x60
 8002310:	443b      	add	r3, r7
 8002312:	f843 2c28 	str.w	r2, [r3, #-40]
  for (i = 0; i < NUM_CORE_STATES; i++)
 8002316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002318:	3301      	adds	r3, #1
 800231a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800231c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800231e:	2b07      	cmp	r3, #7
 8002320:	d9e6      	bls.n	80022f0 <core_bench_state+0x20>
  }
  /* run the state machine over the input */
  while (*p != 0)
 8002322:	e017      	b.n	8002354 <core_bench_state+0x84>
  {
    enum CORE_STATE fstate = core_state_transition(&p, track_counts);
 8002324:	f107 0218 	add.w	r2, r7, #24
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f964 	bl	80025fc <core_state_transition>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
    final_counts[fstate]++;
 800233a:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800233e:	0093      	lsls	r3, r2, #2
 8002340:	3360      	adds	r3, #96	@ 0x60
 8002342:	443b      	add	r3, r7
 8002344:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002348:	1c59      	adds	r1, r3, #1
 800234a:	0093      	lsls	r3, r2, #2
 800234c:	3360      	adds	r3, #96	@ 0x60
 800234e:	443b      	add	r3, r7
 8002350:	f843 1c28 	str.w	r1, [r3, #-40]
  while (*p != 0)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e3      	bne.n	8002324 <core_bench_state+0x54>
  }
  ee_printf("\n");
#else
  }
#endif
  p = memblock;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	617b      	str	r3, [r7, #20]
  while (p < (memblock + blksize))
 8002360:	e010      	b.n	8002384 <core_bench_state+0xb4>
  { /* insert some corruption */
    if (*p != ',')
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b2c      	cmp	r3, #44	@ 0x2c
 8002368:	d007      	beq.n	800237a <core_bench_state+0xaa>
      *p ^= (ee_u8)seed1;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	7819      	ldrb	r1, [r3, #0]
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	404a      	eors	r2, r1
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]
    p += step;
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8002380:	4413      	add	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
  while (p < (memblock + blksize))
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	441a      	add	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8e8      	bhi.n	8002362 <core_bench_state+0x92>
  }
  p = memblock;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	617b      	str	r3, [r7, #20]
  /* run the state machine over the input again */
  while (*p != 0)
 8002394:	e017      	b.n	80023c6 <core_bench_state+0xf6>
  {
    enum CORE_STATE fstate = core_state_transition(&p, track_counts);
 8002396:	f107 0218 	add.w	r2, r7, #24
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f92b 	bl	80025fc <core_state_transition>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    final_counts[fstate]++;
 80023ac:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80023b0:	0093      	lsls	r3, r2, #2
 80023b2:	3360      	adds	r3, #96	@ 0x60
 80023b4:	443b      	add	r3, r7
 80023b6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	0093      	lsls	r3, r2, #2
 80023be:	3360      	adds	r3, #96	@ 0x60
 80023c0:	443b      	add	r3, r7
 80023c2:	f843 1c28 	str.w	r1, [r3, #-40]
  while (*p != 0)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e3      	bne.n	8002396 <core_bench_state+0xc6>
  }
  ee_printf("\n");
#else
  }
#endif
  p = memblock;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	617b      	str	r3, [r7, #20]
  while (p < (memblock + blksize))
 80023d2:	e010      	b.n	80023f6 <core_bench_state+0x126>
  { /* undo corruption is seed1 and seed2 are equal */
    if (*p != ',')
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80023da:	d007      	beq.n	80023ec <core_bench_state+0x11c>
      *p ^= (ee_u8)seed2;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	7819      	ldrb	r1, [r3, #0]
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	404a      	eors	r2, r1
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]
    p += step;
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  while (p < (memblock + blksize))
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	441a      	add	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d8e8      	bhi.n	80023d4 <core_bench_state+0x104>
  }
  /* end timing */
  for (i = 0; i < NUM_CORE_STATES; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002406:	e020      	b.n	800244a <core_bench_state+0x17a>
  {
    crc = crcu32(final_counts[i], crc);
 8002408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	3360      	adds	r3, #96	@ 0x60
 800240e:	443b      	add	r3, r7
 8002410:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002414:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fa99 	bl	8002952 <crcu32>
 8002420:	4603      	mov	r3, r0
 8002422:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    crc = crcu32(track_counts[i], crc);
 8002426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3360      	adds	r3, #96	@ 0x60
 800242c:	443b      	add	r3, r7
 800242e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002432:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa8a 	bl	8002952 <crcu32>
 800243e:	4603      	mov	r3, r0
 8002440:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  for (i = 0; i < NUM_CORE_STATES; i++)
 8002444:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002446:	3301      	adds	r3, #1
 8002448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800244a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800244c:	2b07      	cmp	r3, #7
 800244e:	d9db      	bls.n	8002408 <core_bench_state+0x138>
  }
  return crc;
 8002450:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
}
 8002454:	4618      	mov	r0, r3
 8002456:	3760      	adds	r7, #96	@ 0x60
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <core_init_state>:

 Note:
 The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	@ 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	460b      	mov	r3, r1
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	817b      	strh	r3, [r7, #10]
  ee_u32 total = 0, next = 0, i;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  ee_u8 *buf = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
#if CORE_DEBUG
  ee_u8 *start = p;
  ee_printf("State: %d,%d\n", size, seed);
#endif
  size--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3b01      	subs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
  next = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
  while ((total + next + 1) < size)
 8002480:	e079      	b.n	8002576 <core_init_state+0x11a>
  {
    if (next > 0)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01f      	beq.n	80024c8 <core_init_state+0x6c>
    {
      for (i = 0;i < next;i++)
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e00c      	b.n	80024a8 <core_init_state+0x4c>
        *(p + total + i) = buf[i];
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	441a      	add	r2, r3
 8002494:	69f9      	ldr	r1, [r7, #28]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	440b      	add	r3, r1
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	440b      	add	r3, r1
 800249e:	7812      	ldrb	r2, [r2, #0]
 80024a0:	701a      	strb	r2, [r3, #0]
      for (i = 0;i < next;i++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d3ee      	bcc.n	800248e <core_init_state+0x32>
      *(p + total + i) = ',';
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4413      	add	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	222c      	movs	r2, #44	@ 0x2c
 80024bc:	701a      	strb	r2, [r3, #0]
      total += next + 1;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
    }
    seed++;
 80024c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	817b      	strh	r3, [r7, #10]
    switch (seed & 0x7)
 80024d4:	897b      	ldrh	r3, [r7, #10]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	2b07      	cmp	r3, #7
 80024dc:	d84a      	bhi.n	8002574 <core_init_state+0x118>
 80024de:	a201      	add	r2, pc, #4	@ (adr r2, 80024e4 <core_init_state+0x88>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	08002505 	.word	0x08002505
 80024e8:	08002505 	.word	0x08002505
 80024ec:	08002505 	.word	0x08002505
 80024f0:	08002521 	.word	0x08002521
 80024f4:	08002521 	.word	0x08002521
 80024f8:	0800253d 	.word	0x0800253d
 80024fc:	0800253d 	.word	0x0800253d
 8002500:	08002559 	.word	0x08002559
    {
      case 0: /* int */
      case 1: /* int */
      case 2: /* int */
        buf = intpat[(seed>>3) & 0x3];
 8002504:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002508:	10db      	asrs	r3, r3, #3
 800250a:	b21b      	sxth	r3, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	4a28      	ldr	r2, [pc, #160]	@ (80025b4 <core_init_state+0x158>)
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	613b      	str	r3, [r7, #16]
        next = 4;
 800251a:	2304      	movs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
        break;
 800251e:	e02a      	b.n	8002576 <core_init_state+0x11a>
      case 3: /* float */
      case 4: /* float */
        buf = floatpat[(seed>>3) & 0x3];
 8002520:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002524:	10db      	asrs	r3, r3, #3
 8002526:	b21b      	sxth	r3, r3
 8002528:	b29b      	uxth	r3, r3
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	4a22      	ldr	r2, [pc, #136]	@ (80025b8 <core_init_state+0x15c>)
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	613b      	str	r3, [r7, #16]
        next = 8;
 8002536:	2308      	movs	r3, #8
 8002538:	61bb      	str	r3, [r7, #24]
        break;
 800253a:	e01c      	b.n	8002576 <core_init_state+0x11a>
      case 5: /* scientific */
      case 6: /* scientific */
        buf = scipat[(seed>>3) & 0x3];
 800253c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002540:	10db      	asrs	r3, r3, #3
 8002542:	b21b      	sxth	r3, r3
 8002544:	b29b      	uxth	r3, r3
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <core_init_state+0x160>)
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	613b      	str	r3, [r7, #16]
        next = 8;
 8002552:	2308      	movs	r3, #8
 8002554:	61bb      	str	r3, [r7, #24]
        break;
 8002556:	e00e      	b.n	8002576 <core_init_state+0x11a>
      case 7: /* invalid */
        buf = errpat[(seed>>3) & 0x3];
 8002558:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800255c:	10db      	asrs	r3, r3, #3
 800255e:	b21b      	sxth	r3, r3
 8002560:	b29b      	uxth	r3, r3
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <core_init_state+0x164>)
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	613b      	str	r3, [r7, #16]
        next = 8;
 800256e:	2308      	movs	r3, #8
 8002570:	61bb      	str	r3, [r7, #24]
        break;
 8002572:	e000      	b.n	8002576 <core_init_state+0x11a>
      default: /* Never happen, just to make some compilers happy */
        break;
 8002574:	bf00      	nop
  while ((total + next + 1) < size)
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	3301      	adds	r3, #1
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	f63f af7e 	bhi.w	8002482 <core_init_state+0x26>
    }
  }
  size++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
  while (total < size)
 800258c:	e007      	b.n	800259e <core_init_state+0x142>
  { /* fill the rest with 0 */
    *(p + total) = 0;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    total++;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
  while (total < size)
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d3f3      	bcc.n	800258e <core_init_state+0x132>
  }
#if CORE_DEBUG
  ee_printf("State Input: %s\n", start);
#endif
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	3724      	adds	r7, #36	@ 0x24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	2000003c 	.word	0x2000003c
 80025b8:	2000004c 	.word	0x2000004c
 80025bc:	2000005c 	.word	0x2000005c
 80025c0:	2000006c 	.word	0x2000006c

080025c4 <ee_isdigit>:

static ee_u8 ee_isdigit(ee_u8 c)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  ee_u8 retval;
  retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80025d2:	bf8c      	ite	hi
 80025d4:	2301      	movhi	r3, #1
 80025d6:	2300      	movls	r3, #0
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	2b39      	cmp	r3, #57	@ 0x39
 80025de:	bf94      	ite	ls
 80025e0:	2301      	movls	r3, #1
 80025e2:	2300      	movhi	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	4013      	ands	r3, r2
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	73fb      	strb	r3, [r7, #15]
  return retval;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <core_state_transition>:

 The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  ee_u8 *str = *instr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
  ee_u8 NEXT_SYMBOL;
  enum CORE_STATE state = CORE_START;
 800260c:	2300      	movs	r3, #0
 800260e:	72fb      	strb	r3, [r7, #11]
  for ( ; *str && state != CORE_INVALID; str++ )
 8002610:	e0e5      	b.n	80027de <core_state_transition+0x1e2>
  {
    NEXT_SYMBOL = *str;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	72bb      	strb	r3, [r7, #10]
    if (NEXT_SYMBOL == ',') /* end of this input */ {
 8002618:	7abb      	ldrb	r3, [r7, #10]
 800261a:	2b2c      	cmp	r3, #44	@ 0x2c
 800261c:	d103      	bne.n	8002626 <core_state_transition+0x2a>
      str++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3301      	adds	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
      break;
 8002624:	e0e3      	b.n	80027ee <core_state_transition+0x1f2>
    }
    switch (state)
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	2b07      	cmp	r3, #7
 800262a:	f200 80ce 	bhi.w	80027ca <core_state_transition+0x1ce>
 800262e:	a201      	add	r2, pc, #4	@ (adr r2, 8002634 <core_state_transition+0x38>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002655 	.word	0x08002655
 8002638:	080027cb 	.word	0x080027cb
 800263c:	080026a1 	.word	0x080026a1
 8002640:	08002753 	.word	0x08002753
 8002644:	080026e5 	.word	0x080026e5
 8002648:	08002719 	.word	0x08002719
 800264c:	0800277f 	.word	0x0800277f
 8002650:	080027ad 	.word	0x080027ad
    {
      case CORE_START:
        if (ee_isdigit(NEXT_SYMBOL))
 8002654:	7abb      	ldrb	r3, [r7, #10]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ffb4 	bl	80025c4 <ee_isdigit>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <core_state_transition+0x6c>
        {
          state = CORE_INT;
 8002662:	2304      	movs	r3, #4
 8002664:	72fb      	strb	r3, [r7, #11]
 8002666:	e015      	b.n	8002694 <core_state_transition+0x98>
        }
        else if ( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' )
 8002668:	7abb      	ldrb	r3, [r7, #10]
 800266a:	2b2b      	cmp	r3, #43	@ 0x2b
 800266c:	d002      	beq.n	8002674 <core_state_transition+0x78>
 800266e:	7abb      	ldrb	r3, [r7, #10]
 8002670:	2b2d      	cmp	r3, #45	@ 0x2d
 8002672:	d102      	bne.n	800267a <core_state_transition+0x7e>
        {
          state = CORE_S1;
 8002674:	2302      	movs	r3, #2
 8002676:	72fb      	strb	r3, [r7, #11]
 8002678:	e00c      	b.n	8002694 <core_state_transition+0x98>
        }
        else if ( NEXT_SYMBOL == '.' )
 800267a:	7abb      	ldrb	r3, [r7, #10]
 800267c:	2b2e      	cmp	r3, #46	@ 0x2e
 800267e:	d102      	bne.n	8002686 <core_state_transition+0x8a>
        {
          state = CORE_FLOAT;
 8002680:	2305      	movs	r3, #5
 8002682:	72fb      	strb	r3, [r7, #11]
 8002684:	e006      	b.n	8002694 <core_state_transition+0x98>
        }
        else
        {
          state = CORE_INVALID;
 8002686:	2301      	movs	r3, #1
 8002688:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_INVALID]++;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3304      	adds	r3, #4
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	3201      	adds	r2, #1
 8002692:	601a      	str	r2, [r3, #0]
        }
        transition_count[CORE_START]++;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	601a      	str	r2, [r3, #0]
        break;
 800269e:	e09b      	b.n	80027d8 <core_state_transition+0x1dc>
      case CORE_S1:
        if (ee_isdigit(NEXT_SYMBOL))
 80026a0:	7abb      	ldrb	r3, [r7, #10]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff8e 	bl	80025c4 <ee_isdigit>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <core_state_transition+0xc2>
        {
          state = CORE_INT;
 80026ae:	2304      	movs	r3, #4
 80026b0:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_S1]++;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	3308      	adds	r3, #8
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	3201      	adds	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
        else
        {
          state = CORE_INVALID;
          transition_count[CORE_S1]++;
        }
        break;
 80026bc:	e08c      	b.n	80027d8 <core_state_transition+0x1dc>
        else if ( NEXT_SYMBOL == '.' )
 80026be:	7abb      	ldrb	r3, [r7, #10]
 80026c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80026c2:	d107      	bne.n	80026d4 <core_state_transition+0xd8>
          state = CORE_FLOAT;
 80026c4:	2305      	movs	r3, #5
 80026c6:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_S1]++;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3308      	adds	r3, #8
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	3201      	adds	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
        break;
 80026d2:	e081      	b.n	80027d8 <core_state_transition+0x1dc>
          state = CORE_INVALID;
 80026d4:	2301      	movs	r3, #1
 80026d6:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_S1]++;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	3308      	adds	r3, #8
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	3201      	adds	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
        break;
 80026e2:	e079      	b.n	80027d8 <core_state_transition+0x1dc>
      case CORE_INT:
        if ( NEXT_SYMBOL == '.' )
 80026e4:	7abb      	ldrb	r3, [r7, #10]
 80026e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80026e8:	d107      	bne.n	80026fa <core_state_transition+0xfe>
        {
          state = CORE_FLOAT;
 80026ea:	2305      	movs	r3, #5
 80026ec:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_INT]++;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3310      	adds	r3, #16
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	3201      	adds	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
        else if (!ee_isdigit(NEXT_SYMBOL))
        {
          state = CORE_INVALID;
          transition_count[CORE_INT]++;
        }
        break;
 80026f8:	e069      	b.n	80027ce <core_state_transition+0x1d2>
        else if (!ee_isdigit(NEXT_SYMBOL))
 80026fa:	7abb      	ldrb	r3, [r7, #10]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff61 	bl	80025c4 <ee_isdigit>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d162      	bne.n	80027ce <core_state_transition+0x1d2>
          state = CORE_INVALID;
 8002708:	2301      	movs	r3, #1
 800270a:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_INT]++;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	3310      	adds	r3, #16
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	3201      	adds	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
        break;
 8002716:	e05a      	b.n	80027ce <core_state_transition+0x1d2>
      case CORE_FLOAT:
        if ( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' )
 8002718:	7abb      	ldrb	r3, [r7, #10]
 800271a:	2b45      	cmp	r3, #69	@ 0x45
 800271c:	d002      	beq.n	8002724 <core_state_transition+0x128>
 800271e:	7abb      	ldrb	r3, [r7, #10]
 8002720:	2b65      	cmp	r3, #101	@ 0x65
 8002722:	d107      	bne.n	8002734 <core_state_transition+0x138>
        {
          state = CORE_S2;
 8002724:	2303      	movs	r3, #3
 8002726:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_FLOAT]++;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	3314      	adds	r3, #20
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	3201      	adds	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
        else if (!ee_isdigit(NEXT_SYMBOL))
        {
          state = CORE_INVALID;
          transition_count[CORE_FLOAT]++;
        }
        break;
 8002732:	e04e      	b.n	80027d2 <core_state_transition+0x1d6>
        else if (!ee_isdigit(NEXT_SYMBOL))
 8002734:	7abb      	ldrb	r3, [r7, #10]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff44 	bl	80025c4 <ee_isdigit>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d147      	bne.n	80027d2 <core_state_transition+0x1d6>
          state = CORE_INVALID;
 8002742:	2301      	movs	r3, #1
 8002744:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_FLOAT]++;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3314      	adds	r3, #20
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	3201      	adds	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
        break;
 8002750:	e03f      	b.n	80027d2 <core_state_transition+0x1d6>
      case CORE_S2:
        if ( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' )
 8002752:	7abb      	ldrb	r3, [r7, #10]
 8002754:	2b2b      	cmp	r3, #43	@ 0x2b
 8002756:	d002      	beq.n	800275e <core_state_transition+0x162>
 8002758:	7abb      	ldrb	r3, [r7, #10]
 800275a:	2b2d      	cmp	r3, #45	@ 0x2d
 800275c:	d107      	bne.n	800276e <core_state_transition+0x172>
        {
          state = CORE_EXPONENT;
 800275e:	2306      	movs	r3, #6
 8002760:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_S2]++;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	3201      	adds	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
        else
        {
          state = CORE_INVALID;
          transition_count[CORE_S2]++;
        }
        break;
 800276c:	e034      	b.n	80027d8 <core_state_transition+0x1dc>
          state = CORE_INVALID;
 800276e:	2301      	movs	r3, #1
 8002770:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_S2]++;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	3201      	adds	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
        break;
 800277c:	e02c      	b.n	80027d8 <core_state_transition+0x1dc>
      case CORE_EXPONENT:
        if (ee_isdigit(NEXT_SYMBOL))
 800277e:	7abb      	ldrb	r3, [r7, #10]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff1f 	bl	80025c4 <ee_isdigit>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <core_state_transition+0x1a0>
        {
          state = CORE_SCIENTIFIC;
 800278c:	2307      	movs	r3, #7
 800278e:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_EXPONENT]++;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3318      	adds	r3, #24
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	3201      	adds	r2, #1
 8002798:	601a      	str	r2, [r3, #0]
        else
        {
          state = CORE_INVALID;
          transition_count[CORE_EXPONENT]++;
        }
        break;
 800279a:	e01d      	b.n	80027d8 <core_state_transition+0x1dc>
          state = CORE_INVALID;
 800279c:	2301      	movs	r3, #1
 800279e:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_EXPONENT]++;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3318      	adds	r3, #24
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	3201      	adds	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
        break;
 80027aa:	e015      	b.n	80027d8 <core_state_transition+0x1dc>
      case CORE_SCIENTIFIC:
        if (!ee_isdigit(NEXT_SYMBOL))
 80027ac:	7abb      	ldrb	r3, [r7, #10]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff08 	bl	80025c4 <ee_isdigit>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <core_state_transition+0x1da>
        {
          state = CORE_INVALID;
 80027ba:	2301      	movs	r3, #1
 80027bc:	72fb      	strb	r3, [r7, #11]
          transition_count[CORE_INVALID]++;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	3304      	adds	r3, #4
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	3201      	adds	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
        }
        break;
 80027c8:	e005      	b.n	80027d6 <core_state_transition+0x1da>
      default:
        break;
 80027ca:	bf00      	nop
 80027cc:	e004      	b.n	80027d8 <core_state_transition+0x1dc>
        break;
 80027ce:	bf00      	nop
 80027d0:	e002      	b.n	80027d8 <core_state_transition+0x1dc>
        break;
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <core_state_transition+0x1dc>
        break;
 80027d6:	bf00      	nop
  for ( ; *str && state != CORE_INVALID; str++ )
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3301      	adds	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <core_state_transition+0x1f2>
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f47f af12 	bne.w	8002612 <core_state_transition+0x16>
    }
  }
  *instr = str;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]
  return state;
 80027f4:	7afb      	ldrb	r3, [r7, #11]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop

08002800 <get_seed_32>:
extern volatile ee_s32 seed2_volatile;
extern volatile ee_s32 seed3_volatile;
extern volatile ee_s32 seed4_volatile;
extern volatile ee_s32 seed5_volatile;
ee_s32 get_seed_32(int i)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  ee_s32 retval;
  switch (i)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	2b04      	cmp	r3, #4
 800280e:	d821      	bhi.n	8002854 <get_seed_32+0x54>
 8002810:	a201      	add	r2, pc, #4	@ (adr r2, 8002818 <get_seed_32+0x18>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800282d 	.word	0x0800282d
 800281c:	08002835 	.word	0x08002835
 8002820:	0800283d 	.word	0x0800283d
 8002824:	08002845 	.word	0x08002845
 8002828:	0800284d 	.word	0x0800284d
  {
    case 1:
      retval = seed1_volatile;
 800282c:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <get_seed_32+0x68>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
      break;
 8002832:	e012      	b.n	800285a <get_seed_32+0x5a>
    case 2:
      retval = seed2_volatile;
 8002834:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <get_seed_32+0x6c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
      break;
 800283a:	e00e      	b.n	800285a <get_seed_32+0x5a>
    case 3:
      retval = seed3_volatile;
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <get_seed_32+0x70>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
      break;
 8002842:	e00a      	b.n	800285a <get_seed_32+0x5a>
    case 4:
      retval = seed4_volatile;
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <get_seed_32+0x74>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
      break;
 800284a:	e006      	b.n	800285a <get_seed_32+0x5a>
    case 5:
      retval = seed5_volatile;
 800284c:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <get_seed_32+0x78>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
      break;
 8002852:	e002      	b.n	800285a <get_seed_32+0x5a>
    default:
      retval = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
      break;
 8002858:	bf00      	nop
  }
  return retval;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	20000870 	.word	0x20000870
 800286c:	20000874 	.word	0x20000874
 8002870:	20000030 	.word	0x20000030
 8002874:	20000034 	.word	0x20000034
 8002878:	20000878 	.word	0x20000878

0800287c <crcu8>:
/* Function: crc*
 Service functions to calculate 16b CRC code.

*/
ee_u16 crcu8(ee_u8 data_raisonance, ee_u16 crc )
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	460a      	mov	r2, r1
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	4613      	mov	r3, r2
 800288a:	80bb      	strh	r3, [r7, #4]
  ee_u8 i = 0, x16 = 0, carry = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	2300      	movs	r3, #0
 8002892:	737b      	strb	r3, [r7, #13]
 8002894:	2300      	movs	r3, #0
 8002896:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < 8; i++)
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e02e      	b.n	80028fc <crcu8+0x80>
  {
    x16 = (ee_u8)((data_raisonance & 1) ^ ((ee_u8)crc & 1));
 800289e:	88bb      	ldrh	r3, [r7, #4]
 80028a0:	b25a      	sxtb	r2, r3
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	4053      	eors	r3, r2
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	737b      	strb	r3, [r7, #13]
    data_raisonance >>= 1;
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	71fb      	strb	r3, [r7, #7]

    if (x16 == 1)
 80028b8:	7b7b      	ldrb	r3, [r7, #13]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <crcu8+0x54>
    {
      crc ^= 0x4002;
 80028be:	88bb      	ldrh	r3, [r7, #4]
 80028c0:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 80028c4:	f083 0302 	eor.w	r3, r3, #2
 80028c8:	80bb      	strh	r3, [r7, #4]
      carry = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73bb      	strb	r3, [r7, #14]
 80028ce:	e001      	b.n	80028d4 <crcu8+0x58>
    }
    else
      carry = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	73bb      	strb	r3, [r7, #14]
    crc >>= 1;
 80028d4:	88bb      	ldrh	r3, [r7, #4]
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	80bb      	strh	r3, [r7, #4]
    if (carry)
 80028da:	7bbb      	ldrb	r3, [r7, #14]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <crcu8+0x72>
      crc |= 0x8000;
 80028e0:	88bb      	ldrh	r3, [r7, #4]
 80028e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ea:	80bb      	strh	r3, [r7, #4]
 80028ec:	e003      	b.n	80028f6 <crcu8+0x7a>
    else
      crc &= 0x7fff;
 80028ee:	88bb      	ldrh	r3, [r7, #4]
 80028f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028f4:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < 8; i++)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	3301      	adds	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b07      	cmp	r3, #7
 8002900:	d9cd      	bls.n	800289e <crcu8+0x22>
  }
  return crc;
 8002902:	88bb      	ldrh	r3, [r7, #4]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <crcu16>:
ee_u16 crcu16(ee_u16 newval, ee_u16 crc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	460a      	mov	r2, r1
 800291a:	80fb      	strh	r3, [r7, #6]
 800291c:	4613      	mov	r3, r2
 800291e:	80bb      	strh	r3, [r7, #4]
  crc = crcu8( (ee_u8) (newval)    , crc);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	88ba      	ldrh	r2, [r7, #4]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ffa7 	bl	800287c <crcu8>
 800292e:	4603      	mov	r3, r0
 8002930:	80bb      	strh	r3, [r7, #4]
  crc = crcu8( (ee_u8) ((newval) >> 8) , crc);
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b29b      	uxth	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	88ba      	ldrh	r2, [r7, #4]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff9c 	bl	800287c <crcu8>
 8002944:	4603      	mov	r3, r0
 8002946:	80bb      	strh	r3, [r7, #4]
  return crc;
 8002948:	88bb      	ldrh	r3, [r7, #4]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <crcu32>:
ee_u16 crcu32(ee_u32 newval, ee_u16 crc)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	807b      	strh	r3, [r7, #2]
  crc = crc16((ee_s16) newval  , crc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	b21b      	sxth	r3, r3
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f811 	bl	800298e <crc16>
 800296c:	4603      	mov	r3, r0
 800296e:	807b      	strh	r3, [r7, #2]
  crc = crc16((ee_s16) (newval >> 16) , crc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	b21b      	sxth	r3, r3
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f807 	bl	800298e <crc16>
 8002980:	4603      	mov	r3, r0
 8002982:	807b      	strh	r3, [r7, #2]
  return crc;
 8002984:	887b      	ldrh	r3, [r7, #2]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <crc16>:

ee_u16 crc16(ee_s16 newval, ee_u16 crc)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	460a      	mov	r2, r1
 8002998:	80fb      	strh	r3, [r7, #6]
 800299a:	4613      	mov	r3, r2
 800299c:	80bb      	strh	r3, [r7, #4]
  return crcu16((ee_u16)newval, crc);
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	88ba      	ldrh	r2, [r7, #4]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ffb3 	bl	8002910 <crcu16>
 80029aa:	4603      	mov	r3, r0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	/* Enable PWR APB1 Clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80029b8:	2101      	movs	r1, #1
 80029ba:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80029be:	f7fd ffdd 	bl	800097c <RCC_APB1PeriphClockCmd>
	/* Configure GPIOs as analog inputs */
	GPIO_AnalogConfig ();
 80029c2:	f000 f82d 	bl	8002a20 <GPIO_AnalogConfig>
	/*Configure Leds GPIOs */
	LedsConfig();
 80029c6:	f000 f883 	bl	8002ad0 <LedsConfig>
	/* Configure Wakeup pin  */
	ButtonPinInt_configuration();
 80029ca:	f000 f89d 	bl	8002b08 <ButtonPinInt_configuration>
	/* Execute defined Run modes */
	Measure_Run ();
 80029ce:	f000 f802 	bl	80029d6 <Measure_Run>

	/* Infinite loop */
	while (1)
 80029d2:	bf00      	nop
 80029d4:	e7fd      	b.n	80029d2 <main+0x1e>

080029d6 <Measure_Run>:
* @brief  Configure the Run modes exection routines.
* @param  None
* @retval None
*/
void Measure_Run (void)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	af00      	add	r7, sp, #0
  #if defined (RUN_MODE)

  #if defined (RunPeriphDisabled180Mhz)

  /* Wait User push button to enter Run mode */
  WaitUser_PushBotton ();
 80029da:	f000 f8d9 	bl	8002b90 <WaitUser_PushBotton>

  /*Enter Power mode */
  PWR_RunPeriphDisabled180Mhz();
 80029de:	f000 f967 	bl	8002cb0 <PWR_RunPeriphDisabled180Mhz>

  /* Perform CoreMark */
  main_core(); //60 sec
 80029e2:	f7fe fd19 	bl	8001418 <main_core>

  /*Exit from previous mode*/
  Mode_Exit ();//
 80029e6:	f000 f8ed 	bl	8002bc4 <Mode_Exit>
#endif /* RunPeriphDisabled180Mhz && STM32F429_439xx */

#if defined (RunPeriphEnabled180Mhz)

  /* Wait User push buttom to enter Run mode */
  WaitUser_PushBotton ();
 80029ea:	f000 f8d1 	bl	8002b90 <WaitUser_PushBotton>

  /*Enter Power mode */
  PWR_RunPeriphEnabled180Mhz();
 80029ee:	f000 fa11 	bl	8002e14 <PWR_RunPeriphEnabled180Mhz>

  /* Perform CoreMark */
  main_core(); //60 sec
 80029f2:	f7fe fd11 	bl	8001418 <main_core>

  /*Exit from previous mode*/
  Mode_Exit ();
 80029f6:	f000 f8e5 	bl	8002bc4 <Mode_Exit>
#endif /* RunPeriphEnabled180Mhz && defined STM32F429_439xx */

#if defined (RunPeriphDisabled60Mhz)

  /* Wait User push buttom to enter Run mode */
  WaitUser_PushBotton ();
 80029fa:	f000 f8c9 	bl	8002b90 <WaitUser_PushBotton>

  /*Enter Power mode */
  PWR_RunPeriphDisabled60Mhz();
 80029fe:	f000 fab7 	bl	8002f70 <PWR_RunPeriphDisabled60Mhz>

  /* Perform CoreMark */
  main_core(); //180 seconds
 8002a02:	f7fe fd09 	bl	8001418 <main_core>

  /*Exit from previous mode*/
  Mode_Exit ();
 8002a06:	f000 f8dd 	bl	8002bc4 <Mode_Exit>
#endif /* RunPeriphDisabled60Mhz */

#if defined (RunPeriphEnabled60Mhz)

  /* Wait User push buttom to enter Run mode */
  WaitUser_PushBotton ();
 8002a0a:	f000 f8c1 	bl	8002b90 <WaitUser_PushBotton>

  /*Enter Power mode */
  PWR_RunPeriphEnabled60Mhz();
 8002a0e:	f000 fb4b 	bl	80030a8 <PWR_RunPeriphEnabled60Mhz>

  /* Perform CoreMark */
  main_core();
 8002a12:	f7fe fd01 	bl	8001418 <main_core>

  /*Exit from previous mode*/
  Mode_Exit ();
 8002a16:	f000 f8d5 	bl	8002bc4 <Mode_Exit>

#endif /* RunPeriphEnabled60Mhz */

#endif /* RUN_MODE */

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <GPIO_AnalogConfig>:
* @brief  Configure All GPIO as analog input.
* @param  None
* @retval None
*/
void GPIO_AnalogConfig (void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Configure GPIOs as Analog input to reduce current consumption*/
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8002a26:	2101      	movs	r1, #1
 8002a28:	209f      	movs	r0, #159	@ 0x9f
 8002a2a:	f7fd ff87 	bl	800093c <RCC_AHB1PeriphClockCmd>
                          RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | \
                          RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOH , ENABLE);

  RCC_AHB1PeriphClockCmd ((RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG),ENABLE );
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2060      	movs	r0, #96	@ 0x60
 8002a32:	f7fd ff83 	bl	800093c <RCC_AHB1PeriphClockCmd>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002a36:	2303      	movs	r3, #3
 8002a38:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8002a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a46:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4818      	ldr	r0, [pc, #96]	@ (8002ab0 <GPIO_AnalogConfig+0x90>)
 8002a4e:	f7fd fd5b 	bl	8000508 <GPIO_Init>
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002a52:	463b      	mov	r3, r7
 8002a54:	4619      	mov	r1, r3
 8002a56:	4817      	ldr	r0, [pc, #92]	@ (8002ab4 <GPIO_AnalogConfig+0x94>)
 8002a58:	f7fd fd56 	bl	8000508 <GPIO_Init>
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4815      	ldr	r0, [pc, #84]	@ (8002ab8 <GPIO_AnalogConfig+0x98>)
 8002a62:	f7fd fd51 	bl	8000508 <GPIO_Init>
  GPIO_Init(GPIOH, &GPIO_InitStructure);
 8002a66:	463b      	mov	r3, r7
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4814      	ldr	r0, [pc, #80]	@ (8002abc <GPIO_AnalogConfig+0x9c>)
 8002a6c:	f7fd fd4c 	bl	8000508 <GPIO_Init>
  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002a70:	463b      	mov	r3, r7
 8002a72:	4619      	mov	r1, r3
 8002a74:	4812      	ldr	r0, [pc, #72]	@ (8002ac0 <GPIO_AnalogConfig+0xa0>)
 8002a76:	f7fd fd47 	bl	8000508 <GPIO_Init>
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <GPIO_AnalogConfig+0xa4>)
 8002a80:	f7fd fd42 	bl	8000508 <GPIO_Init>
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a84:	463b      	mov	r3, r7
 8002a86:	4619      	mov	r1, r3
 8002a88:	480f      	ldr	r0, [pc, #60]	@ (8002ac8 <GPIO_AnalogConfig+0xa8>)
 8002a8a:	f7fd fd3d 	bl	8000508 <GPIO_Init>
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	480e      	ldr	r0, [pc, #56]	@ (8002acc <GPIO_AnalogConfig+0xac>)
 8002a94:	f7fd fd38 	bl	8000508 <GPIO_Init>

  /* Disable GPIOs clock */
  RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8002a98:	2100      	movs	r1, #0
 8002a9a:	209f      	movs	r0, #159	@ 0x9f
 8002a9c:	f7fd ff4e 	bl	800093c <RCC_AHB1PeriphClockCmd>
                          RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | \
                          RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOH , DISABLE);

  RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG, DISABLE);
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	2060      	movs	r0, #96	@ 0x60
 8002aa4:	f7fd ff4a 	bl	800093c <RCC_AHB1PeriphClockCmd>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021c00 	.word	0x40021c00
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020400 	.word	0x40020400

08002ad0 <LedsConfig>:
* @brief  Configure LED gpio of NUCLEO-F446RE GPIOA.5
* @param  None
* @retval None
*/
static void LedsConfig (void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  /* Modification of code required if your board is not NUCLEO-F446RE*/
	GPIO_InitTypeDef  GPIO_InitStructure;

	/*Configure GPIO structure */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ada:	2300      	movs	r3, #0
 8002adc:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	717b      	strb	r3, [r7, #5]
	/* Enable the GPIO_LED Port A Clock */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA , ENABLE);
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f7fd ff27 	bl	800093c <RCC_AHB1PeriphClockCmd>

	/* Configure 5th pin which drivers the LED*/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8002aee:	2320      	movs	r3, #32
 8002af0:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002af2:	463b      	mov	r3, r7
 8002af4:	4619      	mov	r1, r3
 8002af6:	4803      	ldr	r0, [pc, #12]	@ (8002b04 <LedsConfig+0x34>)
 8002af8:	f7fd fd06 	bl	8000508 <GPIO_Init>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40020000 	.word	0x40020000

08002b08 <ButtonPinInt_configuration>:
* @param  None
* @retval None
* @Note :  Modification of code required if your board is not NUCLEO-F446RE
*/
void ButtonPinInt_configuration(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;


  /* Enable GPIOA clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2004      	movs	r0, #4
 8002b12:	f7fd ff13 	bl	800093c <RCC_AHB1PeriphClockCmd>

  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002b16:	2101      	movs	r1, #1
 8002b18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b1c:	f7fd ff4e 	bl	80009bc <RCC_APB2PeriphClockCmd>

  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8002b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002b26:	2300      	movs	r3, #0
 8002b28:	743b      	strb	r3, [r7, #16]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	74bb      	strb	r3, [r7, #18]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	74fb      	strb	r3, [r7, #19]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b32:	2302      	movs	r3, #2
 8002b34:	747b      	strb	r3, [r7, #17]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4813      	ldr	r0, [pc, #76]	@ (8002b8c <ButtonPinInt_configuration+0x84>)
 8002b3e:	f7fd fce3 	bl	8000508 <GPIO_Init>

  /* Connect EXTI Line0 to PA0 pin */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 8002b42:	210d      	movs	r1, #13
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fd ffeb 	bl	8000b20 <SYSCFG_EXTILineConfig>


  /* Configure EXTI Line0 */
  EXTI_DeInit();
 8002b4a:	f7fd fbbd 	bl	80002c8 <EXTI_DeInit>
  EXTI_InitStructure.EXTI_Line = EXTI_Line13;
 8002b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b52:	607b      	str	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002b54:	2300      	movs	r3, #0
 8002b56:	723b      	strb	r3, [r7, #8]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	727b      	strb	r3, [r7, #9]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	72bb      	strb	r3, [r7, #10]
  EXTI_Init(&EXTI_InitStructure);
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fbca 	bl	80002fc <EXTI_Init>

  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 8002b68:	2328      	movs	r3, #40	@ 0x28
 8002b6a:	753b      	strb	r3, [r7, #20]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	757b      	strb	r3, [r7, #21]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75bb      	strb	r3, [r7, #22]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
  NVIC_Init(&NVIC_InitStructure);
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fb41 	bl	8000204 <NVIC_Init>
	SYSCFG->EXTICR[3] &= ~(0xf  << 4 );
	SYSCFG->EXTICR[3] |= (0x2  << 4 );
	EXTI->RTSR |= ( 1 << 13);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40020800 	.word	0x40020800

08002b90 <WaitUser_PushBotton>:

//Just waits until user presses on board push button
void WaitUser_PushBotton (void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOA, GPIO_Pin_5);
 8002b94:	2120      	movs	r1, #32
 8002b96:	4809      	ldr	r0, [pc, #36]	@ (8002bbc <WaitUser_PushBotton+0x2c>)
 8002b98:	f7fd fd45 	bl	8000626 <GPIO_SetBits>
	while(UserButtonStatus != SET); //wait here
 8002b9c:	bf00      	nop
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <WaitUser_PushBotton+0x30>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d1fa      	bne.n	8002b9e <WaitUser_PushBotton+0xe>
	GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 8002ba8:	2120      	movs	r1, #32
 8002baa:	4804      	ldr	r0, [pc, #16]	@ (8002bbc <WaitUser_PushBotton+0x2c>)
 8002bac:	f7fd fd4a 	bl	8000644 <GPIO_ResetBits>
	UserButtonStatus = RESET;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <WaitUser_PushBotton+0x30>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	20000888 	.word	0x20000888

08002bc4 <Mode_Exit>:
* @brief  Configure the exit routine from power mode.
* @param  None
* @retval None
*/
static void Mode_Exit (void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Clock init configuration */
  RCC_DeInit();
 8002bc8:	f7fd fda2 	bl	8000710 <RCC_DeInit>
  /* Disable HSE */
  RCC_HSEConfig(RCC_HSE_OFF);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd fdd7 	bl	8000780 <RCC_HSEConfig>
  /* Enable HSI */
  RCC_HSICmd(ENABLE);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f7fd fe10 	bl	80007f8 <RCC_HSICmd>
  /* Wait till HSI is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	bf00      	nop
 8002bda:	2021      	movs	r0, #33	@ 0x21
 8002bdc:	f7fd ff0e 	bl	80009fc <RCC_GetFlagStatus>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f9      	beq.n	8002bda <Mode_Exit+0x16>
  {}

  /* Select HSI as system clock source */
  RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd fe26 	bl	8000838 <RCC_SYSCLKConfig>
  /* Wait till HSI is used as system clock source */
  while (RCC_GetSYSCLKSource() != 0x00)
 8002bec:	bf00      	nop
 8002bee:	f7fd fe3f 	bl	8000870 <RCC_GetSYSCLKSource>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1fa      	bne.n	8002bee <Mode_Exit+0x2a>
  {}

  /* Enable PWR APB1 Clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002bfe:	f7fd febd 	bl	800097c <RCC_APB1PeriphClockCmd>
  /*Configure Leds GPIOs */
  LedsConfig();
 8002c02:	f7ff ff65 	bl	8002ad0 <LedsConfig>
  /* Configure Wakeup pin  */
  ButtonPinInt_configuration();
 8002c06:	f7ff ff7f 	bl	8002b08 <ButtonPinInt_configuration>
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <DisableAllAHBxAPBxPeriClocks>:
  */



void DisableAllAHBxAPBxPeriClocks(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
	/*Disabling clocks of all the peripherals in AHB1,2,3 and APB1,2 domain */
	//Clearing off all bits in the below registers to disable the clocks. for more info refer RM , RCC Register Section
	  RCC->AHB1ENR &= ~(0xFFFFFFFF);
 8002c14:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c18:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	@ 0x30
	  RCC->AHB2ENR &= ~(0xFFFFFFFF);
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c22:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	635a      	str	r2, [r3, #52]	@ 0x34
	  RCC->AHB3ENR &= ~(0xFFFFFFFF);
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	639a      	str	r2, [r3, #56]	@ 0x38
	  RCC->APB1ENR &= ~(0xFFFFFFFF);
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40
	  RCC->APB2ENR &= ~(0xFFFFFFFF);
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <DisableAllAHBxAPBxPeriClocks+0x40>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40023800 	.word	0x40023800

08002c54 <EnableAllAHBxAPBxPeriClocks>:

void EnableAllAHBxAPBxPeriClocks(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
	/*Enabling clocks of all the peripherals in AHB1,2,3 and APB1,2 domain */
	RCC->AHB1ENR |= 0x606410FF;
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c5c:	4910      	ldr	r1, [pc, #64]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <EnableAllAHBxAPBxPeriClocks+0x50>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	630b      	str	r3, [r1, #48]	@ 0x30
	RCC->AHB2ENR |= ( (1 << 0) | (1 << 7));
 8002c64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c6a:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8002c6e:	6353      	str	r3, [r2, #52]	@ 0x34
	RCC->AHB3ENR |= 0x00000003;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c76:	f043 0303 	orr.w	r3, r3, #3
 8002c7a:	6393      	str	r3, [r2, #56]	@ 0x38
	RCC->APB1ENR |= 0x3FFFC9FF;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c80:	4907      	ldr	r1, [pc, #28]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <EnableAllAHBxAPBxPeriClocks+0x54>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	640b      	str	r3, [r1, #64]	@ 0x40
	RCC->APB2ENR |= 0x00C77F66;
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c8c:	4904      	ldr	r1, [pc, #16]	@ (8002ca0 <EnableAllAHBxAPBxPeriClocks+0x4c>)
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <EnableAllAHBxAPBxPeriClocks+0x58>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	606410ff 	.word	0x606410ff
 8002ca8:	3fffc9ff 	.word	0x3fffc9ff
 8002cac:	00c77f66 	.word	0x00c77f66

08002cb0 <PWR_RunPeriphDisabled180Mhz>:
  * @param  None
  * @retval None
  */

void PWR_RunPeriphDisabled180Mhz(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	 /* Clock init configuration ------------------------------------------------*/
	  RCC_DeInit();
 8002cb4:	f7fd fd2c 	bl	8000710 <RCC_DeInit>

	  /* Enable HSE */
	  RCC_HSEConfig(RCC_HSE_ON);
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7fd fd61 	bl	8000780 <RCC_HSEConfig>

	  /* Wait till HSE is ready */
	  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8002cbe:	f7fd fd73 	bl	80007a8 <RCC_WaitForHSEStartUp>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b47      	ldr	r3, [pc, #284]	@ (8002de4 <PWR_RunPeriphDisabled180Mhz+0x134>)
 8002cc8:	701a      	strb	r2, [r3, #0]

	  if (HSEStartUpStatus == SUCCESS)
 8002cca:	4b46      	ldr	r3, [pc, #280]	@ (8002de4 <PWR_RunPeriphDisabled180Mhz+0x134>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d14c      	bne.n	8002d6c <PWR_RunPeriphDisabled180Mhz+0xbc>
	  {
	    /* Enable PWR APB1 Clock */
	    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002cd8:	f7fd fe50 	bl	800097c <RCC_APB1PeriphClockCmd>

	    /* Select regulator voltage output Scale 1 mode */
	    PWR_MainRegulatorModeConfig(PWR_Regulator_Voltage_Scale1);
 8002cdc:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8002ce0:	f7fd fcc0 	bl	8000664 <PWR_MainRegulatorModeConfig>
	    FLASH_PrefetchBufferCmd(ENABLE);

	#else /* Prefetch_Enable */

	    /* Disable prefetch buffer */
	    FLASH_PrefetchBufferCmd(DISABLE);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd fbb5 	bl	8000454 <FLASH_PrefetchBufferCmd>

	#endif /* Prefetch_Enable */

	    /* Enable flash instruction cache */
	    FLASH_InstructionCacheCmd(ENABLE);
 8002cea:	2001      	movs	r0, #1
 8002cec:	f7fd fbd0 	bl	8000490 <FLASH_InstructionCacheCmd>

	    /* Enable flash data cache */
	    FLASH_DataCacheCmd(ENABLE);
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f7fd fbeb 	bl	80004cc <FLASH_DataCacheCmd>

	#endif /* ART_Enable */

	#if defined VDD3_3
	    /* Flash 5 wait state */
	    FLASH_SetLatency(FLASH_Latency_5);
 8002cf6:	2005      	movs	r0, #5
 8002cf8:	f7fd fb9c 	bl	8000434 <FLASH_SetLatency>

	#endif /* VDD3_3 */

	    /* Configures the AHB clock */
	    RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fd fdc7 	bl	8000890 <RCC_HCLKConfig>

	    /* PCLK2 = HCLK/2 */
	    RCC_PCLK2Config(RCC_HCLK_Div2);
 8002d02:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d06:	f7fd fdfb 	bl	8000900 <RCC_PCLK2Config>

	    /* PCLK1 = HCLK/4 */
	    RCC_PCLK1Config(RCC_HCLK_Div4);
 8002d0a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8002d0e:	f7fd fddb 	bl	80008c8 <RCC_PCLK1Config>

	    /*---------------over drive config -------------*/

	    PWR_OverDriveCmd(ENABLE);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7fd fcc2 	bl	800069c <PWR_OverDriveCmd>

	    while ( PWR_GetFlagStatus(PWR_FLAG_ODRDY) == RESET)
 8002d18:	bf00      	nop
 8002d1a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002d1e:	f7fd fcdd 	bl	80006dc <PWR_GetFlagStatus>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f8      	beq.n	8002d1a <PWR_RunPeriphDisabled180Mhz+0x6a>
	    {}

	    PWR_OverDriveSWCmd(ENABLE);
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7fd fcc7 	bl	80006bc <PWR_OverDriveSWCmd>

	    while ( PWR_GetFlagStatus(PWR_FLAG_ODSWRDY) == RESET)
 8002d2e:	bf00      	nop
 8002d30:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002d34:	f7fd fcd2 	bl	80006dc <PWR_GetFlagStatus>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f8      	beq.n	8002d30 <PWR_RunPeriphDisabled180Mhz+0x80>
	    {}

	    /*----------------------------------------------*/

	    /* configure the PLL */
	    RCC->PLLCFGR = HSE_OF_NUCLEO_F446RE | (360 << 6) | (((2 >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) |
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <PWR_RunPeriphDisabled180Mhz+0x138>)
 8002d40:	4a2a      	ldr	r2, [pc, #168]	@ (8002dec <PWR_RunPeriphDisabled180Mhz+0x13c>)
 8002d42:	605a      	str	r2, [r3, #4]
	                   (7 << 24);

	    /* Enable PLL */
	    RCC_PLLCmd(ENABLE);
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7fd fd67 	bl	8000818 <RCC_PLLCmd>

	    /* Wait till PLL is ready */
	    while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002d4a:	bf00      	nop
 8002d4c:	4b26      	ldr	r3, [pc, #152]	@ (8002de8 <PWR_RunPeriphDisabled180Mhz+0x138>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f9      	beq.n	8002d4c <PWR_RunPeriphDisabled180Mhz+0x9c>
	    {}

	    /* Select PLL as system clock source */
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8002d58:	2002      	movs	r0, #2
 8002d5a:	f7fd fd6d 	bl	8000838 <RCC_SYSCLKConfig>

	    /* Wait till the main PLL is used as system clock source */
	    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002d5e:	bf00      	nop
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <PWR_RunPeriphDisabled180Mhz+0x138>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d1f9      	bne.n	8002d60 <PWR_RunPeriphDisabled180Mhz+0xb0>
	  {}
	  }

	  /* GPIO CONFIG -------------------------------------------------------------*/
	  RCC_AHB1PeriphClockCmd(ALL_GPIOs, ENABLE);
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	20ff      	movs	r0, #255	@ 0xff
 8002d70:	f7fd fde4 	bl	800093c <RCC_AHB1PeriphClockCmd>

	  /* Configure all GPIO port pins in Analog Input mode (floating input trigger
	     OFF) */

	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002d76:	2203      	movs	r2, #3
 8002d78:	711a      	strb	r2, [r3, #4]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	719a      	strb	r2, [r3, #6]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002d82:	2202      	movs	r2, #2
 8002d84:	715a      	strb	r2, [r3, #5]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	71da      	strb	r2, [r3, #7]
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002d8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d92:	601a      	str	r2, [r3, #0]
	  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002d94:	4916      	ldr	r1, [pc, #88]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002d96:	4817      	ldr	r0, [pc, #92]	@ (8002df4 <PWR_RunPeriphDisabled180Mhz+0x144>)
 8002d98:	f7fd fbb6 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002d9c:	4914      	ldr	r1, [pc, #80]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002d9e:	4816      	ldr	r0, [pc, #88]	@ (8002df8 <PWR_RunPeriphDisabled180Mhz+0x148>)
 8002da0:	f7fd fbb2 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002da4:	4912      	ldr	r1, [pc, #72]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002da6:	4815      	ldr	r0, [pc, #84]	@ (8002dfc <PWR_RunPeriphDisabled180Mhz+0x14c>)
 8002da8:	f7fd fbae 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOH, &GPIO_InitStructure);
 8002dac:	4910      	ldr	r1, [pc, #64]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002dae:	4814      	ldr	r0, [pc, #80]	@ (8002e00 <PWR_RunPeriphDisabled180Mhz+0x150>)
 8002db0:	f7fd fbaa 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002db4:	490e      	ldr	r1, [pc, #56]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002db6:	4813      	ldr	r0, [pc, #76]	@ (8002e04 <PWR_RunPeriphDisabled180Mhz+0x154>)
 8002db8:	f7fd fba6 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002dbc:	490c      	ldr	r1, [pc, #48]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002dbe:	4812      	ldr	r0, [pc, #72]	@ (8002e08 <PWR_RunPeriphDisabled180Mhz+0x158>)
 8002dc0:	f7fd fba2 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002dc4:	490a      	ldr	r1, [pc, #40]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002dc6:	4811      	ldr	r0, [pc, #68]	@ (8002e0c <PWR_RunPeriphDisabled180Mhz+0x15c>)
 8002dc8:	f7fd fb9e 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002dcc:	4908      	ldr	r1, [pc, #32]	@ (8002df0 <PWR_RunPeriphDisabled180Mhz+0x140>)
 8002dce:	4810      	ldr	r0, [pc, #64]	@ (8002e10 <PWR_RunPeriphDisabled180Mhz+0x160>)
 8002dd0:	f7fd fb9a 	bl	8000508 <GPIO_Init>

	  /* GPIOs Periph clock disable */
	  RCC_AHB1PeriphClockCmd(ALL_GPIOs, DISABLE);
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	20ff      	movs	r0, #255	@ 0xff
 8002dd8:	f7fd fdb0 	bl	800093c <RCC_AHB1PeriphClockCmd>

	  /* All Periph clock Disable */
      DisableAllAHBxAPBxPeriClocks();
 8002ddc:	f7ff ff18 	bl	8002c10 <DisableAllAHBxAPBxPeriClocks>

}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000088c 	.word	0x2000088c
 8002de8:	40023800 	.word	0x40023800
 8002dec:	07405a08 	.word	0x07405a08
 8002df0:	20000890 	.word	0x20000890
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020c00 	.word	0x40020c00
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40021c00 	.word	0x40021c00
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400

08002e14 <PWR_RunPeriphEnabled180Mhz>:
  * @param  None
  * @retval None
  */

void PWR_RunPeriphEnabled180Mhz(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	/* Clock init configuration ------------------------------------------------*/
	  RCC_DeInit();
 8002e18:	f7fd fc7a 	bl	8000710 <RCC_DeInit>

	  /* Enable HSE */
	  RCC_HSEConfig(RCC_HSE_ON);
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7fd fcaf 	bl	8000780 <RCC_HSEConfig>

	  /* Wait till HSE is ready */
	  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8002e22:	f7fd fcc1 	bl	80007a8 <RCC_WaitForHSEStartUp>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b45      	ldr	r3, [pc, #276]	@ (8002f40 <PWR_RunPeriphEnabled180Mhz+0x12c>)
 8002e2c:	701a      	strb	r2, [r3, #0]

	  if (HSEStartUpStatus == SUCCESS)
 8002e2e:	4b44      	ldr	r3, [pc, #272]	@ (8002f40 <PWR_RunPeriphEnabled180Mhz+0x12c>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d14c      	bne.n	8002ed0 <PWR_RunPeriphEnabled180Mhz+0xbc>
	  {

	    /* Enable PWR APB1 Clock */
	    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8002e36:	2101      	movs	r1, #1
 8002e38:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002e3c:	f7fd fd9e 	bl	800097c <RCC_APB1PeriphClockCmd>

	    /* Select regulator voltage output Scale 1 mode */
	    PWR_MainRegulatorModeConfig(PWR_Regulator_Voltage_Scale1);
 8002e40:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8002e44:	f7fd fc0e 	bl	8000664 <PWR_MainRegulatorModeConfig>
	    FLASH_PrefetchBufferCmd(ENABLE);

	#else /* Prefetch_Enable */

	    /* Disable prefetch buffer */
	    FLASH_PrefetchBufferCmd(DISABLE);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7fd fb03 	bl	8000454 <FLASH_PrefetchBufferCmd>

	#endif /* Prefetch_Enable */

	    /* Enable flash instruction cache */
	    FLASH_InstructionCacheCmd(ENABLE);
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f7fd fb1e 	bl	8000490 <FLASH_InstructionCacheCmd>

	    /* Enable flash data cache */
	    FLASH_DataCacheCmd(ENABLE);
 8002e54:	2001      	movs	r0, #1
 8002e56:	f7fd fb39 	bl	80004cc <FLASH_DataCacheCmd>

	#endif /* ART_Enable */

	#if defined VDD3_3
	    /* Flash 5 wait state */
	    FLASH_SetLatency(FLASH_Latency_5);
 8002e5a:	2005      	movs	r0, #5
 8002e5c:	f7fd faea 	bl	8000434 <FLASH_SetLatency>

	#endif /* VDD3_3 */

	    /* Configures the AHB clock */
	    RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fd fd15 	bl	8000890 <RCC_HCLKConfig>

	    /* PCLK2 = HCLK/2 */
	    RCC_PCLK2Config(RCC_HCLK_Div2);
 8002e66:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002e6a:	f7fd fd49 	bl	8000900 <RCC_PCLK2Config>

	    /* PCLK1 = HCLK/4 */
	    RCC_PCLK1Config(RCC_HCLK_Div4);
 8002e6e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8002e72:	f7fd fd29 	bl	80008c8 <RCC_PCLK1Config>

	    /*--------------- over drive config -------------*/

	    PWR_OverDriveCmd(ENABLE);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7fd fc10 	bl	800069c <PWR_OverDriveCmd>

	    while ( PWR_GetFlagStatus(PWR_FLAG_ODRDY) == RESET)
 8002e7c:	bf00      	nop
 8002e7e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002e82:	f7fd fc2b 	bl	80006dc <PWR_GetFlagStatus>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f8      	beq.n	8002e7e <PWR_RunPeriphEnabled180Mhz+0x6a>
	    {}

	    PWR_OverDriveSWCmd(ENABLE);
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fd fc15 	bl	80006bc <PWR_OverDriveSWCmd>

	    while ( PWR_GetFlagStatus(PWR_FLAG_ODSWRDY) == RESET)
 8002e92:	bf00      	nop
 8002e94:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002e98:	f7fd fc20 	bl	80006dc <PWR_GetFlagStatus>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f8      	beq.n	8002e94 <PWR_RunPeriphEnabled180Mhz+0x80>
	    {}

	    /*-----------------------------------------------*/

	    /* configure the PLL */
	    RCC->PLLCFGR = HSE_OF_NUCLEO_F446RE | (360 << 6) | (((2 >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) |
 8002ea2:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <PWR_RunPeriphEnabled180Mhz+0x130>)
 8002ea4:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <PWR_RunPeriphEnabled180Mhz+0x134>)
 8002ea6:	605a      	str	r2, [r3, #4]
	                   (7 << 24);

	    /* Enable PLL */
	    RCC_PLLCmd(ENABLE);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7fd fcb5 	bl	8000818 <RCC_PLLCmd>

	    /* Wait till PLL is ready */
	    while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002eae:	bf00      	nop
 8002eb0:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <PWR_RunPeriphEnabled180Mhz+0x130>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f9      	beq.n	8002eb0 <PWR_RunPeriphEnabled180Mhz+0x9c>
	    {}

	    /* Select PLL as system clock source */
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f7fd fcbb 	bl	8000838 <RCC_SYSCLKConfig>

	    /* Wait till the main PLL is used as system clock source */
	    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002ec2:	bf00      	nop
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f44 <PWR_RunPeriphEnabled180Mhz+0x130>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d1f9      	bne.n	8002ec4 <PWR_RunPeriphEnabled180Mhz+0xb0>
	  {}
	  }

	  /* GPIO CONFIG -------------------------------------------------------------*/
	  RCC_AHB1PeriphClockCmd(ALL_GPIOs, ENABLE);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	20ff      	movs	r0, #255	@ 0xff
 8002ed4:	f7fd fd32 	bl	800093c <RCC_AHB1PeriphClockCmd>

	  /* Configure all GPIO port pins in Analog Input mode (floating input trigger
	     OFF) */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002eda:	2203      	movs	r2, #3
 8002edc:	711a      	strb	r2, [r3, #4]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ede:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	719a      	strb	r2, [r3, #6]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	715a      	strb	r2, [r3, #5]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002eea:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	71da      	strb	r2, [r3, #7]
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ef6:	601a      	str	r2, [r3, #0]
	  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002ef8:	4914      	ldr	r1, [pc, #80]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002efa:	4815      	ldr	r0, [pc, #84]	@ (8002f50 <PWR_RunPeriphEnabled180Mhz+0x13c>)
 8002efc:	f7fd fb04 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f00:	4912      	ldr	r1, [pc, #72]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002f02:	4814      	ldr	r0, [pc, #80]	@ (8002f54 <PWR_RunPeriphEnabled180Mhz+0x140>)
 8002f04:	f7fd fb00 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002f08:	4910      	ldr	r1, [pc, #64]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002f0a:	4813      	ldr	r0, [pc, #76]	@ (8002f58 <PWR_RunPeriphEnabled180Mhz+0x144>)
 8002f0c:	f7fd fafc 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOH, &GPIO_InitStructure);
 8002f10:	490e      	ldr	r1, [pc, #56]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002f12:	4812      	ldr	r0, [pc, #72]	@ (8002f5c <PWR_RunPeriphEnabled180Mhz+0x148>)
 8002f14:	f7fd faf8 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002f18:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002f1a:	4811      	ldr	r0, [pc, #68]	@ (8002f60 <PWR_RunPeriphEnabled180Mhz+0x14c>)
 8002f1c:	f7fd faf4 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f20:	490a      	ldr	r1, [pc, #40]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002f22:	4810      	ldr	r0, [pc, #64]	@ (8002f64 <PWR_RunPeriphEnabled180Mhz+0x150>)
 8002f24:	f7fd faf0 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f28:	4908      	ldr	r1, [pc, #32]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002f2a:	480f      	ldr	r0, [pc, #60]	@ (8002f68 <PWR_RunPeriphEnabled180Mhz+0x154>)
 8002f2c:	f7fd faec 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f30:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <PWR_RunPeriphEnabled180Mhz+0x138>)
 8002f32:	480e      	ldr	r0, [pc, #56]	@ (8002f6c <PWR_RunPeriphEnabled180Mhz+0x158>)
 8002f34:	f7fd fae8 	bl	8000508 <GPIO_Init>


	  /* All Periph clock Enable */
	  EnableAllAHBxAPBxPeriClocks();
 8002f38:	f7ff fe8c 	bl	8002c54 <EnableAllAHBxAPBxPeriClocks>
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2000088c 	.word	0x2000088c
 8002f44:	40023800 	.word	0x40023800
 8002f48:	07405a08 	.word	0x07405a08
 8002f4c:	20000890 	.word	0x20000890
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40021c00 	.word	0x40021c00
 8002f60:	40021400 	.word	0x40021400
 8002f64:	40021800 	.word	0x40021800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400

08002f70 <PWR_RunPeriphDisabled60Mhz>:
  * @param  None
  * @retval None
  */

void PWR_RunPeriphDisabled60Mhz(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	 /* Clock init configuration ------------------------------------------------*/
	  RCC_DeInit();
 8002f74:	f7fd fbcc 	bl	8000710 <RCC_DeInit>

	  /* Enable HSE */
	  RCC_HSEConfig(RCC_HSE_ON);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f7fd fc01 	bl	8000780 <RCC_HSEConfig>

	  /* Wait till HSE is ready */
	  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8002f7e:	f7fd fc13 	bl	80007a8 <RCC_WaitForHSEStartUp>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b3c      	ldr	r3, [pc, #240]	@ (8003078 <PWR_RunPeriphDisabled60Mhz+0x108>)
 8002f88:	701a      	strb	r2, [r3, #0]

	  if (HSEStartUpStatus == SUCCESS)
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <PWR_RunPeriphDisabled60Mhz+0x108>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d135      	bne.n	8002ffe <PWR_RunPeriphDisabled60Mhz+0x8e>
	  {

	    /* Enable PWR APB1 Clock */
	    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8002f92:	2101      	movs	r1, #1
 8002f94:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002f98:	f7fd fcf0 	bl	800097c <RCC_APB1PeriphClockCmd>

	    /* Select regulator voltage output Scale 3 mode*/
	    PWR_MainRegulatorModeConfig(PWR_Regulator_Voltage_Scale3);
 8002f9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002fa0:	f7fd fb60 	bl	8000664 <PWR_MainRegulatorModeConfig>
	    FLASH_PrefetchBufferCmd(ENABLE);

	#else /* Prefetch_Enable */

	    /* Disable prefetch buffer */
	    FLASH_PrefetchBufferCmd(DISABLE);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fd fa55 	bl	8000454 <FLASH_PrefetchBufferCmd>

	#endif /* Prefetch_Enable */

	    /* enable flash instruction cache */
	    FLASH_InstructionCacheCmd(ENABLE);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7fd fa70 	bl	8000490 <FLASH_InstructionCacheCmd>

	    /* enable flash data cache */
	    FLASH_DataCacheCmd(ENABLE);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7fd fa8b 	bl	80004cc <FLASH_DataCacheCmd>
	#endif /* ART_Enable */

	    /* Configure Wait states according to power supply voltage */
	#if defined VDD3_3
	    /* Flash 1 wait state */
	    FLASH_SetLatency(FLASH_Latency_1);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7fd fa3c 	bl	8000434 <FLASH_SetLatency>
	    /* Flash 2 wait state */
	    FLASH_SetLatency(FLASH_Latency_2);
	#endif

	    /* Configures the AHB clock */
	    RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd fc67 	bl	8000890 <RCC_HCLKConfig>

	    /* PCLK2 = HCLK/2 */
	    RCC_PCLK2Config(RCC_HCLK_Div1);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fd fc9c 	bl	8000900 <RCC_PCLK2Config>

	    /* PCLK1 = HCLK/4 */
	    RCC_PCLK1Config(RCC_HCLK_Div2);
 8002fc8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002fcc:	f7fd fc7c 	bl	80008c8 <RCC_PCLK1Config>

	    /* configure the PLL */
	    RCC->PLLCFGR = HSE_OF_NUCLEO_F446RE | (240 << 6) | (((4 >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) |
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800307c <PWR_RunPeriphDisabled60Mhz+0x10c>)
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8003080 <PWR_RunPeriphDisabled60Mhz+0x110>)
 8002fd4:	605a      	str	r2, [r3, #4]
	                   (7 << 24);

	    /* Enable PLL */
	    RCC_PLLCmd(ENABLE);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f7fd fc1e 	bl	8000818 <RCC_PLLCmd>

	    /* Wait till PLL is ready */
	    while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002fdc:	bf00      	nop
 8002fde:	4b27      	ldr	r3, [pc, #156]	@ (800307c <PWR_RunPeriphDisabled60Mhz+0x10c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f9      	beq.n	8002fde <PWR_RunPeriphDisabled60Mhz+0x6e>
	    {}

	    /* Select PLL as system clock source */
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8002fea:	2002      	movs	r0, #2
 8002fec:	f7fd fc24 	bl	8000838 <RCC_SYSCLKConfig>

	    /* Wait till the main PLL is used as system clock source */
	    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002ff0:	bf00      	nop
 8002ff2:	4b22      	ldr	r3, [pc, #136]	@ (800307c <PWR_RunPeriphDisabled60Mhz+0x10c>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d1f9      	bne.n	8002ff2 <PWR_RunPeriphDisabled60Mhz+0x82>
	  {}
	  }

	  /* GPIO CONFIG -------------------------------------------------------------*/
	  RCC_AHB1PeriphClockCmd(ALL_GPIOs, ENABLE);
 8002ffe:	2101      	movs	r1, #1
 8003000:	20ff      	movs	r0, #255	@ 0xff
 8003002:	f7fd fc9b 	bl	800093c <RCC_AHB1PeriphClockCmd>

	  /* Configure all GPIO port pins in Analog Input mode (floating input trigger
	     OFF) */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003006:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003008:	2203      	movs	r2, #3
 800300a:	711a      	strb	r2, [r3, #4]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800300c:	4b1d      	ldr	r3, [pc, #116]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 800300e:	2200      	movs	r2, #0
 8003010:	719a      	strb	r2, [r3, #6]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003012:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003014:	2202      	movs	r2, #2
 8003016:	715a      	strb	r2, [r3, #5]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003018:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 800301a:	2200      	movs	r2, #0
 800301c:	71da      	strb	r2, [r3, #7]
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003024:	601a      	str	r2, [r3, #0]
	  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003026:	4917      	ldr	r1, [pc, #92]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003028:	4817      	ldr	r0, [pc, #92]	@ (8003088 <PWR_RunPeriphDisabled60Mhz+0x118>)
 800302a:	f7fd fa6d 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 800302e:	4915      	ldr	r1, [pc, #84]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003030:	4816      	ldr	r0, [pc, #88]	@ (800308c <PWR_RunPeriphDisabled60Mhz+0x11c>)
 8003032:	f7fd fa69 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003036:	4913      	ldr	r1, [pc, #76]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003038:	4815      	ldr	r0, [pc, #84]	@ (8003090 <PWR_RunPeriphDisabled60Mhz+0x120>)
 800303a:	f7fd fa65 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOH, &GPIO_InitStructure);
 800303e:	4911      	ldr	r1, [pc, #68]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003040:	4814      	ldr	r0, [pc, #80]	@ (8003094 <PWR_RunPeriphDisabled60Mhz+0x124>)
 8003042:	f7fd fa61 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003046:	490f      	ldr	r1, [pc, #60]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003048:	4813      	ldr	r0, [pc, #76]	@ (8003098 <PWR_RunPeriphDisabled60Mhz+0x128>)
 800304a:	f7fd fa5d 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOG, &GPIO_InitStructure);
 800304e:	490d      	ldr	r1, [pc, #52]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003050:	4812      	ldr	r0, [pc, #72]	@ (800309c <PWR_RunPeriphDisabled60Mhz+0x12c>)
 8003052:	f7fd fa59 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003056:	490b      	ldr	r1, [pc, #44]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003058:	4811      	ldr	r0, [pc, #68]	@ (80030a0 <PWR_RunPeriphDisabled60Mhz+0x130>)
 800305a:	f7fd fa55 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800305e:	4909      	ldr	r1, [pc, #36]	@ (8003084 <PWR_RunPeriphDisabled60Mhz+0x114>)
 8003060:	4810      	ldr	r0, [pc, #64]	@ (80030a4 <PWR_RunPeriphDisabled60Mhz+0x134>)
 8003062:	f7fd fa51 	bl	8000508 <GPIO_Init>

	  /* GPIOs Periph clock disable */
	  RCC_AHB1PeriphClockCmd(ALL_GPIOs, DISABLE);
 8003066:	2100      	movs	r1, #0
 8003068:	20ff      	movs	r0, #255	@ 0xff
 800306a:	f7fd fc67 	bl	800093c <RCC_AHB1PeriphClockCmd>

	  /* All Periph clock Disable */
DisableAllAHBxAPBxPeriClocks();
 800306e:	f7ff fdcf 	bl	8002c10 <DisableAllAHBxAPBxPeriClocks>
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000088c 	.word	0x2000088c
 800307c:	40023800 	.word	0x40023800
 8003080:	07413c08 	.word	0x07413c08
 8003084:	20000890 	.word	0x20000890
 8003088:	40020800 	.word	0x40020800
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40021000 	.word	0x40021000
 8003094:	40021c00 	.word	0x40021c00
 8003098:	40021400 	.word	0x40021400
 800309c:	40021800 	.word	0x40021800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40020400 	.word	0x40020400

080030a8 <PWR_RunPeriphEnabled60Mhz>:
  * @param  None
  * @retval None
  */

void PWR_RunPeriphEnabled60Mhz(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	  /* Clock init configuration ------------------------------------------------*/
	  RCC_DeInit();
 80030ac:	f7fd fb30 	bl	8000710 <RCC_DeInit>

	  /* Enable HSE */
	  RCC_HSEConfig(RCC_HSE_ON);
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7fd fb65 	bl	8000780 <RCC_HSEConfig>

	  /* Wait till HSE is ready */
	  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 80030b6:	f7fd fb77 	bl	80007a8 <RCC_WaitForHSEStartUp>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	4b3a      	ldr	r3, [pc, #232]	@ (80031a8 <PWR_RunPeriphEnabled60Mhz+0x100>)
 80030c0:	701a      	strb	r2, [r3, #0]

	  if (HSEStartUpStatus == SUCCESS)
 80030c2:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <PWR_RunPeriphEnabled60Mhz+0x100>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d135      	bne.n	8003136 <PWR_RunPeriphEnabled60Mhz+0x8e>
	  {

	    /* Enable PWR APB1 Clock */
	    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80030ca:	2101      	movs	r1, #1
 80030cc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80030d0:	f7fd fc54 	bl	800097c <RCC_APB1PeriphClockCmd>

	    /* Select regulator voltage output Scale 3 mode*/
	    PWR_MainRegulatorModeConfig(PWR_Regulator_Voltage_Scale3);
 80030d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030d8:	f7fd fac4 	bl	8000664 <PWR_MainRegulatorModeConfig>
	    FLASH_PrefetchBufferCmd(ENABLE);

	#else /* Prefetch_Enable */

	    /* Disable prefetch buffer */
	    FLASH_PrefetchBufferCmd(DISABLE);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fd f9b9 	bl	8000454 <FLASH_PrefetchBufferCmd>

	#endif /* Prefetch_Enable */

	    /* Enable flash instruction cache */
	    FLASH_InstructionCacheCmd(ENABLE);
 80030e2:	2001      	movs	r0, #1
 80030e4:	f7fd f9d4 	bl	8000490 <FLASH_InstructionCacheCmd>

	    /* Enable flash data cache */
	    FLASH_DataCacheCmd(ENABLE);
 80030e8:	2001      	movs	r0, #1
 80030ea:	f7fd f9ef 	bl	80004cc <FLASH_DataCacheCmd>
	#endif /* ART_Enable */

	    /* Configure Wait states according to power supply voltage */
	#if defined VDD3_3
	    /* Flash 1 wait state */
	    FLASH_SetLatency(FLASH_Latency_1);
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7fd f9a0 	bl	8000434 <FLASH_SetLatency>
	    /* Flash 2 wait state */
	    FLASH_SetLatency(FLASH_Latency_2);
	#endif

	    /* Configures the AHB clock */
	    RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fbcb 	bl	8000890 <RCC_HCLKConfig>

	    /* PCLK2 = HCLK/2 */
	    RCC_PCLK2Config(RCC_HCLK_Div1);
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7fd fc00 	bl	8000900 <RCC_PCLK2Config>

	    /* PCLK1 = HCLK/4 */
	    RCC_PCLK1Config(RCC_HCLK_Div2);
 8003100:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003104:	f7fd fbe0 	bl	80008c8 <RCC_PCLK1Config>

	    /* configure the PLL */
	    RCC->PLLCFGR = HSE_OF_NUCLEO_F446RE | (240 << 6) | (((4 >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) |
 8003108:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <PWR_RunPeriphEnabled60Mhz+0x104>)
 800310a:	4a29      	ldr	r2, [pc, #164]	@ (80031b0 <PWR_RunPeriphEnabled60Mhz+0x108>)
 800310c:	605a      	str	r2, [r3, #4]
	                   (7 << 24);

	    /* Enable PLL */
	    RCC_PLLCmd(ENABLE);
 800310e:	2001      	movs	r0, #1
 8003110:	f7fd fb82 	bl	8000818 <RCC_PLLCmd>

	    /* Wait till PLL is ready */
	    while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003114:	bf00      	nop
 8003116:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <PWR_RunPeriphEnabled60Mhz+0x104>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f9      	beq.n	8003116 <PWR_RunPeriphEnabled60Mhz+0x6e>
	    {}

	    /* Select PLL as system clock source */
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8003122:	2002      	movs	r0, #2
 8003124:	f7fd fb88 	bl	8000838 <RCC_SYSCLKConfig>

	    /* Wait till the main PLL is used as system clock source */
	    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003128:	bf00      	nop
 800312a:	4b20      	ldr	r3, [pc, #128]	@ (80031ac <PWR_RunPeriphEnabled60Mhz+0x104>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	d1f9      	bne.n	800312a <PWR_RunPeriphEnabled60Mhz+0x82>
	  {}
	  }

	  /* GPIO CONFIG -------------------------------------------------------------*/
	  RCC_AHB1PeriphClockCmd(ALL_GPIOs, ENABLE);
 8003136:	2101      	movs	r1, #1
 8003138:	20ff      	movs	r0, #255	@ 0xff
 800313a:	f7fd fbff 	bl	800093c <RCC_AHB1PeriphClockCmd>

	  /* Configure all GPIO port pins in Analog Input mode (floating input trigger
	     OFF) */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800313e:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003140:	2203      	movs	r2, #3
 8003142:	711a      	strb	r2, [r3, #4]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003144:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003146:	2200      	movs	r2, #0
 8003148:	719a      	strb	r2, [r3, #6]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800314a:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 800314c:	2202      	movs	r2, #2
 800314e:	715a      	strb	r2, [r3, #5]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003152:	2200      	movs	r2, #0
 8003154:	71da      	strb	r2, [r3, #7]
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8003156:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800315c:	601a      	str	r2, [r3, #0]
	  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800315e:	4915      	ldr	r1, [pc, #84]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003160:	4815      	ldr	r0, [pc, #84]	@ (80031b8 <PWR_RunPeriphEnabled60Mhz+0x110>)
 8003162:	f7fd f9d1 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003166:	4913      	ldr	r1, [pc, #76]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003168:	4814      	ldr	r0, [pc, #80]	@ (80031bc <PWR_RunPeriphEnabled60Mhz+0x114>)
 800316a:	f7fd f9cd 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800316e:	4911      	ldr	r1, [pc, #68]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003170:	4813      	ldr	r0, [pc, #76]	@ (80031c0 <PWR_RunPeriphEnabled60Mhz+0x118>)
 8003172:	f7fd f9c9 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOH, &GPIO_InitStructure);
 8003176:	490f      	ldr	r1, [pc, #60]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003178:	4812      	ldr	r0, [pc, #72]	@ (80031c4 <PWR_RunPeriphEnabled60Mhz+0x11c>)
 800317a:	f7fd f9c5 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 800317e:	490d      	ldr	r1, [pc, #52]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003180:	4811      	ldr	r0, [pc, #68]	@ (80031c8 <PWR_RunPeriphEnabled60Mhz+0x120>)
 8003182:	f7fd f9c1 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003186:	490b      	ldr	r1, [pc, #44]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003188:	4810      	ldr	r0, [pc, #64]	@ (80031cc <PWR_RunPeriphEnabled60Mhz+0x124>)
 800318a:	f7fd f9bd 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800318e:	4909      	ldr	r1, [pc, #36]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003190:	480f      	ldr	r0, [pc, #60]	@ (80031d0 <PWR_RunPeriphEnabled60Mhz+0x128>)
 8003192:	f7fd f9b9 	bl	8000508 <GPIO_Init>
	  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003196:	4907      	ldr	r1, [pc, #28]	@ (80031b4 <PWR_RunPeriphEnabled60Mhz+0x10c>)
 8003198:	480e      	ldr	r0, [pc, #56]	@ (80031d4 <PWR_RunPeriphEnabled60Mhz+0x12c>)
 800319a:	f7fd f9b5 	bl	8000508 <GPIO_Init>

	  /* All Periph clock Disable */
	  EnableAllAHBxAPBxPeriClocks();
 800319e:	f7ff fd59 	bl	8002c54 <EnableAllAHBxAPBxPeriClocks>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000088c 	.word	0x2000088c
 80031ac:	40023800 	.word	0x40023800
 80031b0:	07413c08 	.word	0x07413c08
 80031b4:	20000890 	.word	0x20000890
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40021c00 	.word	0x40021c00
 80031c8:	40021400 	.word	0x40021400
 80031cc:	40021800 	.word	0x40021800
 80031d0:	40020000 	.word	0x40020000
 80031d4:	40020400 	.word	0x40020400

080031d8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{}
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <HardFault_Handler+0x4>

080031ee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80031f2:	bf00      	nop
 80031f4:	e7fd      	b.n	80031f2 <MemManage_Handler+0x4>

080031f6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <BusFault_Handler+0x4>

080031fe <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003202:	bf00      	nop
 8003204:	e7fd      	b.n	8003202 <UsageFault_Handler+0x4>

08003206 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{}
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{}
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{}
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI Line 0 interrupts requests.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(EXTI_Line13) != RESET)
 8003244:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003248:	f7fd f8ca 	bl	80003e0 <EXTI_GetITStatus>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <EXTI15_10_IRQHandler+0x20>
  {
    /* Clear the user push-button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line13);
 8003252:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003256:	f7fd f8dd 	bl	8000414 <EXTI_ClearITPendingBit>
    UserButtonStatus = SET;
 800325a:	4b02      	ldr	r3, [pc, #8]	@ (8003264 <EXTI15_10_IRQHandler+0x24>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]

  }
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000888 	.word	0x20000888

08003268 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  if (RTC_GetITStatus(RTC_IT_WUT) != RESET)
 800326c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003270:	f7fd fbfe 	bl	8000a70 <RTC_GetITStatus>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <RTC_WKUP_IRQHandler+0x22>
  {
    /* Clears the RTC's interrupt pending for WakeUp Timer  */
    RTC_ClearITPendingBit(RTC_IT_WUT);
 800327a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800327e:	f7fd fc31 	bl	8000ae4 <RTC_ClearITPendingBit>

    /* Clear the user push-button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line22);
 8003282:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8003286:	f7fd f8c5 	bl	8000414 <EXTI_ClearITPendingBit>
  }
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003294:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003296:	e003      	b.n	80032a0 <LoopCopyDataInit>

08003298 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003298:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800329a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800329c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800329e:	3104      	adds	r1, #4

080032a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032a0:	480b      	ldr	r0, [pc, #44]	@ (80032d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032a2:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032a8:	d3f6      	bcc.n	8003298 <CopyDataInit>
  ldr  r2, =_sbss
 80032aa:	4a0b      	ldr	r2, [pc, #44]	@ (80032d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032ac:	e002      	b.n	80032b4 <LoopFillZerobss>

080032ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032b0:	f842 3b04 	str.w	r3, [r2], #4

080032b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032b4:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032b8:	d3f9      	bcc.n	80032ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032ba:	f7fe ffd7 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032be:	f000 f811 	bl	80032e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c2:	f7ff fb77 	bl	80029b4 <main>
  bx  lr    
 80032c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032cc:	08003414 	.word	0x08003414
  ldr  r0, =_sdata
 80032d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032d4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80032d8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80032dc:	20000898 	.word	0x20000898

080032e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC_IRQHandler>
	...

080032e4 <__libc_init_array>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	4d0d      	ldr	r5, [pc, #52]	@ (800331c <__libc_init_array+0x38>)
 80032e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003320 <__libc_init_array+0x3c>)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	2600      	movs	r6, #0
 80032f0:	42a6      	cmp	r6, r4
 80032f2:	d109      	bne.n	8003308 <__libc_init_array+0x24>
 80032f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003324 <__libc_init_array+0x40>)
 80032f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003328 <__libc_init_array+0x44>)
 80032f8:	f000 f818 	bl	800332c <_init>
 80032fc:	1b64      	subs	r4, r4, r5
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	2600      	movs	r6, #0
 8003302:	42a6      	cmp	r6, r4
 8003304:	d105      	bne.n	8003312 <__libc_init_array+0x2e>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	f855 3b04 	ldr.w	r3, [r5], #4
 800330c:	4798      	blx	r3
 800330e:	3601      	adds	r6, #1
 8003310:	e7ee      	b.n	80032f0 <__libc_init_array+0xc>
 8003312:	f855 3b04 	ldr.w	r3, [r5], #4
 8003316:	4798      	blx	r3
 8003318:	3601      	adds	r6, #1
 800331a:	e7f2      	b.n	8003302 <__libc_init_array+0x1e>
 800331c:	0800340c 	.word	0x0800340c
 8003320:	0800340c 	.word	0x0800340c
 8003324:	0800340c 	.word	0x0800340c
 8003328:	08003410 	.word	0x08003410

0800332c <_init>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	bf00      	nop
 8003330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003332:	bc08      	pop	{r3}
 8003334:	469e      	mov	lr, r3
 8003336:	4770      	bx	lr

08003338 <_fini>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	bf00      	nop
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr
